{"version":3,"file":"jquery.dataTables.min.js","sources":["../src/jquery.dataTables.js"],"sourcesContent":["/*eslint-disable*/\n/**\n * @summary     DataTables\n * @description Paginate, search and sort HTML tables\n * @version     1.9.4\n * @file        jquery.dataTables.js\n * @author      Allan Jardine (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n *\n * @copyright Copyright 2008-2012 Allan Jardine, all rights reserved.\n *\n * This source file is free software, under either the GPL v2 license or a\n * BSD style license, available at:\n *   http://datatables.net/license_gpl2\n *   http://datatables.net/license_bsd\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n/*jslint evil: true, undef: true, browser: true */\n/*globals $, jQuery,define,_fnExternApiFunc,_fnInitialise,_fnInitComplete,_fnLanguageCompat,_fnAddColumn,_fnColumnOptions,_fnAddData,_fnCreateTr,_fnGatherData,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnServerParams,_fnAddOptionsHtml,_fnFeatureHtmlTable,_fnScrollDraw,_fnAdjustColumnSizing,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnBuildSearchArray,_fnBuildSearchRow,_fnFilterCreateSearch,_fnDataToSearch,_fnSort,_fnSortAttachListener,_fnSortingClasses,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnFeatureHtmlLength,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnNodeToDataIndex,_fnVisbleColumns,_fnCalculateEnd,_fnConvertToWidth,_fnCalculateColumnWidths,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnDetectType,_fnSettingsFromNode,_fnGetDataMaster,_fnGetTrNodes,_fnGetTdNodes,_fnEscapeRegex,_fnDeleteIndex,_fnReOrderIndex,_fnColumnOrdering,_fnLog,_fnClearTable,_fnSaveState,_fnLoadState,_fnCreateCookie,_fnReadCookie,_fnDetectHeader,_fnGetUniqueThs,_fnScrollBarWidth,_fnApplyToChildren,_fnMap,_fnGetRowData,_fnGetCellData,_fnSetCellData,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnApplyColumnDefs,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnJsonString,_fnRender,_fnNodeToColumnIndex,_fnInfoMacros,_fnBrowserDetect,_fnGetColumns*/\n\n(/** @lends <global> */function(window, document, undefined) {\n\n    (function(factory) {\n        \"use strict\";\n\n        // Define as an AMD module if possible\n        if (typeof define === 'function' && define.amd) {\n            define(['jquery'], factory);\n        }\n        /* Define using browser globals otherwise\n\t * Prevent multiple instantiations if the script is loaded twice\n\t */\n        else if (jQuery && !jQuery.fn.dataTable) {\n            factory(jQuery);\n        }\n    }\n    (/** @lends <global> */function($) {\n        \"use strict\";\n        /**\n         * DataTables is a plug-in for the jQuery Javascript library. It is a\n         * highly flexible tool, based upon the foundations of progressive\n         * enhancement, which will add advanced interaction controls to any\n         * HTML table. For a full list of features please refer to\n         * <a href=\"http://datatables.net\">DataTables.net</a>.\n         *\n         * Note that the <i>DataTable</i> object is not a global variable but is\n         * aliased to <i>jQuery.fn.DataTable</i> and <i>jQuery.fn.dataTable</i> through which\n         * it may be  accessed.\n         *\n         *  @class\n         *  @param {object} [oInit={}] Configuration object for DataTables. Options\n         *    are defined by {@link DataTable.defaults}\n         *  @requires jQuery 1.3+\n         *\n         *  @example\n         *    // Basic initialisation\n         *    $(document).ready( function {\n         *      $('#example').dataTable();\n         *    } );\n         *\n         *  @example\n         *    // Initialisation with configuration options - in this case, disable\n         *    // pagination and sorting.\n         *    $(document).ready( function {\n         *      $('#example').dataTable( {\n         *        \"bPaginate\": false,\n         *        \"bSort\": false\n         *      } );\n         *    } );\n         */\n        var DataTable = function(oInit) {\n\n\n            /**\n             * Add a column to the list used for the table with default values\n             *  @param {object} oSettings dataTables settings object\n             *  @param {node} nTh The th element for this column\n             *  @memberof DataTable#oApi\n             */\n            function _fnAddColumn(oSettings, nTh) {\n                var oDefaults = DataTable.defaults.columns;\n                var iCol = oSettings.aoColumns.length;\n                var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {\n                    \"sSortingClass\": oSettings.oClasses.sSortable,\n                    \"sSortingClassJUI\": oSettings.oClasses.sSortJUI,\n                    \"nTh\": nTh ? nTh : document.createElement('th'),\n                    \"sTitle\": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',\n                    \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n                    \"mData\": oDefaults.mData ? oDefaults.oDefaults : iCol\n                });\n                oSettings.aoColumns.push(oCol);\n\n                /* Add a column specific filter */\n                if (oSettings.aoPreSearchCols[iCol] === undefined || oSettings.aoPreSearchCols[iCol] === null) {\n                    oSettings.aoPreSearchCols[iCol] = $.extend({}, DataTable.models.oSearch);\n                } else {\n                    var oPre = oSettings.aoPreSearchCols[iCol];\n\n                    /* Don't require that the user must specify bRegex, bSmart or bCaseInsensitive */\n                    if (oPre.bRegex === undefined) {\n                        oPre.bRegex = true;\n                    }\n\n                    if (oPre.bSmart === undefined) {\n                        oPre.bSmart = true;\n                    }\n\n                    if (oPre.bCaseInsensitive === undefined) {\n                        oPre.bCaseInsensitive = true;\n                    }\n                }\n\n                /* Use the column options function to initialise classes etc */\n                _fnColumnOptions(oSettings, iCol, null);\n            }\n\n\n            /**\n             * Apply options for a column\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} iCol column index to consider\n             *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n             *  @memberof DataTable#oApi\n             */\n            function _fnColumnOptions(oSettings, iCol, oOptions) {\n                var oCol = oSettings.aoColumns[iCol];\n\n                /* User specified column options */\n                if (oOptions !== undefined && oOptions !== null) {\n                    /* Backwards compatibility for mDataProp */\n                    if (oOptions.mDataProp && !oOptions.mData) {\n                        oOptions.mData = oOptions.mDataProp;\n                    }\n\n                    if (oOptions.sType !== undefined) {\n                        oCol.sType = oOptions.sType;\n                        oCol._bAutoType = false;\n                    }\n\n                    $.extend(oCol, oOptions);\n                    _fnMap(oCol, oOptions, \"sWidth\", \"sWidthOrig\");\n\n                    /* iDataSort to be applied (backwards compatibility), but aDataSort will take\n\t\t\t\t * priority if defined\n\t\t\t\t */\n                    if (oOptions.iDataSort !== undefined) {\n                        oCol.aDataSort = [oOptions.iDataSort];\n                    }\n                    _fnMap(oCol, oOptions, \"aDataSort\");\n                }\n\n                /* Cache the data get and set functions for speed */\n                var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;\n                var mData = _fnGetObjectDataFn(oCol.mData);\n\n                oCol.fnGetData = function(oData, sSpecific) {\n                    var innerData = mData(oData, sSpecific);\n\n                    if (oCol.mRender && (sSpecific && sSpecific !== '')) {\n                        return mRender(innerData, sSpecific, oData);\n                    }\n                    return innerData;\n                };\n                oCol.fnSetData = _fnSetObjectDataFn(oCol.mData);\n\n                /* Feature sorting overrides column specific when off */\n                if (!oSettings.oFeatures.bSort) {\n                    oCol.bSortable = false;\n                }\n\n                /* Check that the class assignment is correct for sorting */\n                if (!oCol.bSortable ||\n                    ($.inArray('asc', oCol.asSorting) == -1 && $.inArray('desc', oCol.asSorting) == -1)) {\n                    oCol.sSortingClass = oSettings.oClasses.sSortableNone;\n                    oCol.sSortingClassJUI = \"\";\n                } else if ($.inArray('asc', oCol.asSorting) == -1 && $.inArray('desc', oCol.asSorting) == -1) {\n                    oCol.sSortingClass = oSettings.oClasses.sSortable;\n                    oCol.sSortingClassJUI = oSettings.oClasses.sSortJUI;\n                } else if ($.inArray('asc', oCol.asSorting) != -1 && $.inArray('desc', oCol.asSorting) == -1) {\n                    oCol.sSortingClass = oSettings.oClasses.sSortableAsc;\n                    oCol.sSortingClassJUI = oSettings.oClasses.sSortJUIAscAllowed;\n                } else if ($.inArray('asc', oCol.asSorting) == -1 && $.inArray('desc', oCol.asSorting) != -1) {\n                    oCol.sSortingClass = oSettings.oClasses.sSortableDesc;\n                    oCol.sSortingClassJUI = oSettings.oClasses.sSortJUIDescAllowed;\n                }\n            }\n\n\n            /**\n             * Adjust the table column widths for new data. Note: you would probably want to\n             * do a redraw after calling this function!\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnAdjustColumnSizing(oSettings) {\n                /* Not interested in doing column width calculation if auto-width is disabled */\n                if (oSettings.oFeatures.bAutoWidth === false) {\n                    return false;\n                }\n\n                _fnCalculateColumnWidths(oSettings);\n                for (var i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                    oSettings.aoColumns[i].nTh.style.width = oSettings.aoColumns[i].sWidth;\n                }\n            }\n\n\n            /**\n             * Covert the index of a visible column to the index in the data array (take account\n             * of hidden columns)\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} iMatch Visible column index to lookup\n             *  @returns {int} i the data index\n             *  @memberof DataTable#oApi\n             */\n            function _fnVisibleToColumnIndex(oSettings, iMatch) {\n                var aiVis = _fnGetColumns(oSettings, 'bVisible');\n\n                return typeof aiVis[iMatch] === 'number' ?\n                    aiVis[iMatch] :\n                    null;\n            }\n\n\n            /**\n             * Covert the index of an index in the data array and convert it to the visible\n             *   column index (take account of hidden columns)\n             *  @param {int} iMatch Column index to lookup\n             *  @param {object} oSettings dataTables settings object\n             *  @returns {int} i the data index\n             *  @memberof DataTable#oApi\n             */\n            function _fnColumnIndexToVisible(oSettings, iMatch) {\n                var aiVis = _fnGetColumns(oSettings, 'bVisible');\n                var iPos = $.inArray(iMatch, aiVis);\n\n                return iPos !== -1 ? iPos : null;\n            }\n\n\n            /**\n             * Get the number of visible columns\n             *  @param {object} oSettings dataTables settings object\n             *  @returns {int} i the number of visible columns\n             *  @memberof DataTable#oApi\n             */\n            function _fnVisbleColumns(oSettings) {\n                return _fnGetColumns(oSettings, 'bVisible').length;\n            }\n\n\n            /**\n             * Get an array of column indexes that match a given property\n             *  @param {object} oSettings dataTables settings object\n             *  @param {string} sParam Parameter in aoColumns to look for - typically\n             *    bVisible or bSearchable\n             *  @returns {array} Array of indexes with matched properties\n             *  @memberof DataTable#oApi\n             */\n            function _fnGetColumns(oSettings, sParam) {\n                var a = [];\n\n                $.map(oSettings.aoColumns, function(val, i) {\n                    if (val[sParam]) {\n                        a.push(i);\n                    }\n                });\n\n                return a;\n            }\n\n\n            /**\n             * Get the sort type based on an input string\n             *  @param {string} sData data we wish to know the type of\n             *  @returns {string} type (defaults to 'string' if no type can be detected)\n             *  @memberof DataTable#oApi\n             */\n            function _fnDetectType(sData) {\n                var aTypes = DataTable.ext.aTypes;\n                var iLen = aTypes.length;\n\n                for (var i = 0; i < iLen; i++) {\n                    var sType = aTypes[i](sData);\n                    if (sType !== null) {\n                        return sType;\n                    }\n                }\n\n                return 'string';\n            }\n\n\n            /**\n             * Figure out how to reorder a display list\n             *  @param {object} oSettings dataTables settings object\n             *  @returns array {int} aiReturn index list for reordering\n             *  @memberof DataTable#oApi\n             */\n            function _fnReOrderIndex(oSettings, sColumns) {\n                var aColumns = sColumns.split(',');\n                var aiReturn = [];\n\n                for (var i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                    for (var j = 0; j < iLen; j++) {\n                        if (oSettings.aoColumns[i].sName == aColumns[j]) {\n                            aiReturn.push(j);\n                            break;\n                        }\n                    }\n                }\n\n                return aiReturn;\n            }\n\n\n            /**\n             * Get the column ordering that DataTables expects\n             *  @param {object} oSettings dataTables settings object\n             *  @returns {string} comma separated list of names\n             *  @memberof DataTable#oApi\n             */\n            function _fnColumnOrdering(oSettings) {\n                var sNames = '';\n                for (var i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                    sNames += oSettings.aoColumns[i].sName + ',';\n                }\n                if (sNames.length == iLen) {\n                    return \"\";\n                }\n                return sNames.slice(0, -1);\n            }\n\n\n            /**\n             * Take the column definitions and static columns arrays and calculate how\n             * they relate to column indexes. The callback function will then apply the\n             * definition found for a column to a suitable configuration object.\n             *  @param {object} oSettings dataTables settings object\n             *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n             *  @param {array} aoCols The aoColumns array that defines columns individually\n             *  @param {function} fn Callback function - takes two parameters, the calculated\n             *    column index and the definition for that column.\n             *  @memberof DataTable#oApi\n             */\n            function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {\n                var i, iLen, j, jLen, k, kLen;\n\n                // Column definitions with aTargets\n                if (aoColDefs) {\n                    /* Loop over the definitions array - loop in reverse so first instance has priority */\n                    for (i = aoColDefs.length - 1; i >= 0; i--) {\n                        /* Each definition can target multiple columns, as it is an array */\n                        var aTargets = aoColDefs[i].aTargets;\n                        if (!$.isArray(aTargets)) {\n                            _fnLog(oSettings, 1, 'aTargets must be an array of targets, not a ' + (typeof aTargets));\n                        }\n\n                        for (j = 0, jLen = aTargets.length; j < jLen; j++) {\n                            if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {\n                                /* Add columns that we don't yet know about */\n                                while (oSettings.aoColumns.length <= aTargets[j]) {\n                                    _fnAddColumn(oSettings);\n                                }\n\n                                /* Integer, basic index */\n                                fn(aTargets[j], aoColDefs[i]);\n                            } else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {\n                                /* Negative integer, right to left column counting */\n                                fn(oSettings.aoColumns.length + aTargets[j], aoColDefs[i]);\n                            } else if (typeof aTargets[j] === 'string') {\n                                /* Class name matching on TH element */\n                                for (k = 0, kLen = oSettings.aoColumns.length; k < kLen; k++) {\n                                    if (aTargets[j] == \"_all\" ||\n                                        $(oSettings.aoColumns[k].nTh).hasClass(aTargets[j])) {\n                                        fn(k, aoColDefs[i]);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Statically defined columns array\n                if (aoCols) {\n                    for (i = 0, iLen = aoCols.length; i < iLen; i++) {\n                        fn(i, aoCols[i]);\n                    }\n                }\n            }\n\n            /**\n             * Add a data array to the table, creating DOM node etc. This is the parallel to\n             * _fnGatherData, but for adding rows from a Javascript source, rather than a\n             * DOM source.\n             *  @param {object} oSettings dataTables settings object\n             *  @param {array} aData data array to be added\n             *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n             *  @memberof DataTable#oApi\n             */\n            function _fnAddData(oSettings, aDataSupplied) {\n                var oCol;\n\n                /* Take an independent copy of the data source so we can bash it about as we wish */\n                var aDataIn = ($.isArray(aDataSupplied)) ?\n                    aDataSupplied.slice() :\n                    $.extend(true, {}, aDataSupplied);\n\n                /* Create the object for storing information about this new row */\n                var iRow = oSettings.aoData.length;\n                var oData = $.extend(true, {}, DataTable.models.oRow);\n                oData._aData = aDataIn;\n                oSettings.aoData.push(oData);\n\n                /* Create the cells */\n                var nTd, sThisType;\n                for (var i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                    oCol = oSettings.aoColumns[i];\n\n                    /* Use rendered data for filtering / sorting */\n                    if (typeof oCol.fnRender === 'function' && oCol.bUseRendered && oCol.mData !== null) {\n                        _fnSetCellData(oSettings, iRow, i, _fnRender(oSettings, iRow, i));\n                    } else {\n                        _fnSetCellData(oSettings, iRow, i, _fnGetCellData(oSettings, iRow, i));\n                    }\n\n                    /* See if we should auto-detect the column type */\n                    if (oCol._bAutoType && oCol.sType != 'string') {\n                        /* Attempt to auto detect the type - same as _fnGatherData() */\n                        var sVarType = _fnGetCellData(oSettings, iRow, i, 'type');\n                        if (sVarType !== null && sVarType !== '') {\n                            sThisType = _fnDetectType(sVarType);\n                            if (oCol.sType === null) {\n                                oCol.sType = sThisType;\n                            } else if (oCol.sType != sThisType && oCol.sType != \"html\") {\n                                /* String is always the 'fallback' option */\n                                oCol.sType = 'string';\n                            }\n                        }\n                    }\n                }\n\n                /* Add to the display array */\n                oSettings.aiDisplayMaster.push(iRow);\n\n                /* Create the DOM information */\n                if (!oSettings.oFeatures.bDeferRender) {\n                    _fnCreateTr(oSettings, iRow);\n                }\n\n                return iRow;\n            }\n\n\n            /**\n             * Read in the data from the target table from the DOM\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnGatherData(oSettings) {\n                var iLoop, i, iLen, j, jLen, jInner,\n                    nTds, nTrs, nTd, nTr, aLocalData, iThisIndex,\n                    iRow, iRows, iColumn, iColumns, sNodeName,\n                    oCol, oData;\n\n                /*\n\t\t\t * Process by row first\n\t\t\t * Add the data object for the whole table - storing the tr node. Note - no point in getting\n\t\t\t * DOM based data if we are going to go and replace it with Ajax source data.\n\t\t\t */\n                if (oSettings.bDeferLoading || oSettings.sAjaxSource === null) {\n                    nTr = oSettings.nTBody.firstChild;\n                    while (nTr) {\n                        if (nTr.nodeName.toUpperCase() == \"TR\") {\n                            iThisIndex = oSettings.aoData.length;\n                            nTr._DT_RowIndex = iThisIndex;\n                            oSettings.aoData.push($.extend(true, {}, DataTable.models.oRow, {\n                                \"nTr\": nTr\n                            }));\n\n                            oSettings.aiDisplayMaster.push(iThisIndex);\n                            nTd = nTr.firstChild;\n                            jInner = 0;\n                            while (nTd) {\n                                sNodeName = nTd.nodeName.toUpperCase();\n                                if (sNodeName == \"TD\" || sNodeName == \"TH\") {\n                                    _fnSetCellData(oSettings, iThisIndex, jInner, $.trim(nTd.innerHTML));\n                                    jInner++;\n                                }\n                                nTd = nTd.nextSibling;\n                            }\n                        }\n                        nTr = nTr.nextSibling;\n                    }\n                }\n\n                /* Gather in the TD elements of the Table - note that this is basically the same as\n\t\t\t * fnGetTdNodes, but that function takes account of hidden columns, which we haven't yet\n\t\t\t * setup!\n\t\t\t */\n                nTrs = _fnGetTrNodes(oSettings);\n                nTds = [];\n                for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n                    nTd = nTrs[i].firstChild;\n                    while (nTd) {\n                        sNodeName = nTd.nodeName.toUpperCase();\n                        if (sNodeName == \"TD\" || sNodeName == \"TH\") {\n                            nTds.push(nTd);\n                        }\n                        nTd = nTd.nextSibling;\n                    }\n                }\n\n                /* Now process by column */\n                for (iColumn = 0, iColumns = oSettings.aoColumns.length; iColumn < iColumns; iColumn++) {\n                    oCol = oSettings.aoColumns[iColumn];\n\n                    /* Get the title of the column - unless there is a user set one */\n                    if (oCol.sTitle === null) {\n                        oCol.sTitle = oCol.nTh.innerHTML;\n                    }\n\n                    var\n                        bAutoType = oCol._bAutoType,\n                        bRender = typeof oCol.fnRender === 'function',\n                        bClass = oCol.sClass !== null,\n                        bVisible = oCol.bVisible,\n                        nCell, sThisType, sRendered, sValType;\n\n                    /* A single loop to rule them all (and be more efficient) */\n                    if (bAutoType || bRender || bClass || !bVisible) {\n                        for (iRow = 0, iRows = oSettings.aoData.length; iRow < iRows; iRow++) {\n                            oData = oSettings.aoData[iRow];\n                            nCell = nTds[(iRow * iColumns) + iColumn];\n\n                            /* Type detection */\n                            if (bAutoType && oCol.sType != 'string') {\n                                sValType = _fnGetCellData(oSettings, iRow, iColumn, 'type');\n                                if (sValType !== '') {\n                                    sThisType = _fnDetectType(sValType);\n                                    if (oCol.sType === null) {\n                                        oCol.sType = sThisType;\n                                    } else if (oCol.sType != sThisType &&\n                                        oCol.sType != \"html\") {\n                                        /* String is always the 'fallback' option */\n                                        oCol.sType = 'string';\n                                    }\n                                }\n                            }\n\n                            if (oCol.mRender) {\n                                // mRender has been defined, so we need to get the value and set it\n                                nCell.innerHTML = _fnGetCellData(oSettings, iRow, iColumn, 'display');\n                            } else if (oCol.mData !== iColumn) {\n                                // If mData is not the same as the column number, then we need to\n                                // get the dev set value. If it is the column, no point in wasting\n                                // time setting the value that is already there!\n                                nCell.innerHTML = _fnGetCellData(oSettings, iRow, iColumn, 'display');\n                            }\n\n                            /* Rendering */\n                            if (bRender) {\n                                sRendered = _fnRender(oSettings, iRow, iColumn);\n                                nCell.innerHTML = sRendered;\n                                if (oCol.bUseRendered) {\n                                    /* Use the rendered data for filtering / sorting */\n                                    _fnSetCellData(oSettings, iRow, iColumn, sRendered);\n                                }\n                            }\n\n                            /* Classes */\n                            if (bClass) {\n                                nCell.className += ' ' + oCol.sClass;\n                            }\n\n                            /* Column visibility */\n                            if (!bVisible) {\n                                oData._anHidden[iColumn] = nCell;\n                                nCell.parentNode.removeChild(nCell);\n                            } else {\n                                oData._anHidden[iColumn] = null;\n                            }\n\n                            if (oCol.fnCreatedCell) {\n                                oCol.fnCreatedCell.call(oSettings.oInstance,\n                                    nCell, _fnGetCellData(oSettings, iRow, iColumn, 'display'), oData._aData, iRow, iColumn\n                                );\n                            }\n                        }\n                    }\n                }\n\n                /* Row created callbacks */\n                if (oSettings.aoRowCreatedCallback.length !== 0) {\n                    for (i = 0, iLen = oSettings.aoData.length; i < iLen; i++) {\n                        oData = oSettings.aoData[i];\n                        _fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [oData.nTr, oData._aData, i]);\n                    }\n                }\n            }\n\n\n            /**\n             * Take a TR element and convert it to an index in aoData\n             *  @param {object} oSettings dataTables settings object\n             *  @param {node} n the TR element to find\n             *  @returns {int} index if the node is found, null if not\n             *  @memberof DataTable#oApi\n             */\n            function _fnNodeToDataIndex(oSettings, n) {\n                return (n._DT_RowIndex !== undefined) ? n._DT_RowIndex : null;\n            }\n\n\n            /**\n             * Take a TD element and convert it into a column data index (not the visible index)\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} iRow The row number the TD/TH can be found in\n             *  @param {node} n The TD/TH element to find\n             *  @returns {int} index if the node is found, -1 if not\n             *  @memberof DataTable#oApi\n             */\n            function _fnNodeToColumnIndex(oSettings, iRow, n) {\n                var anCells = _fnGetTdNodes(oSettings, iRow);\n\n                for (var i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                    if (anCells[i] === n) {\n                        return i;\n                    }\n                }\n                return -1;\n            }\n\n\n            /**\n             * Get an array of data for a given row from the internal data cache\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} iRow aoData row id\n             *  @param {string} sSpecific data get type ('type' 'filter' 'sort')\n             *  @param {array} aiColumns Array of column indexes to get data from\n             *  @returns {array} Data array\n             *  @memberof DataTable#oApi\n             */\n            function _fnGetRowData(oSettings, iRow, sSpecific, aiColumns) {\n                var out = [];\n                for (var i = 0, iLen = aiColumns.length; i < iLen; i++) {\n                    out.push(_fnGetCellData(oSettings, iRow, aiColumns[i], sSpecific));\n                }\n                return out;\n            }\n\n\n            /**\n             * Get the data for a given cell from the internal cache, taking into account data mapping\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} iRow aoData row id\n             *  @param {int} iCol Column index\n             *  @param {string} sSpecific data get type ('display', 'type' 'filter' 'sort')\n             *  @returns {*} Cell data\n             *  @memberof DataTable#oApi\n             */\n            function _fnGetCellData(oSettings, iRow, iCol, sSpecific) {\n                var sData;\n                var oCol = oSettings.aoColumns[iCol];\n                var oData = oSettings.aoData[iRow]._aData;\n\n                if ((sData = oCol.fnGetData(oData, sSpecific)) === undefined) {\n                    if (oSettings.iDrawError != oSettings.iDraw && oCol.sDefaultContent === null) {\n                        _fnLog(oSettings, 0, \"Requested unknown parameter \" +\n                            (typeof oCol.mData == 'function' ? '{mData function}' : \"'\" + oCol.mData + \"'\") +\n                            \" from the data source for row \" + iRow);\n                        oSettings.iDrawError = oSettings.iDraw;\n                    }\n                    return oCol.sDefaultContent;\n                }\n\n                /* When the data source is null, we can use default column data */\n                if (sData === null && oCol.sDefaultContent !== null) {\n                    sData = oCol.sDefaultContent;\n                } else if (typeof sData === 'function') {\n                    /* If the data source is a function, then we run it and use the return */\n                    return sData();\n                }\n\n                if (sSpecific == 'display' && sData === null) {\n                    return '';\n                }\n                return sData;\n            }\n\n\n            /**\n             * Set the value for a specific cell, into the internal data cache\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} iRow aoData row id\n             *  @param {int} iCol Column index\n             *  @param {*} val Value to set\n             *  @memberof DataTable#oApi\n             */\n            function _fnSetCellData(oSettings, iRow, iCol, val) {\n                var oCol = oSettings.aoColumns[iCol];\n                var oData = oSettings.aoData[iRow]._aData;\n\n                oCol.fnSetData(oData, val);\n            }\n\n\n            // Private variable that is used to match array syntax in the data property object\n            var __reArray = /\\[.*?\\]$/;\n\n            /**\n             * Return a function that can be used to get data from a source object, taking\n             * into account the ability to use nested objects as a source\n             *  @param {string|int|function} mSource The data source for the object\n             *  @returns {function} Data get function\n             *  @memberof DataTable#oApi\n             */\n            function _fnGetObjectDataFn(mSource) {\n                if (mSource === null) {\n                    /* Give an empty string for rendering / sorting etc */\n                    return function(data, type) {\n                        return null;\n                    };\n                } else if (typeof mSource === 'function') {\n                    return function(data, type, extra) {\n                        return mSource(data, type, extra);\n                    };\n                } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1)) {\n                    /* If there is a . in the source string then the data source is in a\n\t\t\t\t * nested object so we loop over the data for each level to get the next\n\t\t\t\t * level down. On each loop we test for undefined, and if found immediately\n\t\t\t\t * return. This allows entire objects to be missing and sDefaultContent to\n\t\t\t\t * be used if defined, rather than throwing an error\n\t\t\t\t */\n                    var fetchData = function(data, type, src) {\n                        var a = src.split('.');\n                        var arrayNotation, out, innerSrc;\n\n                        if (src !== \"\") {\n                            for (var i = 0, iLen = a.length; i < iLen; i++) {\n                                // Check if we are dealing with an array notation request\n                                arrayNotation = a[i].match(__reArray);\n\n                                if (arrayNotation) {\n                                    a[i] = a[i].replace(__reArray, '');\n\n                                    // Condition allows simply [] to be passed in\n                                    if (a[i] !== \"\") {\n                                        data = data[a[i]];\n                                    }\n                                    out = [];\n\n                                    // Get the remainder of the nested object to get\n                                    a.splice(0, i + 1);\n                                    innerSrc = a.join('.');\n\n                                    // Traverse each entry in the array getting the properties requested\n                                    for (var j = 0, jLen = data.length; j < jLen; j++) {\n                                        out.push(fetchData(data[j], type, innerSrc));\n                                    }\n\n                                    // If a string is given in between the array notation indicators, that\n                                    // is used to join the strings together, otherwise an array is returned\n                                    var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);\n                                    data = (join === \"\") ? out : out.join(join);\n\n                                    // The inner call to fetchData has already traversed through the remainder\n                                    // of the source requested, so we exit from the loop\n                                    break;\n                                }\n\n                                if (data === null || data[a[i]] === undefined) {\n                                    return undefined;\n                                }\n                                data = data[a[i]];\n                            }\n                        }\n\n                        return data;\n                    };\n\n                    return function(data, type) {\n                        return fetchData(data, type, mSource);\n                    };\n                } else {\n                    /* Array or flat object mapping */\n                    return function(data, type) {\n                        return data[mSource];\n                    };\n                }\n            }\n\n\n            /**\n             * Return a function that can be used to set data from a source object, taking\n             * into account the ability to use nested objects as a source\n             *  @param {string|int|function} mSource The data source for the object\n             *  @returns {function} Data set function\n             *  @memberof DataTable#oApi\n             */\n            function _fnSetObjectDataFn(mSource) {\n                if (mSource === null) {\n                    /* Nothing to do when the data source is null */\n                    return function(data, val) {\n                    };\n                } else if (typeof mSource === 'function') {\n                    return function(data, val) {\n                        mSource(data, 'set', val);\n                    };\n                } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1)) {\n                    /* Like the get, we need to get data from a nested object */\n                    var setData = function(data, val, src) {\n                        var a = src.split('.'), b;\n                        var arrayNotation, o, innerSrc;\n\n                        for (var i = 0, iLen = a.length - 1; i < iLen; i++) {\n                            // Check if we are dealing with an array notation request\n                            arrayNotation = a[i].match(__reArray);\n\n                            if (arrayNotation) {\n                                a[i] = a[i].replace(__reArray, '');\n                                data[a[i]] = [];\n\n                                // Get the remainder of the nested object to set so we can recurse\n                                b = a.slice();\n                                b.splice(0, i + 1);\n                                innerSrc = b.join('.');\n\n                                // Traverse each entry in the array setting the properties requested\n                                for (var j = 0, jLen = val.length; j < jLen; j++) {\n                                    o = {};\n                                    setData(o, val[j], innerSrc);\n                                    data[a[i]].push(o);\n                                }\n\n                                // The inner call to setData has already traversed through the remainder\n                                // of the source and has set the data, thus we can exit here\n                                return;\n                            }\n\n                            // If the nested object doesn't currently exist - since we are\n                            // trying to set the value - create it\n                            if (data[a[i]] === null || data[a[i]] === undefined) {\n                                data[a[i]] = {};\n                            }\n                            data = data[a[i]];\n                        }\n\n                        // If array notation is used, we just want to strip it and use the property name\n                        // and assign the value. If it isn't used, then we get the result we want anyway\n                        data[a[a.length - 1].replace(__reArray, '')] = val;\n                    };\n\n                    return function(data, val) {\n                        return setData(data, val, mSource);\n                    };\n                } else {\n                    /* Array or flat object mapping */\n                    return function(data, val) {\n                        data[mSource] = val;\n                    };\n                }\n            }\n\n\n            /**\n             * Return an array with the full table data\n             *  @param {object} oSettings dataTables settings object\n             *  @returns array {array} aData Master data array\n             *  @memberof DataTable#oApi\n             */\n            function _fnGetDataMaster(oSettings) {\n                var aData = [];\n                var iLen = oSettings.aoData.length;\n                for (var i = 0; i < iLen; i++) {\n                    aData.push(oSettings.aoData[i]._aData);\n                }\n                return aData;\n            }\n\n\n            /**\n             * Nuke the table\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnClearTable(oSettings) {\n                oSettings.aoData.splice(0, oSettings.aoData.length);\n                oSettings.aiDisplayMaster.splice(0, oSettings.aiDisplayMaster.length);\n                oSettings.aiDisplay.splice(0, oSettings.aiDisplay.length);\n                _fnCalculateEnd(oSettings);\n            }\n\n\n            /**\n             * Take an array of integers (index array) and remove a target integer (value - not\n             * the key!)\n             *  @param {array} a Index array to target\n             *  @param {int} iTarget value to find\n             *  @memberof DataTable#oApi\n             */\n            function _fnDeleteIndex(a, iTarget) {\n                var iTargetIndex = -1;\n\n                for (var i = 0, iLen = a.length; i < iLen; i++) {\n                    if (a[i] == iTarget) {\n                        iTargetIndex = i;\n                    } else if (a[i] > iTarget) {\n                        a[i]--;\n                    }\n                }\n\n                if (iTargetIndex != -1) {\n                    a.splice(iTargetIndex, 1);\n                }\n            }\n\n\n            /**\n             * Call the developer defined fnRender function for a given cell (row/column) with\n             * the required parameters and return the result.\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} iRow aoData index for the row\n             *  @param {int} iCol aoColumns index for the column\n             *  @returns {*} Return of the developer's fnRender function\n             *  @memberof DataTable#oApi\n             */\n            function _fnRender(oSettings, iRow, iCol) {\n                var oCol = oSettings.aoColumns[iCol];\n\n                return oCol.fnRender({\n                    \"iDataRow\": iRow,\n                    \"iDataColumn\": iCol,\n                    \"oSettings\": oSettings,\n                    \"aData\": oSettings.aoData[iRow]._aData,\n                    \"mDataProp\": oCol.mData\n                }, _fnGetCellData(oSettings, iRow, iCol, 'display'));\n            }\n\n            /**\n             * Create a new TR element (and it's TD children) for a row\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} iRow Row to consider\n             *  @memberof DataTable#oApi\n             */\n            function _fnCreateTr(oSettings, iRow) {\n                var oData = oSettings.aoData[iRow];\n                var nTd;\n\n                if (oData.nTr === null) {\n                    oData.nTr = document.createElement('tr');\n\n                    /* Use a private property on the node to allow reserve mapping from the node\n\t\t\t\t * to the aoData array for fast look up\n\t\t\t\t */\n                    oData.nTr._DT_RowIndex = iRow;\n\n                    /* Special parameters can be given by the data source to be used on the row */\n                    if (oData._aData.DT_RowId) {\n                        oData.nTr.id = oData._aData.DT_RowId;\n                    }\n\n                    if (oData._aData.DT_RowClass) {\n                        oData.nTr.className = oData._aData.DT_RowClass;\n                    }\n\n                    /* Process each column */\n                    for (var i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                        var oCol = oSettings.aoColumns[i];\n                        nTd = document.createElement(oCol.sCellType);\n\n                        /* Render if needed - if bUseRendered is true then we already have the rendered\n\t\t\t\t\t * value in the data source - so can just use that\n\t\t\t\t\t */\n                        nTd.innerHTML = (typeof oCol.fnRender === 'function' && (!oCol.bUseRendered || oCol.mData === null)) ?\n                            _fnRender(oSettings, iRow, i) :\n                            _fnGetCellData(oSettings, iRow, i, 'display');\n\n                        /* Add user defined class */\n                        if (oCol.sClass !== null) {\n                            nTd.className = oCol.sClass;\n                        }\n\n                        if (oCol.bVisible) {\n                            oData.nTr.appendChild(nTd);\n                            oData._anHidden[i] = null;\n                        } else {\n                            oData._anHidden[i] = nTd;\n                        }\n\n                        if (oCol.fnCreatedCell) {\n                            oCol.fnCreatedCell.call(oSettings.oInstance,\n                                nTd, _fnGetCellData(oSettings, iRow, i, 'display'), oData._aData, iRow, i\n                            );\n                        }\n                    }\n\n                    _fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [oData.nTr, oData._aData, iRow]);\n                }\n            }\n\n\n            /**\n             * Create the HTML header for the table\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnBuildHead(oSettings) {\n                var i, nTh, iLen, j, jLen;\n                var iThs = $('th, td', oSettings.nTHead).length;\n                var iCorrector = 0;\n                var jqChildren;\n\n                /* If there is a header in place - then use it - otherwise it's going to get nuked... */\n                if (iThs !== 0) {\n                    /* We've got a thead from the DOM, so remove hidden columns and apply width to vis cols */\n                    for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                        nTh = oSettings.aoColumns[i].nTh;\n                        nTh.setAttribute('role', 'columnheader');\n                        if (oSettings.aoColumns[i].bSortable) {\n                            nTh.setAttribute('tabindex', oSettings.iTabIndex);\n                            nTh.setAttribute('aria-controls', oSettings.sTableId);\n                        }\n\n                        if (oSettings.aoColumns[i].sClass !== null) {\n                            $(nTh).addClass(oSettings.aoColumns[i].sClass);\n                        }\n\n                        /* Set the title of the column if it is user defined (not what was auto detected) */\n                        if (oSettings.aoColumns[i].sTitle != nTh.innerHTML) {\n                            nTh.innerHTML = oSettings.aoColumns[i].sTitle;\n                        }\n                    }\n                } else {\n                    /* We don't have a header in the DOM - so we are going to have to create one */\n                    var nTr = document.createElement(\"tr\");\n\n                    for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                        nTh = oSettings.aoColumns[i].nTh;\n                        nTh.innerHTML = oSettings.aoColumns[i].sTitle;\n                        nTh.setAttribute('tabindex', '0');\n\n                        if (oSettings.aoColumns[i].sClass !== null) {\n                            $(nTh).addClass(oSettings.aoColumns[i].sClass);\n                        }\n\n                        nTr.appendChild(nTh);\n                    }\n                    $(oSettings.nTHead).html('')[0].appendChild(nTr);\n                    _fnDetectHeader(oSettings.aoHeader, oSettings.nTHead);\n                }\n\n                /* ARIA role for the rows */\n                $(oSettings.nTHead).children('tr').attr('role', 'row');\n\n                /* Add the extra markup needed by jQuery UI's themes */\n                if (oSettings.bJUI) {\n                    for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                        nTh = oSettings.aoColumns[i].nTh;\n\n                        var nDiv = document.createElement('div');\n                        nDiv.className = oSettings.oClasses.sSortJUIWrapper;\n                        $(nTh).contents().appendTo(nDiv);\n\n                        var nSpan = document.createElement('span');\n                        nSpan.className = oSettings.oClasses.sSortIcon;\n                        nDiv.appendChild(nSpan);\n                        nTh.appendChild(nDiv);\n                    }\n                }\n\n                if (oSettings.oFeatures.bSort) {\n                    for (i = 0; i < oSettings.aoColumns.length; i++) {\n                        if (oSettings.aoColumns[i].bSortable !== false) {\n                            _fnSortAttachListener(oSettings, oSettings.aoColumns[i].nTh, i);\n                        } else {\n                            $(oSettings.aoColumns[i].nTh).addClass(oSettings.oClasses.sSortableNone);\n                        }\n                    }\n                }\n\n                /* Deal with the footer - add classes if required */\n                if (oSettings.oClasses.sFooterTH !== \"\") {\n                    $(oSettings.nTFoot).children('tr').children('th').addClass(oSettings.oClasses.sFooterTH);\n                }\n\n                /* Cache the footer elements */\n                if (oSettings.nTFoot !== null) {\n                    var anCells = _fnGetUniqueThs(oSettings, null, oSettings.aoFooter);\n                    for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                        if (anCells[i]) {\n                            oSettings.aoColumns[i].nTf = anCells[i];\n                            if (oSettings.aoColumns[i].sClass) {\n                                $(anCells[i]).addClass(oSettings.aoColumns[i].sClass);\n                            }\n                        }\n                    }\n                }\n            }\n\n\n            /**\n             * Draw the header (or footer) element based on the column visibility states. The\n             * methodology here is to use the layout array from _fnDetectHeader, modified for\n             * the instantaneous column visibility, to construct the new layout. The grid is\n             * traversed over cell at a time in a rows x columns grid fashion, although each\n             * cell insert can cover multiple elements in the grid - which is tracks using the\n             * aApplied array. Cell inserts in the grid will only occur where there isn't\n             * already a cell in that position.\n             *  @param {object} oSettings dataTables settings object\n             *  @param array {objects} aoSource Layout array from _fnDetectHeader\n             *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n             *  @memberof DataTable#oApi\n             */\n            function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {\n                var i, iLen, j, jLen, k, kLen, n, nLocalTr;\n                var aoLocal = [];\n                var aApplied = [];\n                var iColumns = oSettings.aoColumns.length;\n                var iRowspan, iColspan;\n\n                if (bIncludeHidden === undefined) {\n                    bIncludeHidden = false;\n                }\n\n                /* Make a copy of the master layout array, but without the visible columns in it */\n                for (i = 0, iLen = aoSource.length; i < iLen; i++) {\n                    aoLocal[i] = aoSource[i].slice();\n                    aoLocal[i].nTr = aoSource[i].nTr;\n\n                    /* Remove any columns which are currently hidden */\n                    for (j = iColumns - 1; j >= 0; j--) {\n                        if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {\n                            aoLocal[i].splice(j, 1);\n                        }\n                    }\n\n                    /* Prep the applied array - it needs an element for each row */\n                    aApplied.push([]);\n                }\n\n                for (i = 0, iLen = aoLocal.length; i < iLen; i++) {\n                    nLocalTr = aoLocal[i].nTr;\n\n                    /* All cells are going to be replaced, so empty out the row */\n                    if (nLocalTr) {\n                        while ((n = nLocalTr.firstChild)) {\n                            nLocalTr.removeChild(n);\n                        }\n                    }\n\n                    for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {\n                        iRowspan = 1;\n                        iColspan = 1;\n\n                        /* Check to see if there is already a cell (row/colspan) covering our target\n\t\t\t\t\t * insert point. If there is, then there is nothing to do.\n\t\t\t\t\t */\n                        if (aApplied[i][j] === undefined) {\n                            nLocalTr.appendChild(aoLocal[i][j].cell);\n                            aApplied[i][j] = 1;\n\n                            /* Expand the cell to cover as many rows as needed */\n                            while (aoLocal[i + iRowspan] !== undefined &&\n                            aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {\n                                aApplied[i + iRowspan][j] = 1;\n                                iRowspan++;\n                            }\n\n                            /* Expand the cell to cover as many columns as needed */\n                            while (aoLocal[i][j + iColspan] !== undefined &&\n                            aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {\n                                /* Must update the applied array over the rows for the columns */\n                                for (k = 0; k < iRowspan; k++) {\n                                    aApplied[i + k][j + iColspan] = 1;\n                                }\n                                iColspan++;\n                            }\n\n                            /* Do the actual expansion in the DOM */\n                            aoLocal[i][j].cell.rowSpan = iRowspan;\n                            aoLocal[i][j].cell.colSpan = iColspan;\n                        }\n                    }\n                }\n            }\n\n\n            /**\n             * Insert the required TR nodes into the table for display\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnDraw(oSettings) {\n                /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n                var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);\n                if ($.inArray(false, aPreDraw) !== -1) {\n                    _fnProcessingDisplay(oSettings, false);\n                    return;\n                }\n\n                var i, iLen, n;\n                var anRows = [];\n                var iRowCount = 0;\n                var iStripes = oSettings.asStripeClasses.length;\n                var iOpenRows = oSettings.aoOpenRows.length;\n\n                oSettings.bDrawing = true;\n\n                /* Check and see if we have an initial draw position from state saving */\n                if (oSettings.iInitDisplayStart !== undefined && oSettings.iInitDisplayStart != -1) {\n                    if (oSettings.oFeatures.bServerSide) {\n                        oSettings._iDisplayStart = oSettings.iInitDisplayStart;\n                    } else {\n                        oSettings._iDisplayStart = (oSettings.iInitDisplayStart >= oSettings.fnRecordsDisplay()) ?\n                            0 : oSettings.iInitDisplayStart;\n                    }\n                    oSettings.iInitDisplayStart = -1;\n                    _fnCalculateEnd(oSettings);\n                }\n\n                /* Server-side processing draw intercept */\n                if (oSettings.bDeferLoading) {\n                    oSettings.bDeferLoading = false;\n                    oSettings.iDraw++;\n                } else if (!oSettings.oFeatures.bServerSide) {\n                    oSettings.iDraw++;\n                } else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {\n                    return;\n                }\n\n                if (oSettings.aiDisplay.length !== 0) {\n                    var iStart = oSettings._iDisplayStart;\n                    var iEnd = oSettings._iDisplayEnd;\n\n                    if (oSettings.oFeatures.bServerSide) {\n                        iStart = 0;\n                        iEnd = oSettings.aoData.length;\n                    }\n\n                    for (var j = iStart; j < iEnd; j++) {\n                        var aoData = oSettings.aoData[oSettings.aiDisplay[j]];\n                        if (aoData.nTr === null) {\n                            _fnCreateTr(oSettings, oSettings.aiDisplay[j]);\n                        }\n\n                        var nRow = aoData.nTr;\n\n                        /* Remove the old striping classes and then add the new one */\n                        if (iStripes !== 0) {\n                            var sStripe = oSettings.asStripeClasses[iRowCount % iStripes];\n                            if (aoData._sRowStripe != sStripe) {\n                                $(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);\n                                aoData._sRowStripe = sStripe;\n                            }\n                        }\n\n                        /* Row callback functions - might want to manipulate the row */\n                        _fnCallbackFire(oSettings, 'aoRowCallback', null,\n                            [nRow, oSettings.aoData[oSettings.aiDisplay[j]]._aData, iRowCount, j]);\n\n                        anRows.push(nRow);\n                        iRowCount++;\n\n                        /* If there is an open row - and it is attached to this parent - attach it on redraw */\n                        if (iOpenRows !== 0) {\n                            for (var k = 0; k < iOpenRows; k++) {\n                                if (nRow == oSettings.aoOpenRows[k].nParent) {\n                                    anRows.push(oSettings.aoOpenRows[k].nTr);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    /* Table is empty - create a row with an empty message in it */\n                    anRows[0] = document.createElement('tr');\n\n                    if (oSettings.asStripeClasses[0]) {\n                        anRows[0].className = oSettings.asStripeClasses[0];\n                    }\n\n                    var oLang = oSettings.oLanguage;\n                    var sZero = oLang.sZeroRecords;\n                    if (oSettings.iDraw == 1 && oSettings.sAjaxSource !== null && !oSettings.oFeatures.bServerSide) {\n                        sZero = oLang.sLoadingRecords;\n                    } else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {\n                        sZero = oLang.sEmptyTable;\n                    }\n\n                    var nTd = document.createElement('td');\n                    nTd.setAttribute('valign', \"top\");\n                    nTd.colSpan = _fnVisbleColumns(oSettings);\n                    nTd.className = oSettings.oClasses.sRowEmpty;\n                    nTd.innerHTML = _fnInfoMacros(oSettings, sZero);\n\n                    anRows[iRowCount].appendChild(nTd);\n                }\n\n                /* Header and footer callbacks */\n                _fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0],\n                    _fnGetDataMaster(oSettings), oSettings._iDisplayStart, oSettings.fnDisplayEnd(), oSettings.aiDisplay]);\n\n                _fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0],\n                    _fnGetDataMaster(oSettings), oSettings._iDisplayStart, oSettings.fnDisplayEnd(), oSettings.aiDisplay]);\n\n                /*\n\t\t\t * Need to remove any old row from the display - note we can't just empty the tbody using\n\t\t\t * $().html('') since this will unbind the jQuery event handlers (even although the node\n\t\t\t * still exists!) - equally we can't use innerHTML, since IE throws an exception.\n\t\t\t */\n                var\n                    nAddFrag = document.createDocumentFragment(),\n                    nRemoveFrag = document.createDocumentFragment(),\n                    nBodyPar, nTrs;\n\n                if (oSettings.nTBody) {\n                    nBodyPar = oSettings.nTBody.parentNode;\n                    nRemoveFrag.appendChild(oSettings.nTBody);\n\n                    /* When doing infinite scrolling, only remove child rows when sorting, filtering or start\n\t\t\t\t * up. When not infinite scroll, always do it.\n\t\t\t\t */\n                    if (!oSettings.oScroll.bInfinite || !oSettings._bInitComplete ||\n                        oSettings.bSorted || oSettings.bFiltered) {\n                        while ((n = oSettings.nTBody.firstChild)) {\n                            oSettings.nTBody.removeChild(n);\n                        }\n                    }\n\n                    /* Put the draw table into the dom */\n                    for (i = 0, iLen = anRows.length; i < iLen; i++) {\n                        nAddFrag.appendChild(anRows[i]);\n                    }\n\n                    oSettings.nTBody.appendChild(nAddFrag);\n                    if (nBodyPar !== null) {\n                        nBodyPar.appendChild(oSettings.nTBody);\n                    }\n                }\n\n                /* Call all required callback functions for the end of a draw */\n                _fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);\n\n                /* Draw is complete, sorting and filtering must be as well */\n                oSettings.bSorted = false;\n                oSettings.bFiltered = false;\n                oSettings.bDrawing = false;\n\n                if (oSettings.oFeatures.bServerSide) {\n                    _fnProcessingDisplay(oSettings, false);\n                    if (!oSettings._bInitComplete) {\n                        _fnInitComplete(oSettings);\n                    }\n                }\n            }\n\n\n            /**\n             * Redraw the table - taking account of the various features which are enabled\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnReDraw(oSettings) {\n                if (oSettings.oFeatures.bSort) {\n                    /* Sorting will refilter and draw for us */\n                    _fnSort(oSettings, oSettings.oPreviousSearch);\n                } else if (oSettings.oFeatures.bFilter) {\n                    /* Filtering will redraw for us */\n                    _fnFilterComplete(oSettings, oSettings.oPreviousSearch);\n                } else {\n                    _fnCalculateEnd(oSettings);\n                    _fnDraw(oSettings);\n                }\n            }\n\n\n            /**\n             * Add the options to the page HTML for the table\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnAddOptionsHtml(oSettings) {\n                /*\n\t\t\t * Create a temporary, empty, div which we can later on replace with what we have generated\n\t\t\t * we do it this way to rendering the 'options' html offline - speed :-)\n\t\t\t */\n                var nHolding = $('<div></div>')[0];\n                oSettings.nTable.parentNode.insertBefore(nHolding, oSettings.nTable);\n\n                /*\n\t\t\t * All DataTables are wrapped in a div\n\t\t\t */\n                oSettings.nTableWrapper = $('<div id=\"' + oSettings.sTableId + '_wrapper\" class=\"' + oSettings.oClasses.sWrapper + '\" role=\"grid\"></div>')[0];\n                oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n\n                /* Track where we want to insert the option */\n                var nInsertNode = oSettings.nTableWrapper;\n\n                /* Loop over the user set positioning and place the elements as needed */\n                var aDom = oSettings.sDom.split('');\n                var nTmp, iPushFeature, cOption, nNewNode, cNext, sAttr, j;\n                for (var i = 0; i < aDom.length; i++) {\n                    iPushFeature = 0;\n                    cOption = aDom[i];\n\n                    if (cOption == '<') {\n                        /* New container div */\n                        nNewNode = $('<div></div>')[0];\n\n                        /* Check to see if we should append an id and/or a class name to the container */\n                        cNext = aDom[i + 1];\n                        if (cNext == \"'\" || cNext == '\"') {\n                            sAttr = \"\";\n                            j = 2;\n                            while (aDom[i + j] != cNext) {\n                                sAttr += aDom[i + j];\n                                j++;\n                            }\n\n                            /* Replace jQuery UI constants */\n                            if (sAttr == \"H\") {\n                                sAttr = oSettings.oClasses.sJUIHeader;\n                            } else if (sAttr == \"F\") {\n                                sAttr = oSettings.oClasses.sJUIFooter;\n                            }\n\n                            /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n\t\t\t\t\t\t * breaks the string into parts and applies them as needed\n\t\t\t\t\t\t */\n                            if (sAttr.indexOf('.') != -1) {\n                                var aSplit = sAttr.split('.');\n                                nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);\n                                nNewNode.className = aSplit[1];\n                            } else if (sAttr.charAt(0) == \"#\") {\n                                nNewNode.id = sAttr.substr(1, sAttr.length - 1);\n                            } else {\n                                nNewNode.className = sAttr;\n                            }\n\n                            i += j; /* Move along the position array */\n                        }\n\n                        nInsertNode.appendChild(nNewNode);\n                        nInsertNode = nNewNode;\n                    } else if (cOption == '>') {\n                        /* End container div */\n                        nInsertNode = nInsertNode.parentNode;\n                    } else if (cOption == 'l' && oSettings.oFeatures.bPaginate && oSettings.oFeatures.bLengthChange) {\n                        /* Length */\n                        nTmp = _fnFeatureHtmlLength(oSettings);\n                        iPushFeature = 1;\n                    } else if (cOption == 'f' && oSettings.oFeatures.bFilter) {\n                        /* Filter */\n                        nTmp = _fnFeatureHtmlFilter(oSettings);\n                        iPushFeature = 1;\n                    } else if (cOption == 'r' && oSettings.oFeatures.bProcessing) {\n                        /* pRocessing */\n                        nTmp = _fnFeatureHtmlProcessing(oSettings);\n                        iPushFeature = 1;\n                    } else if (cOption == 't') {\n                        /* Table */\n                        nTmp = _fnFeatureHtmlTable(oSettings);\n                        iPushFeature = 1;\n                    } else if (cOption == 'i' && oSettings.oFeatures.bInfo) {\n                        /* Info */\n                        nTmp = _fnFeatureHtmlInfo(oSettings);\n                        iPushFeature = 1;\n                    } else if (cOption == 'p' && oSettings.oFeatures.bPaginate) {\n                        /* Pagination */\n                        nTmp = _fnFeatureHtmlPaginate(oSettings);\n                        iPushFeature = 1;\n                    } else if (DataTable.ext.aoFeatures.length !== 0) {\n                        /* Plug-in features */\n                        var aoFeatures = DataTable.ext.aoFeatures;\n                        for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {\n                            if (cOption == aoFeatures[k].cFeature) {\n                                nTmp = aoFeatures[k].fnInit(oSettings);\n                                if (nTmp) {\n                                    iPushFeature = 1;\n                                }\n                                break;\n                            }\n                        }\n                    }\n\n                    /* Add to the 2D features array */\n                    if (iPushFeature == 1 && nTmp !== null) {\n                        if (typeof oSettings.aanFeatures[cOption] !== 'object') {\n                            oSettings.aanFeatures[cOption] = [];\n                        }\n                        oSettings.aanFeatures[cOption].push(nTmp);\n                        nInsertNode.appendChild(nTmp);\n                    }\n                }\n\n                /* Built our DOM structure - replace the holding div with what we want */\n                nHolding.parentNode.replaceChild(oSettings.nTableWrapper, nHolding);\n            }\n\n\n            /**\n             * Use the DOM source to create up an array of header cells. The idea here is to\n             * create a layout grid (array) of rows x columns, which contains a reference\n             * to the cell that that point in the grid (regardless of col/rowspan), such that\n             * any column / row could be removed and the new grid constructed\n             *  @param array {object} aLayout Array to store the calculated layout in\n             *  @param {node} nThead The header/footer element for the table\n             *  @memberof DataTable#oApi\n             */\n            function _fnDetectHeader(aLayout, nThead) {\n                var nTrs = $(nThead).children('tr');\n                var nTr, nCell;\n                var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\n                var bUnique;\n                var fnShiftCol = function(a, i, j) {\n                    var k = a[i];\n                    while (k[j]) {\n                        j++;\n                    }\n                    return j;\n                };\n\n                aLayout.splice(0, aLayout.length);\n\n                /* We know how many rows there are in the layout - so prep it */\n                for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n                    aLayout.push([]);\n                }\n\n                /* Calculate a layout array */\n                for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n                    nTr = nTrs[i];\n                    iColumn = 0;\n\n                    /* For every cell in the row... */\n                    nCell = nTr.firstChild;\n                    while (nCell) {\n                        if (nCell.nodeName.toUpperCase() == \"TD\" ||\n                            nCell.nodeName.toUpperCase() == \"TH\") {\n                            /* Get the col and rowspan attributes from the DOM and sanitise them */\n                            iColspan = nCell.getAttribute('colspan') * 1;\n                            iRowspan = nCell.getAttribute('rowspan') * 1;\n                            iColspan = (!iColspan || iColspan === 0 || iColspan === 1) ? 1 : iColspan;\n                            iRowspan = (!iRowspan || iRowspan === 0 || iRowspan === 1) ? 1 : iRowspan;\n\n                            /* There might be colspan cells already in this row, so shift our target\n\t\t\t\t\t\t * accordingly\n\t\t\t\t\t\t */\n                            iColShifted = fnShiftCol(aLayout, i, iColumn);\n\n                            /* Cache calculation for unique columns */\n                            bUnique = iColspan === 1 ? true : false;\n\n                            /* If there is col / rowspan, copy the information into the layout grid */\n                            for (l = 0; l < iColspan; l++) {\n                                for (k = 0; k < iRowspan; k++) {\n                                    aLayout[i + k][iColShifted + l] = {\n                                        \"cell\": nCell,\n                                        \"unique\": bUnique\n                                    };\n                                    aLayout[i + k].nTr = nTr;\n                                }\n                            }\n                        }\n                        nCell = nCell.nextSibling;\n                    }\n                }\n            }\n\n\n            /**\n             * Get an array of unique th elements, one for each column\n             *  @param {object} oSettings dataTables settings object\n             *  @param {node} nHeader automatically detect the layout from this node - optional\n             *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n             *  @returns array {node} aReturn list of unique th's\n             *  @memberof DataTable#oApi\n             */\n            function _fnGetUniqueThs(oSettings, nHeader, aLayout) {\n                var aReturn = [];\n                if (!aLayout) {\n                    aLayout = oSettings.aoHeader;\n                    if (nHeader) {\n                        aLayout = [];\n                        _fnDetectHeader(aLayout, nHeader);\n                    }\n                }\n\n                for (var i = 0, iLen = aLayout.length; i < iLen; i++) {\n                    for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {\n                        if (aLayout[i][j].unique &&\n                            (!aReturn[j] || !oSettings.bSortCellsTop)) {\n                            aReturn[j] = aLayout[i][j].cell;\n                        }\n                    }\n                }\n\n                return aReturn;\n            }\n\n\n            /**\n             * Update the table using an Ajax call\n             *  @param {object} oSettings dataTables settings object\n             *  @returns {boolean} Block the table drawing or not\n             *  @memberof DataTable#oApi\n             */\n            function _fnAjaxUpdate(oSettings) {\n                if (oSettings.bAjaxDataGet) {\n                    oSettings.iDraw++;\n                    _fnProcessingDisplay(oSettings, true);\n                    var iColumns = oSettings.aoColumns.length;\n                    var aoData = _fnAjaxParameters(oSettings);\n                    _fnServerParams(oSettings, aoData);\n\n                    oSettings.fnServerData.call(oSettings.oInstance, oSettings.sAjaxSource, aoData,\n                        function(json) {\n                            _fnAjaxUpdateDraw(oSettings, json);\n                        }, oSettings);\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n\n\n            /**\n             * Build up the parameters in an object needed for a server-side processing request\n             *  @param {object} oSettings dataTables settings object\n             *  @returns {bool} block the table drawing or not\n             *  @memberof DataTable#oApi\n             */\n            function _fnAjaxParameters(oSettings) {\n                var iColumns = oSettings.aoColumns.length;\n                var aoData = [], mDataProp, aaSort, aDataSort;\n                var i, j;\n\n                aoData.push({\"name\": \"sEcho\", \"value\": oSettings.iDraw});\n                aoData.push({\"name\": \"iColumns\", \"value\": iColumns});\n                aoData.push({\"name\": \"sColumns\", \"value\": _fnColumnOrdering(oSettings)});\n                aoData.push({\"name\": \"iDisplayStart\", \"value\": oSettings._iDisplayStart});\n                aoData.push({\n                    \"name\": \"iDisplayLength\", \"value\": oSettings.oFeatures.bPaginate !== false ?\n                        oSettings._iDisplayLength : -1\n                });\n\n                for (i = 0; i < iColumns; i++) {\n                    mDataProp = oSettings.aoColumns[i].mData;\n                    aoData.push({\"name\": \"mDataProp_\" + i, \"value\": typeof (mDataProp) === \"function\" ? 'function' : mDataProp});\n                }\n\n                /* Filtering */\n                if (oSettings.oFeatures.bFilter !== false) {\n                    aoData.push({\"name\": \"sSearch\", \"value\": oSettings.oPreviousSearch.sSearch});\n                    aoData.push({\"name\": \"bRegex\", \"value\": oSettings.oPreviousSearch.bRegex});\n                    for (i = 0; i < iColumns; i++) {\n                        aoData.push({\"name\": \"sSearch_\" + i, \"value\": oSettings.aoPreSearchCols[i].sSearch});\n                        aoData.push({\"name\": \"bRegex_\" + i, \"value\": oSettings.aoPreSearchCols[i].bRegex});\n                        aoData.push({\"name\": \"bSearchable_\" + i, \"value\": oSettings.aoColumns[i].bSearchable});\n                    }\n                }\n\n                /* Sorting */\n                if (oSettings.oFeatures.bSort !== false) {\n                    var iCounter = 0;\n\n                    aaSort = (oSettings.aaSortingFixed !== null) ?\n                        oSettings.aaSortingFixed.concat(oSettings.aaSorting) :\n                        oSettings.aaSorting.slice();\n\n                    for (i = 0; i < aaSort.length; i++) {\n                        aDataSort = oSettings.aoColumns[aaSort[i][0]].aDataSort;\n\n                        for (j = 0; j < aDataSort.length; j++) {\n                            aoData.push({\"name\": \"iSortCol_\" + iCounter, \"value\": aDataSort[j]});\n                            aoData.push({\"name\": \"sSortDir_\" + iCounter, \"value\": aaSort[i][1]});\n                            iCounter++;\n                        }\n                    }\n                    aoData.push({\"name\": \"iSortingCols\", \"value\": iCounter});\n\n                    for (i = 0; i < iColumns; i++) {\n                        aoData.push({\"name\": \"bSortable_\" + i, \"value\": oSettings.aoColumns[i].bSortable});\n                    }\n                }\n\n                return aoData;\n            }\n\n\n            /**\n             * Add Ajax parameters from plug-ins\n             *  @param {object} oSettings dataTables settings object\n             *  @param array {objects} aoData name/value pairs to send to the server\n             *  @memberof DataTable#oApi\n             */\n            function _fnServerParams(oSettings, aoData) {\n                _fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [aoData]);\n            }\n\n\n            /**\n             * Data the data from the server (nuking the old) and redraw the table\n             *  @param {object} oSettings dataTables settings object\n             *  @param {object} json json data return from the server.\n             *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n             *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n             *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n             *  @param {array} json.aaData The data to display on this page\n             *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n             *  @memberof DataTable#oApi\n             */\n            function _fnAjaxUpdateDraw(oSettings, json) {\n                if (json.sEcho !== undefined) {\n                    /* Protect against old returns over-writing a new one. Possible when you get\n\t\t\t\t * very fast interaction, and later queries are completed much faster\n\t\t\t\t */\n                    if (json.sEcho * 1 < oSettings.iDraw) {\n                        return;\n                    } else {\n                        oSettings.iDraw = json.sEcho * 1;\n                    }\n                }\n\n                if (!oSettings.oScroll.bInfinite ||\n                    (oSettings.oScroll.bInfinite && (oSettings.bSorted || oSettings.bFiltered))) {\n                    _fnClearTable(oSettings);\n                }\n                oSettings._iRecordsTotal = parseInt(json.iTotalRecords, 10);\n                oSettings._iRecordsDisplay = parseInt(json.iTotalDisplayRecords, 10);\n\n                /* Determine if reordering is required */\n                var sOrdering = _fnColumnOrdering(oSettings);\n                var bReOrder = (json.sColumns !== undefined && sOrdering !== \"\" && json.sColumns != sOrdering);\n                var aiIndex;\n                if (bReOrder) {\n                    aiIndex = _fnReOrderIndex(oSettings, json.sColumns);\n                }\n\n                var aData = _fnGetObjectDataFn(oSettings.sAjaxDataProp)(json);\n                for (var i = 0, iLen = aData.length; i < iLen; i++) {\n                    if (bReOrder) {\n                        /* If we need to re-order, then create a new array with the correct order and add it */\n                        var aDataSorted = [];\n                        for (var j = 0, jLen = oSettings.aoColumns.length; j < jLen; j++) {\n                            aDataSorted.push(aData[i][aiIndex[j]]);\n                        }\n                        _fnAddData(oSettings, aDataSorted);\n                    } else {\n                        /* No re-order required, sever got it \"right\" - just straight add */\n                        _fnAddData(oSettings, aData[i]);\n                    }\n                }\n                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n\n                oSettings.bAjaxDataGet = false;\n                _fnDraw(oSettings);\n                oSettings.bAjaxDataGet = true;\n                _fnProcessingDisplay(oSettings, false);\n            }\n\n\n            /**\n             * Generate the node required for filtering text\n             *  @returns {node} Filter control element\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnFeatureHtmlFilter(oSettings) {\n                var oPreviousSearch = oSettings.oPreviousSearch;\n\n                var sSearchStr = oSettings.oLanguage.sSearch;\n                sSearchStr = (sSearchStr.indexOf('_INPUT_') !== -1) ?\n                    sSearchStr.replace('_INPUT_', '<input type=\"text\" />') :\n                    sSearchStr === \"\" ? '<input type=\"text\" />' : sSearchStr + ' <input type=\"text\" />';\n\n                var nFilter = document.createElement('div');\n                nFilter.className = oSettings.oClasses.sFilter;\n                nFilter.innerHTML = '<label>' + sSearchStr + '</label>';\n                if (!oSettings.aanFeatures.f) {\n                    nFilter.id = oSettings.sTableId + '_filter';\n                }\n\n                var jqFilter = $('input[type=\"text\"]', nFilter);\n\n                // Store a reference to the input element, so other input elements could be\n                // added to the filter wrapper if needed (submit button for example)\n                nFilter._DT_Input = jqFilter[0];\n\n                jqFilter.val(oPreviousSearch.sSearch.replace('\"', '&quot;'));\n                jqFilter.bind('keyup.DT', function(e) {\n                    /* Update all other filter input elements for the new display */\n                    var n = oSettings.aanFeatures.f;\n                    var val = this.value === \"\" ? \"\" : this.value; // mental IE8 fix :-(\n\n                    for (var i = 0, iLen = n.length; i < iLen; i++) {\n                        if (n[i] != $(this).parents('div.dataTables_filter')[0]) {\n                            $(n[i]._DT_Input).val(val);\n                        }\n                    }\n\n                    /* Now do the filter */\n                    if (val != oPreviousSearch.sSearch) {\n                        _fnFilterComplete(oSettings, {\n                            \"sSearch\": val,\n                            \"bRegex\": oPreviousSearch.bRegex,\n                            \"bSmart\": oPreviousSearch.bSmart,\n                            \"bCaseInsensitive\": oPreviousSearch.bCaseInsensitive\n                        });\n                    }\n                });\n\n                jqFilter\n                    .attr('aria-controls', oSettings.sTableId)\n                    .bind('keypress.DT', function(e) {\n                            /* Prevent form submission */\n                            if (e.keyCode == 13) {\n                                return false;\n                            }\n                        }\n                    );\n\n                return nFilter;\n            }\n\n\n            /**\n             * Filter the table using both the global filter and column based filtering\n             *  @param {object} oSettings dataTables settings object\n             *  @param {object} oSearch search information\n             *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n             *  @memberof DataTable#oApi\n             */\n            function _fnFilterComplete(oSettings, oInput, iForce) {\n                var oPrevSearch = oSettings.oPreviousSearch;\n                var aoPrevSearch = oSettings.aoPreSearchCols;\n                var fnSaveFilter = function(oFilter) {\n                    /* Save the filtering values */\n                    oPrevSearch.sSearch = oFilter.sSearch;\n                    oPrevSearch.bRegex = oFilter.bRegex;\n                    oPrevSearch.bSmart = oFilter.bSmart;\n                    oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n                };\n\n                /* In server-side processing all filtering is done by the server, so no point hanging around here */\n                if (!oSettings.oFeatures.bServerSide) {\n                    /* Global filter */\n                    _fnFilter(oSettings, oInput.sSearch, iForce, oInput.bRegex, oInput.bSmart, oInput.bCaseInsensitive);\n                    fnSaveFilter(oInput);\n\n                    /* Now do the individual column filter */\n                    for (var i = 0; i < oSettings.aoPreSearchCols.length; i++) {\n                        _fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, aoPrevSearch[i].bRegex,\n                            aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);\n                    }\n\n                    /* Custom filtering */\n                    _fnFilterCustom(oSettings);\n                } else {\n                    fnSaveFilter(oInput);\n                }\n\n                /* Tell the draw function we have been filtering */\n                oSettings.bFiltered = true;\n                $(oSettings.oInstance).trigger('filter', oSettings);\n\n                /* Redraw the table */\n                oSettings._iDisplayStart = 0;\n                _fnCalculateEnd(oSettings);\n                _fnDraw(oSettings);\n\n                /* Rebuild search array 'offline' */\n                _fnBuildSearchArray(oSettings, 0);\n            }\n\n\n            /**\n             * Apply custom filtering functions\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnFilterCustom(oSettings) {\n                var afnFilters = DataTable.ext.afnFiltering;\n                var aiFilterColumns = _fnGetColumns(oSettings, 'bSearchable');\n\n                for (var i = 0, iLen = afnFilters.length; i < iLen; i++) {\n                    var iCorrector = 0;\n                    for (var j = 0, jLen = oSettings.aiDisplay.length; j < jLen; j++) {\n                        var iDisIndex = oSettings.aiDisplay[j - iCorrector];\n                        var bTest = afnFilters[i](\n                            oSettings,\n                            _fnGetRowData(oSettings, iDisIndex, 'filter', aiFilterColumns),\n                            iDisIndex\n                        );\n\n                        /* Check if we should use this row based on the filtering function */\n                        if (!bTest) {\n                            oSettings.aiDisplay.splice(j - iCorrector, 1);\n                            iCorrector++;\n                        }\n                    }\n                }\n            }\n\n\n            /**\n             * Filter the table on a per-column basis\n             *  @param {object} oSettings dataTables settings object\n             *  @param {string} sInput string to filter on\n             *  @param {int} iColumn column to filter\n             *  @param {bool} bRegex treat search string as a regular expression or not\n             *  @param {bool} bSmart use smart filtering or not\n             *  @param {bool} bCaseInsensitive Do case insenstive matching or not\n             *  @memberof DataTable#oApi\n             */\n            function _fnFilterColumn(oSettings, sInput, iColumn, bRegex, bSmart, bCaseInsensitive) {\n                if (sInput === \"\") {\n                    return;\n                }\n\n                var iIndexCorrector = 0;\n                var rpSearch = _fnFilterCreateSearch(sInput, bRegex, bSmart, bCaseInsensitive);\n\n                for (var i = oSettings.aiDisplay.length - 1; i >= 0; i--) {\n                    var sData = _fnDataToSearch(_fnGetCellData(oSettings, oSettings.aiDisplay[i], iColumn, 'filter'),\n                        oSettings.aoColumns[iColumn].sType);\n                    if (!rpSearch.test(sData)) {\n                        oSettings.aiDisplay.splice(i, 1);\n                        iIndexCorrector++;\n                    }\n                }\n            }\n\n\n            /**\n             * Filter the data table based on user input and draw the table\n             *  @param {object} oSettings dataTables settings object\n             *  @param {string} sInput string to filter on\n             *  @param {int} iForce optional - force a research of the master array (1) or not (undefined or 0)\n             *  @param {bool} bRegex treat as a regular expression or not\n             *  @param {bool} bSmart perform smart filtering or not\n             *  @param {bool} bCaseInsensitive Do case insenstive matching or not\n             *  @memberof DataTable#oApi\n             */\n            function _fnFilter(oSettings, sInput, iForce, bRegex, bSmart, bCaseInsensitive) {\n                var i;\n                var rpSearch = _fnFilterCreateSearch(sInput, bRegex, bSmart, bCaseInsensitive);\n                var oPrevSearch = oSettings.oPreviousSearch;\n\n                /* Check if we are forcing or not - optional parameter */\n                if (!iForce) {\n                    iForce = 0;\n                }\n\n                /* Need to take account of custom filtering functions - always filter */\n                if (DataTable.ext.afnFiltering.length !== 0) {\n                    iForce = 1;\n                }\n\n                /*\n\t\t\t * If the input is blank - we want the full data set\n\t\t\t */\n                if (sInput.length <= 0) {\n                    oSettings.aiDisplay.splice(0, oSettings.aiDisplay.length);\n                    oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n                } else {\n                    /*\n\t\t\t\t * We are starting a new search or the new search string is smaller\n\t\t\t\t * then the old one (i.e. delete). Search from the master array\n\t\t\t \t */\n                    if (oSettings.aiDisplay.length == oSettings.aiDisplayMaster.length ||\n                        oPrevSearch.sSearch.length > sInput.length || iForce == 1 ||\n                        sInput.indexOf(oPrevSearch.sSearch) !== 0) {\n                        /* Nuke the old display array - we are going to rebuild it */\n                        oSettings.aiDisplay.splice(0, oSettings.aiDisplay.length);\n\n                        /* Force a rebuild of the search array */\n                        _fnBuildSearchArray(oSettings, 1);\n\n                        /* Search through all records to populate the search array\n\t\t\t\t\t * The the oSettings.aiDisplayMaster and asDataSearch arrays have 1 to 1\n\t\t\t\t\t * mapping\n\t\t\t\t\t */\n                        for (i = 0; i < oSettings.aiDisplayMaster.length; i++) {\n                            if (rpSearch.test(oSettings.asDataSearch[i])) {\n                                oSettings.aiDisplay.push(oSettings.aiDisplayMaster[i]);\n                            }\n                        }\n                    } else {\n                        /* Using old search array - refine it - do it this way for speed\n\t\t\t  \t * Don't have to search the whole master array again\n\t\t\t\t\t */\n                        var iIndexCorrector = 0;\n\n                        /* Search the current results */\n                        for (i = 0; i < oSettings.asDataSearch.length; i++) {\n                            if (!rpSearch.test(oSettings.asDataSearch[i])) {\n                                oSettings.aiDisplay.splice(i - iIndexCorrector, 1);\n                                iIndexCorrector++;\n                            }\n                        }\n                    }\n                }\n            }\n\n\n            /**\n             * Create an array which can be quickly search through\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} iMaster use the master data array - optional\n             *  @memberof DataTable#oApi\n             */\n            function _fnBuildSearchArray(oSettings, iMaster) {\n                if (!oSettings.oFeatures.bServerSide) {\n                    /* Clear out the old data */\n                    oSettings.asDataSearch = [];\n\n                    var aiFilterColumns = _fnGetColumns(oSettings, 'bSearchable');\n                    var aiIndex = (iMaster === 1) ?\n                        oSettings.aiDisplayMaster :\n                        oSettings.aiDisplay;\n\n                    for (var i = 0, iLen = aiIndex.length; i < iLen; i++) {\n                        oSettings.asDataSearch[i] = _fnBuildSearchRow(\n                            oSettings,\n                            _fnGetRowData(oSettings, aiIndex[i], 'filter', aiFilterColumns)\n                        );\n                    }\n                }\n            }\n\n\n            /**\n             * Create a searchable string from a single data row\n             *  @param {object} oSettings dataTables settings object\n             *  @param {array} aData Row data array to use for the data to search\n             *  @memberof DataTable#oApi\n             */\n            function _fnBuildSearchRow(oSettings, aData) {\n                var sSearch = aData.join('  ');\n\n                /* If it looks like there is an HTML entity in the string, attempt to decode it */\n                if (sSearch.indexOf('&') !== -1) {\n                    sSearch = $('<div>').html(sSearch).text();\n                }\n\n                // Strip newline characters\n                return sSearch.replace(/[\\n\\r]/g, \" \");\n            }\n\n            /**\n             * Build a regular expression object suitable for searching a table\n             *  @param {string} sSearch string to search for\n             *  @param {bool} bRegex treat as a regular expression or not\n             *  @param {bool} bSmart perform smart filtering or not\n             *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n             *  @returns {RegExp} constructed object\n             *  @memberof DataTable#oApi\n             */\n            function _fnFilterCreateSearch(sSearch, bRegex, bSmart, bCaseInsensitive) {\n                var asSearch, sRegExpString;\n\n                if (bSmart) {\n                    /* Generate the regular expression to use. Something along the lines of:\n\t\t\t\t * ^(?=.*?\\bone\\b)(?=.*?\\btwo\\b)(?=.*?\\bthree\\b).*$\n\t\t\t\t */\n                    asSearch = bRegex ? sSearch.split(' ') : _fnEscapeRegex(sSearch).split(' ');\n                    sRegExpString = '^(?=.*?' + asSearch.join(')(?=.*?') + ').*$';\n                    return new RegExp(sRegExpString, bCaseInsensitive ? \"i\" : \"\");\n                } else {\n                    sSearch = bRegex ? sSearch : _fnEscapeRegex(sSearch);\n                    return new RegExp(sSearch, bCaseInsensitive ? \"i\" : \"\");\n                }\n            }\n\n\n            /**\n             * Convert raw data into something that the user can search on\n             *  @param {string} sData data to be modified\n             *  @param {string} sType data type\n             *  @returns {string} search string\n             *  @memberof DataTable#oApi\n             */\n            function _fnDataToSearch(sData, sType) {\n                if (typeof DataTable.ext.ofnSearch[sType] === \"function\") {\n                    return DataTable.ext.ofnSearch[sType](sData);\n                } else if (sData === null) {\n                    return '';\n                } else if (sType == \"html\") {\n                    return sData.replace(/[\\r\\n]/g, \" \").replace(/<.*?>/g, \"\");\n                } else if (typeof sData === \"string\") {\n                    return sData.replace(/[\\r\\n]/g, \" \");\n                }\n                return sData;\n            }\n\n\n            /**\n             * scape a string such that it can be used in a regular expression\n             *  @param {string} sVal string to escape\n             *  @returns {string} escaped string\n             *  @memberof DataTable#oApi\n             */\n            function _fnEscapeRegex(sVal) {\n                var acEscape = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-'];\n                var reReplace = new RegExp('(\\\\' + acEscape.join('|\\\\') + ')', 'g');\n                return sVal.replace(reReplace, '\\\\$1');\n            }\n\n\n            /**\n             * Generate the node required for the info display\n             *  @param {object} oSettings dataTables settings object\n             *  @returns {node} Information element\n             *  @memberof DataTable#oApi\n             */\n            function _fnFeatureHtmlInfo(oSettings) {\n                var nInfo = document.createElement('div');\n                nInfo.className = oSettings.oClasses.sInfo;\n\n                /* Actions that are to be taken once only for this feature */\n                if (!oSettings.aanFeatures.i) {\n                    /* Add draw callback */\n                    oSettings.aoDrawCallback.push({\n                        \"fn\": _fnUpdateInfo,\n                        \"sName\": \"information\"\n                    });\n\n                    /* Add id */\n                    nInfo.id = oSettings.sTableId + '_info';\n                }\n                oSettings.nTable.setAttribute('aria-describedby', oSettings.sTableId + '_info');\n\n                return nInfo;\n            }\n\n\n            /**\n             * Update the information elements in the display\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnUpdateInfo(oSettings) {\n                /* Show information about the table */\n                if (!oSettings.oFeatures.bInfo || oSettings.aanFeatures.i.length === 0) {\n                    return;\n                }\n\n                var\n                    oLang = oSettings.oLanguage,\n                    iStart = oSettings._iDisplayStart + 1,\n                    iEnd = oSettings.fnDisplayEnd(),\n                    iMax = oSettings.fnRecordsTotal(),\n                    iTotal = oSettings.fnRecordsDisplay(),\n                    sOut;\n\n                if (iTotal === 0) {\n                    /* Empty record set */\n                    sOut = oLang.sInfoEmpty;\n                } else {\n                    /* Normal record set */\n                    sOut = oLang.sInfo;\n                }\n\n                if (iTotal != iMax) {\n                    /* Record set after filtering */\n                    sOut += ' ' + oLang.sInfoFiltered;\n                }\n\n                // Convert the macros\n                sOut += oLang.sInfoPostFix;\n                sOut = _fnInfoMacros(oSettings, sOut);\n\n                if (oLang.fnInfoCallback !== null) {\n                    sOut = oLang.fnInfoCallback.call(oSettings.oInstance,\n                        oSettings, iStart, iEnd, iMax, iTotal, sOut);\n                }\n\n                var n = oSettings.aanFeatures.i;\n                for (var i = 0, iLen = n.length; i < iLen; i++) {\n                    $(n[i]).html(sOut);\n                }\n            }\n\n\n            function _fnInfoMacros(oSettings, str) {\n                var\n                    iStart = oSettings._iDisplayStart + 1,\n                    sStart = oSettings.fnFormatNumber(iStart),\n                    iEnd = oSettings.fnDisplayEnd(),\n                    sEnd = oSettings.fnFormatNumber(iEnd),\n                    iTotal = oSettings.fnRecordsDisplay(),\n                    sTotal = oSettings.fnFormatNumber(iTotal),\n                    iMax = oSettings.fnRecordsTotal(),\n                    sMax = oSettings.fnFormatNumber(iMax);\n\n                // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n                // internally\n                if (oSettings.oScroll.bInfinite) {\n                    sStart = oSettings.fnFormatNumber(1);\n                }\n\n                return str.replace(/_START_/g, sStart).replace(/_END_/g, sEnd).replace(/_TOTAL_/g, sTotal).replace(/_MAX_/g, sMax);\n            }\n\n\n            /**\n             * Draw the table for the first time, adding all required features\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnInitialise(oSettings) {\n                var i, iLen, iAjaxStart = oSettings.iInitDisplayStart;\n\n                /* Ensure that the table data is fully initialised */\n                if (oSettings.bInitialised === false) {\n                    setTimeout(function() {\n                        _fnInitialise(oSettings);\n                    }, 200);\n                    return;\n                }\n\n                /* Show the display HTML options */\n                _fnAddOptionsHtml(oSettings);\n\n                /* Build and draw the header / footer for the table */\n                _fnBuildHead(oSettings);\n                _fnDrawHead(oSettings, oSettings.aoHeader);\n                if (oSettings.nTFoot) {\n                    _fnDrawHead(oSettings, oSettings.aoFooter);\n                }\n\n                /* Okay to show that something is going on now */\n                _fnProcessingDisplay(oSettings, true);\n\n                /* Calculate sizes for columns */\n                if (oSettings.oFeatures.bAutoWidth) {\n                    _fnCalculateColumnWidths(oSettings);\n                }\n\n                for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                    if (oSettings.aoColumns[i].sWidth !== null) {\n                        oSettings.aoColumns[i].nTh.style.width = _fnStringToCss(oSettings.aoColumns[i].sWidth);\n                    }\n                }\n\n                /* If there is default sorting required - let's do it. The sort function will do the\n\t\t\t * drawing for us. Otherwise we draw the table regardless of the Ajax source - this allows\n\t\t\t * the table to look initialised for Ajax sourcing data (show 'loading' message possibly)\n\t\t\t */\n                if (oSettings.oFeatures.bSort) {\n                    _fnSort(oSettings);\n                } else if (oSettings.oFeatures.bFilter) {\n                    _fnFilterComplete(oSettings, oSettings.oPreviousSearch);\n                } else {\n                    oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n                    _fnCalculateEnd(oSettings);\n                    _fnDraw(oSettings);\n                }\n\n                /* if there is an ajax source load the data */\n                if (oSettings.sAjaxSource !== null && !oSettings.oFeatures.bServerSide) {\n                    var aoData = [];\n                    _fnServerParams(oSettings, aoData);\n                    oSettings.fnServerData.call(oSettings.oInstance, oSettings.sAjaxSource, aoData, function(json) {\n                        var aData = (oSettings.sAjaxDataProp !== \"\") ?\n                            _fnGetObjectDataFn(oSettings.sAjaxDataProp)(json) : json;\n\n                        /* Got the data - add it to the table */\n                        for (i = 0; i < aData.length; i++) {\n                            _fnAddData(oSettings, aData[i]);\n                        }\n\n                        /* Reset the init display for cookie saving. We've already done a filter, and\n\t\t\t\t\t * therefore cleared it before. So we need to make it appear 'fresh'\n\t\t\t\t\t */\n                        oSettings.iInitDisplayStart = iAjaxStart;\n\n                        if (oSettings.oFeatures.bSort) {\n                            _fnSort(oSettings);\n                        } else {\n                            oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n                            _fnCalculateEnd(oSettings);\n                            _fnDraw(oSettings);\n                        }\n\n                        _fnProcessingDisplay(oSettings, false);\n                        _fnInitComplete(oSettings, json);\n                    }, oSettings);\n                    return;\n                }\n\n                /* Server-side processing initialisation complete is done at the end of _fnDraw */\n                if (!oSettings.oFeatures.bServerSide) {\n                    _fnProcessingDisplay(oSettings, false);\n                    _fnInitComplete(oSettings);\n                }\n            }\n\n\n            /**\n             * Draw the table for the first time, adding all required features\n             *  @param {object} oSettings dataTables settings object\n             *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n             *    with client-side processing (optional)\n             *  @memberof DataTable#oApi\n             */\n            function _fnInitComplete(oSettings, json) {\n                oSettings._bInitComplete = true;\n                _fnCallbackFire(oSettings, 'aoInitComplete', 'init', [oSettings, json]);\n            }\n\n\n            /**\n             * Language compatibility - when certain options are given, and others aren't, we\n             * need to duplicate the values over, in order to provide backwards compatibility\n             * with older language files.\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnLanguageCompat(oLanguage) {\n                var oDefaults = DataTable.defaults.oLanguage;\n\n                /* Backwards compatibility - if there is no sEmptyTable given, then use the same as\n\t\t\t * sZeroRecords - assuming that is given.\n\t\t\t */\n                if (!oLanguage.sEmptyTable && oLanguage.sZeroRecords &&\n                    oDefaults.sEmptyTable === \"No data available in table\") {\n                    _fnMap(oLanguage, oLanguage, 'sZeroRecords', 'sEmptyTable');\n                }\n\n                /* Likewise with loading records */\n                if (!oLanguage.sLoadingRecords && oLanguage.sZeroRecords &&\n                    oDefaults.sLoadingRecords === \"Loading...\") {\n                    _fnMap(oLanguage, oLanguage, 'sZeroRecords', 'sLoadingRecords');\n                }\n            }\n\n\n            /**\n             * Generate the node required for user display length changing\n             *  @param {object} oSettings dataTables settings object\n             *  @returns {node} Display length feature node\n             *  @memberof DataTable#oApi\n             */\n            function _fnFeatureHtmlLength(oSettings) {\n                if (oSettings.oScroll.bInfinite) {\n                    return null;\n                }\n\n                /* This can be overruled by not using the _MENU_ var/macro in the language variable */\n                var sName = 'name=\"' + oSettings.sTableId + '_length\"';\n                var sStdMenu = '<select size=\"1\" ' + sName + '>';\n                var i, iLen;\n                var aLengthMenu = oSettings.aLengthMenu;\n\n                if (aLengthMenu.length == 2 && typeof aLengthMenu[0] === 'object' &&\n                    typeof aLengthMenu[1] === 'object') {\n                    for (i = 0, iLen = aLengthMenu[0].length; i < iLen; i++) {\n                        sStdMenu += '<option value=\"' + aLengthMenu[0][i] + '\">' + aLengthMenu[1][i] + '</option>';\n                    }\n                } else {\n                    for (i = 0, iLen = aLengthMenu.length; i < iLen; i++) {\n                        sStdMenu += '<option value=\"' + aLengthMenu[i] + '\">' + aLengthMenu[i] + '</option>';\n                    }\n                }\n                sStdMenu += '</select>';\n\n                var nLength = document.createElement('div');\n                if (!oSettings.aanFeatures.l) {\n                    nLength.id = oSettings.sTableId + '_length';\n                }\n                nLength.className = oSettings.oClasses.sLength;\n                nLength.innerHTML = '<label>' + oSettings.oLanguage.sLengthMenu.replace('_MENU_', sStdMenu) + '</label>';\n\n                /*\n\t\t\t * Set the length to the current display length - thanks to Andrea Pavlovic for this fix,\n\t\t\t * and Stefan Skopnik for fixing the fix!\n\t\t\t */\n                $('select option[value=\"' + oSettings._iDisplayLength + '\"]', nLength).attr(\"selected\", true);\n\n                $('select', nLength).bind('change.DT', function(e) {\n                    var iVal = $(this).val();\n\n                    /* Update all other length options for the new display */\n                    var n = oSettings.aanFeatures.l;\n                    for (i = 0, iLen = n.length; i < iLen; i++) {\n                        if (n[i] != this.parentNode) {\n                            $('select', n[i]).val(iVal);\n                        }\n                    }\n\n                    /* Redraw the table */\n                    oSettings._iDisplayLength = parseInt(iVal, 10);\n                    _fnCalculateEnd(oSettings);\n\n                    /* If we have space to show extra rows (backing up from the end point - then do so */\n                    if (oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay()) {\n                        oSettings._iDisplayStart = oSettings.fnDisplayEnd() - oSettings._iDisplayLength;\n                        if (oSettings._iDisplayStart < 0) {\n                            oSettings._iDisplayStart = 0;\n                        }\n                    }\n\n                    if (oSettings._iDisplayLength == -1) {\n                        oSettings._iDisplayStart = 0;\n                    }\n\n                    _fnDraw(oSettings);\n                });\n\n\n                $('select', nLength).attr('aria-controls', oSettings.sTableId);\n\n                return nLength;\n            }\n\n\n            /**\n             * Recalculate the end point based on the start point\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnCalculateEnd(oSettings) {\n                if (oSettings.oFeatures.bPaginate === false) {\n                    oSettings._iDisplayEnd = oSettings.aiDisplay.length;\n                } else {\n                    /* Set the end point of the display - based on how many elements there are\n\t\t\t\t * still to display\n\t\t\t\t */\n                    if (oSettings._iDisplayStart + oSettings._iDisplayLength > oSettings.aiDisplay.length ||\n                        oSettings._iDisplayLength == -1) {\n                        oSettings._iDisplayEnd = oSettings.aiDisplay.length;\n                    } else {\n                        oSettings._iDisplayEnd = oSettings._iDisplayStart + oSettings._iDisplayLength;\n                    }\n                }\n            }\n\n\n            /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t\t * Note that most of the paging logic is done in\n\t\t * DataTable.ext.oPagination\n\t\t */\n\n            /**\n             * Generate the node required for default pagination\n             *  @param {object} oSettings dataTables settings object\n             *  @returns {node} Pagination feature node\n             *  @memberof DataTable#oApi\n             */\n            function _fnFeatureHtmlPaginate(oSettings) {\n                if (oSettings.oScroll.bInfinite) {\n                    return null;\n                }\n\n                var nPaginate = document.createElement('div');\n                nPaginate.className = oSettings.oClasses.sPaging + oSettings.sPaginationType;\n\n                DataTable.ext.oPagination[oSettings.sPaginationType].fnInit(oSettings, nPaginate,\n                    function(oSettings) {\n                        _fnCalculateEnd(oSettings);\n                        _fnDraw(oSettings);\n                    }\n                );\n\n                /* Add a draw callback for the pagination on first instance, to update the paging display */\n                if (!oSettings.aanFeatures.p) {\n                    oSettings.aoDrawCallback.push({\n                        \"fn\": function(oSettings) {\n                            DataTable.ext.oPagination[oSettings.sPaginationType].fnUpdate(oSettings, function(oSettings) {\n                                _fnCalculateEnd(oSettings);\n                                _fnDraw(oSettings);\n                            });\n                        },\n                        \"sName\": \"pagination\"\n                    });\n                }\n                return nPaginate;\n            }\n\n\n            /**\n             * Alter the display settings to change the page\n             *  @param {object} oSettings dataTables settings object\n             *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n             *    or page number to jump to (integer)\n             *  @returns {bool} true page has changed, false - no change (no effect) eg 'first' on page 1\n             *  @memberof DataTable#oApi\n             */\n            function _fnPageChange(oSettings, mAction) {\n                var iOldStart = oSettings._iDisplayStart;\n\n                if (typeof mAction === \"number\") {\n                    oSettings._iDisplayStart = mAction * oSettings._iDisplayLength;\n                    if (oSettings._iDisplayStart > oSettings.fnRecordsDisplay()) {\n                        oSettings._iDisplayStart = 0;\n                    }\n                } else if (mAction == \"first\") {\n                    oSettings._iDisplayStart = 0;\n                } else if (mAction == \"previous\") {\n                    oSettings._iDisplayStart = oSettings._iDisplayLength >= 0 ?\n                        oSettings._iDisplayStart - oSettings._iDisplayLength :\n                        0;\n\n                    /* Correct for under-run */\n                    if (oSettings._iDisplayStart < 0) {\n                        oSettings._iDisplayStart = 0;\n                    }\n                } else if (mAction == \"next\") {\n                    if (oSettings._iDisplayLength >= 0) {\n                        /* Make sure we are not over running the display array */\n                        if (oSettings._iDisplayStart + oSettings._iDisplayLength < oSettings.fnRecordsDisplay()) {\n                            oSettings._iDisplayStart += oSettings._iDisplayLength;\n                        }\n                    } else {\n                        oSettings._iDisplayStart = 0;\n                    }\n                } else if (mAction == \"last\") {\n                    if (oSettings._iDisplayLength >= 0) {\n                        var iPages = parseInt((oSettings.fnRecordsDisplay() - 1) / oSettings._iDisplayLength, 10) + 1;\n                        oSettings._iDisplayStart = (iPages - 1) * oSettings._iDisplayLength;\n                    } else {\n                        oSettings._iDisplayStart = 0;\n                    }\n                } else {\n                    _fnLog(oSettings, 0, \"Unknown paging action: \" + mAction);\n                }\n                $(oSettings.oInstance).trigger('page', oSettings);\n\n                return iOldStart != oSettings._iDisplayStart;\n            }\n\n\n            /**\n             * Generate the node required for the processing node\n             *  @param {object} oSettings dataTables settings object\n             *  @returns {node} Processing element\n             *  @memberof DataTable#oApi\n             */\n            function _fnFeatureHtmlProcessing(oSettings) {\n                var nProcessing = document.createElement('div');\n\n                if (!oSettings.aanFeatures.r) {\n                    nProcessing.id = oSettings.sTableId + '_processing';\n                }\n                nProcessing.innerHTML = oSettings.oLanguage.sProcessing;\n                nProcessing.className = oSettings.oClasses.sProcessing;\n                oSettings.nTable.parentNode.insertBefore(nProcessing, oSettings.nTable);\n\n                return nProcessing;\n            }\n\n\n            /**\n             * Display or hide the processing indicator\n             *  @param {object} oSettings dataTables settings object\n             *  @param {bool} bShow Show the processing indicator (true) or not (false)\n             *  @memberof DataTable#oApi\n             */\n            function _fnProcessingDisplay(oSettings, bShow) {\n                if (oSettings.oFeatures.bProcessing) {\n                    var an = oSettings.aanFeatures.r;\n                    for (var i = 0, iLen = an.length; i < iLen; i++) {\n                        an[i].style.visibility = bShow ? \"visible\" : \"hidden\";\n                    }\n                }\n\n                $(oSettings.oInstance).trigger('processing', [oSettings, bShow]);\n            }\n\n            /**\n             * Add any control elements for the table - specifically scrolling\n             *  @param {object} oSettings dataTables settings object\n             *  @returns {node} Node to add to the DOM\n             *  @memberof DataTable#oApi\n             */\n            function _fnFeatureHtmlTable(oSettings) {\n                /* Check if scrolling is enabled or not - if not then leave the DOM unaltered */\n                if (oSettings.oScroll.sX === \"\" && oSettings.oScroll.sY === \"\") {\n                    return oSettings.nTable;\n                }\n\n                /*\n\t\t\t * The HTML structure that we want to generate in this function is:\n\t\t\t *  div - nScroller\n\t\t\t *    div - nScrollHead\n\t\t\t *      div - nScrollHeadInner\n\t\t\t *        table - nScrollHeadTable\n\t\t\t *          thead - nThead\n\t\t\t *    div - nScrollBody\n\t\t\t *      table - oSettings.nTable\n\t\t\t *        thead - nTheadSize\n\t\t\t *        tbody - nTbody\n\t\t\t *    div - nScrollFoot\n\t\t\t *      div - nScrollFootInner\n\t\t\t *        table - nScrollFootTable\n\t\t\t *          tfoot - nTfoot\n\t\t\t */\n                var\n                    nScroller = document.createElement('div'),\n                    nScrollHead = document.createElement('div'),\n                    nScrollHeadInner = document.createElement('div'),\n                    nScrollBody = document.createElement('div'),\n                    nScrollFoot = document.createElement('div'),\n                    nScrollFootInner = document.createElement('div'),\n                    nScrollHeadTable = oSettings.nTable.cloneNode(false),\n                    nScrollFootTable = oSettings.nTable.cloneNode(false),\n                    nThead = oSettings.nTable.getElementsByTagName('thead')[0],\n                    nTfoot = oSettings.nTable.getElementsByTagName('tfoot').length === 0 ? null :\n                        oSettings.nTable.getElementsByTagName('tfoot')[0],\n                    oClasses = oSettings.oClasses;\n\n                nScrollHead.appendChild(nScrollHeadInner);\n                nScrollFoot.appendChild(nScrollFootInner);\n                nScrollBody.appendChild(oSettings.nTable);\n                nScroller.appendChild(nScrollHead);\n                nScroller.appendChild(nScrollBody);\n                nScrollHeadInner.appendChild(nScrollHeadTable);\n                nScrollHeadTable.appendChild(nThead);\n                if (nTfoot !== null) {\n                    nScroller.appendChild(nScrollFoot);\n                    nScrollFootInner.appendChild(nScrollFootTable);\n                    nScrollFootTable.appendChild(nTfoot);\n                }\n\n                nScroller.className = oClasses.sScrollWrapper;\n                nScrollHead.className = oClasses.sScrollHead;\n                nScrollHeadInner.className = oClasses.sScrollHeadInner;\n                nScrollBody.className = oClasses.sScrollBody;\n                nScrollFoot.className = oClasses.sScrollFoot;\n                nScrollFootInner.className = oClasses.sScrollFootInner;\n\n                if (oSettings.oScroll.bAutoCss) {\n                    nScrollHead.style.overflow = \"hidden\";\n                    nScrollHead.style.position = \"relative\";\n                    nScrollFoot.style.overflow = \"hidden\";\n                    nScrollBody.style.overflow = \"auto\";\n                }\n\n                nScrollHead.style.border = \"0\";\n                nScrollHead.style.width = \"100%\";\n                nScrollFoot.style.border = \"0\";\n                nScrollHeadInner.style.width = oSettings.oScroll.sXInner !== \"\" ?\n                    oSettings.oScroll.sXInner : \"100%\"; /* will be overwritten */\n\n                /* Modify attributes to respect the clones */\n                nScrollHeadTable.removeAttribute('id');\n                nScrollHeadTable.style.marginLeft = \"0\";\n                oSettings.nTable.style.marginLeft = \"0\";\n                if (nTfoot !== null) {\n                    nScrollFootTable.removeAttribute('id');\n                    nScrollFootTable.style.marginLeft = \"0\";\n                }\n\n                /* Move caption elements from the body to the header, footer or leave where it is\n\t\t\t * depending on the configuration. Note that the DTD says there can be only one caption */\n                var nCaption = $(oSettings.nTable).children('caption');\n                if (nCaption.length > 0) {\n                    nCaption = nCaption[0];\n                    if (nCaption._captionSide === \"top\") {\n                        nScrollHeadTable.appendChild(nCaption);\n                    } else if (nCaption._captionSide === \"bottom\" && nTfoot) {\n                        nScrollFootTable.appendChild(nCaption);\n                    }\n                }\n\n                /*\n\t\t\t * Sizing\n\t\t\t */\n                /* When x-scrolling add the width and a scroller to move the header with the body */\n                if (oSettings.oScroll.sX !== \"\") {\n                    nScrollHead.style.width = _fnStringToCss(oSettings.oScroll.sX);\n                    nScrollBody.style.width = _fnStringToCss(oSettings.oScroll.sX);\n\n                    if (nTfoot !== null) {\n                        nScrollFoot.style.width = _fnStringToCss(oSettings.oScroll.sX);\n                    }\n\n                    /* When the body is scrolled, then we also want to scroll the headers */\n                    $(nScrollBody).scroll(function(e) {\n                        nScrollHead.scrollLeft = this.scrollLeft;\n\n                        if (nTfoot !== null) {\n                            nScrollFoot.scrollLeft = this.scrollLeft;\n                        }\n                    });\n                }\n\n                /* When yscrolling, add the height */\n                if (oSettings.oScroll.sY !== \"\") {\n                    nScrollBody.style.height = _fnStringToCss(oSettings.oScroll.sY);\n                }\n\n                /* Redraw - align columns across the tables */\n                oSettings.aoDrawCallback.push({\n                    \"fn\": _fnScrollDraw,\n                    \"sName\": \"scrolling\"\n                });\n\n                /* Infinite scrolling event handlers */\n                if (oSettings.oScroll.bInfinite) {\n                    $(nScrollBody).scroll(function() {\n                        /* Use a blocker to stop scrolling from loading more data while other data is still loading */\n                        if (!oSettings.bDrawing && $(this).scrollTop() !== 0) {\n                            /* Check if we should load the next data set */\n                            if ($(this).scrollTop() + $(this).height() >\n                                $(oSettings.nTable).height() - oSettings.oScroll.iLoadGap) {\n                                /* Only do the redraw if we have to - we might be at the end of the data */\n                                if (oSettings.fnDisplayEnd() < oSettings.fnRecordsDisplay()) {\n                                    _fnPageChange(oSettings, 'next');\n                                    _fnCalculateEnd(oSettings);\n                                    _fnDraw(oSettings);\n                                }\n                            }\n                        }\n                    });\n                }\n\n                oSettings.nScrollHead = nScrollHead;\n                oSettings.nScrollFoot = nScrollFoot;\n\n                return nScroller;\n            }\n\n\n            /**\n             * Update the various tables for resizing. It's a bit of a pig this function, but\n             * basically the idea to:\n             *   1. Re-create the table inside the scrolling div\n             *   2. Take live measurements from the DOM\n             *   3. Apply the measurements\n             *   4. Clean up\n             *  @param {object} o dataTables settings object\n             *  @returns {node} Node to add to the DOM\n             *  @memberof DataTable#oApi\n             */\n            function _fnScrollDraw(o) {\n                var\n                    nScrollHeadInner = o.nScrollHead.getElementsByTagName('div')[0],\n                    nScrollHeadTable = nScrollHeadInner.getElementsByTagName('table')[0],\n                    nScrollBody = o.nTable.parentNode,\n                    i, iLen, j, jLen, anHeadToSize, anHeadSizers, anFootSizers, anFootToSize, oStyle, iVis,\n                    nTheadSize, nTfootSize,\n                    iWidth, aApplied = [], aAppliedFooter = [], iSanityWidth,\n                    nScrollFootInner = (o.nTFoot !== null) ? o.nScrollFoot.getElementsByTagName('div')[0] : null,\n                    nScrollFootTable = (o.nTFoot !== null) ? nScrollFootInner.getElementsByTagName('table')[0] : null,\n                    ie67 = o.oBrowser.bScrollOversize,\n                    zeroOut = function(nSizer) {\n                        oStyle = nSizer.style;\n                        oStyle.paddingTop = \"0\";\n                        oStyle.paddingBottom = \"0\";\n                        oStyle.borderTopWidth = \"0\";\n                        oStyle.borderBottomWidth = \"0\";\n                        oStyle.height = 0;\n                    };\n\n                /*\n\t\t\t * 1. Re-create the table inside the scrolling div\n\t\t\t */\n\n                /* Remove the old minimised thead and tfoot elements in the inner table */\n                $(o.nTable).children('thead, tfoot').remove();\n\n                /* Clone the current header and footer elements and then place it into the inner table */\n                nTheadSize = $(o.nTHead).clone()[0];\n                o.nTable.insertBefore(nTheadSize, o.nTable.childNodes[0]);\n                anHeadToSize = o.nTHead.getElementsByTagName('tr');\n                anHeadSizers = nTheadSize.getElementsByTagName('tr');\n\n                if (o.nTFoot !== null) {\n                    nTfootSize = $(o.nTFoot).clone()[0];\n                    o.nTable.insertBefore(nTfootSize, o.nTable.childNodes[1]);\n                    anFootToSize = o.nTFoot.getElementsByTagName('tr');\n                    anFootSizers = nTfootSize.getElementsByTagName('tr');\n                }\n\n                /*\n\t\t\t * 2. Take live measurements from the DOM - do not alter the DOM itself!\n\t\t\t */\n\n                /* Remove old sizing and apply the calculated column widths\n\t\t\t * Get the unique column headers in the newly created (cloned) header. We want to apply the\n\t\t\t * calculated sizes to this header\n\t\t\t */\n                if (o.oScroll.sX === \"\") {\n                    nScrollBody.style.width = '100%';\n                    nScrollHeadInner.parentNode.style.width = '100%';\n                }\n\n                var nThs = _fnGetUniqueThs(o, nTheadSize);\n                for (i = 0, iLen = nThs.length; i < iLen; i++) {\n                    iVis = _fnVisibleToColumnIndex(o, i);\n                    nThs[i].style.width = o.aoColumns[iVis].sWidth;\n                }\n\n                if (o.nTFoot !== null) {\n                    _fnApplyToChildren(function(n) {\n                        n.style.width = \"\";\n                    }, anFootSizers);\n                }\n\n                // If scroll collapse is enabled, when we put the headers back into the body for sizing, we\n                // will end up forcing the scrollbar to appear, making our measurements wrong for when we\n                // then hide it (end of this function), so add the header height to the body scroller.\n                if (o.oScroll.bCollapse && o.oScroll.sY !== \"\") {\n                    nScrollBody.style.height = (nScrollBody.offsetHeight + o.nTHead.offsetHeight) + \"px\";\n                }\n\n                /* Size the table as a whole */\n                iSanityWidth = $(o.nTable).outerWidth();\n                if (o.oScroll.sX === \"\") {\n                    /* No x scrolling */\n                    o.nTable.style.width = \"100%\";\n\n                    /* I know this is rubbish - but IE7 will make the width of the table when 100% include\n\t\t\t\t * the scrollbar - which is shouldn't. When there is a scrollbar we need to take this\n\t\t\t\t * into account.\n\t\t\t\t */\n                    if (ie67 && ($('tbody', nScrollBody).height() > nScrollBody.offsetHeight ||\n                        $(nScrollBody).css('overflow-y') == \"scroll\")) {\n                        o.nTable.style.width = _fnStringToCss($(o.nTable).outerWidth() - o.oScroll.iBarWidth);\n                    }\n                } else {\n                    if (o.oScroll.sXInner !== \"\") {\n                        /* x scroll inner has been given - use it */\n                        o.nTable.style.width = _fnStringToCss(o.oScroll.sXInner);\n                    } else if (iSanityWidth == $(nScrollBody).width() &&\n                        $(nScrollBody).height() < $(o.nTable).height()) {\n                        /* There is y-scrolling - try to take account of the y scroll bar */\n                        o.nTable.style.width = _fnStringToCss(iSanityWidth - o.oScroll.iBarWidth);\n                        if ($(o.nTable).outerWidth() > iSanityWidth - o.oScroll.iBarWidth) {\n                            /* Not possible to take account of it */\n                            o.nTable.style.width = _fnStringToCss(iSanityWidth);\n                        }\n                    } else {\n                        /* All else fails */\n                        o.nTable.style.width = _fnStringToCss(iSanityWidth);\n                    }\n                }\n\n                /* Recalculate the sanity width - now that we've applied the required width, before it was\n\t\t\t * a temporary variable. This is required because the column width calculation is done\n\t\t\t * before this table DOM is created.\n\t\t\t */\n                iSanityWidth = $(o.nTable).outerWidth();\n\n                /* We want the hidden header to have zero height, so remove padding and borders. Then\n\t\t\t * set the width based on the real headers\n\t\t\t */\n\n                // Apply all styles in one pass. Invalidates layout only once because we don't read any\n                // DOM properties.\n                _fnApplyToChildren(zeroOut, anHeadSizers);\n\n                // Read all widths in next pass. Forces layout only once because we do not change\n                // any DOM properties.\n                _fnApplyToChildren(function(nSizer) {\n                    aApplied.push(_fnStringToCss($(nSizer).width()));\n                }, anHeadSizers);\n\n                // Apply all widths in final pass. Invalidates layout only once because we do not\n                // read any DOM properties.\n                _fnApplyToChildren(function(nToSize, i) {\n                    nToSize.style.width = aApplied[i];\n                }, anHeadToSize);\n\n                $(anHeadSizers).height(0);\n\n                /* Same again with the footer if we have one */\n                if (o.nTFoot !== null) {\n                    _fnApplyToChildren(zeroOut, anFootSizers);\n\n                    _fnApplyToChildren(function(nSizer) {\n                        aAppliedFooter.push(_fnStringToCss($(nSizer).width()));\n                    }, anFootSizers);\n\n                    _fnApplyToChildren(function(nToSize, i) {\n                        nToSize.style.width = aAppliedFooter[i];\n                    }, anFootToSize);\n\n                    $(anFootSizers).height(0);\n                }\n\n                /*\n\t\t\t * 3. Apply the measurements\n\t\t\t */\n\n                /* \"Hide\" the header and footer that we used for the sizing. We want to also fix their width\n\t\t\t * to what they currently are\n\t\t\t */\n                _fnApplyToChildren(function(nSizer, i) {\n                    nSizer.innerHTML = \"\";\n                    nSizer.style.width = aApplied[i];\n                }, anHeadSizers);\n\n                if (o.nTFoot !== null) {\n                    _fnApplyToChildren(function(nSizer, i) {\n                        nSizer.innerHTML = \"\";\n                        nSizer.style.width = aAppliedFooter[i];\n                    }, anFootSizers);\n                }\n\n                /* Sanity check that the table is of a sensible width. If not then we are going to get\n\t\t\t * misalignment - try to prevent this by not allowing the table to shrink below its min width\n\t\t\t */\n                if ($(o.nTable).outerWidth() < iSanityWidth) {\n                    /* The min width depends upon if we have a vertical scrollbar visible or not */\n                    var iCorrection = ((nScrollBody.scrollHeight > nScrollBody.offsetHeight ||\n                        $(nScrollBody).css('overflow-y') == \"scroll\")) ?\n                        iSanityWidth + o.oScroll.iBarWidth : iSanityWidth;\n\n                    /* IE6/7 are a law unto themselves... */\n                    if (ie67 && (nScrollBody.scrollHeight >\n                        nScrollBody.offsetHeight || $(nScrollBody).css('overflow-y') == \"scroll\")) {\n                        o.nTable.style.width = _fnStringToCss(iCorrection - o.oScroll.iBarWidth);\n                    }\n\n                    /* Apply the calculated minimum width to the table wrappers */\n                    nScrollBody.style.width = _fnStringToCss(iCorrection);\n                    o.nScrollHead.style.width = _fnStringToCss(iCorrection);\n\n                    if (o.nTFoot !== null) {\n                        o.nScrollFoot.style.width = _fnStringToCss(iCorrection);\n                    }\n\n                    /* And give the user a warning that we've stopped the table getting too small */\n                    if (o.oScroll.sX === \"\") {\n                        _fnLog(o, 1, \"The table cannot fit into the current element which will cause column\" +\n                            \" misalignment. The table has been drawn at its minimum possible width.\");\n                    } else if (o.oScroll.sXInner !== \"\") {\n                        _fnLog(o, 1, \"The table cannot fit into the current element which will cause column\" +\n                            \" misalignment. Increase the sScrollXInner value or remove it to allow automatic\" +\n                            \" calculation\");\n                    }\n                } else {\n                    nScrollBody.style.width = _fnStringToCss('100%');\n                    o.nScrollHead.style.width = _fnStringToCss('100%');\n\n                    if (o.nTFoot !== null) {\n                        o.nScrollFoot.style.width = _fnStringToCss('100%');\n                    }\n                }\n\n\n                /*\n\t\t\t * 4. Clean up\n\t\t\t */\n                if (o.oScroll.sY === \"\") {\n                    /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n\t\t\t\t * the scrollbar height from the visible display, rather than adding it on. We need to\n\t\t\t\t * set the height in order to sort this. Don't want to do it in any other browsers.\n\t\t\t\t */\n                    if (ie67) {\n                        nScrollBody.style.height = _fnStringToCss(o.nTable.offsetHeight + o.oScroll.iBarWidth);\n                    }\n                }\n\n                if (o.oScroll.sY !== \"\" && o.oScroll.bCollapse) {\n                    nScrollBody.style.height = _fnStringToCss(o.oScroll.sY);\n\n                    var iExtra = (o.oScroll.sX !== \"\" && o.nTable.offsetWidth > nScrollBody.offsetWidth) ?\n                        o.oScroll.iBarWidth : 0;\n                    if (o.nTable.offsetHeight < nScrollBody.offsetHeight) {\n                        nScrollBody.style.height = _fnStringToCss(o.nTable.offsetHeight + iExtra);\n                    }\n                }\n\n                /* Finally set the width's of the header and footer tables */\n                var iOuterWidth = $(o.nTable).outerWidth();\n                nScrollHeadTable.style.width = _fnStringToCss(iOuterWidth);\n                nScrollHeadInner.style.width = _fnStringToCss(iOuterWidth);\n\n                // Figure out if there are scrollbar present - if so then we need a the header and footer to\n                // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n                var bScrolling = $(o.nTable).height() > nScrollBody.clientHeight || $(nScrollBody).css('overflow-y') == \"scroll\";\n                nScrollHeadInner.style.paddingRight = bScrolling ? o.oScroll.iBarWidth + \"px\" : \"0px\";\n\n                if (o.nTFoot !== null) {\n                    nScrollFootTable.style.width = _fnStringToCss(iOuterWidth);\n                    nScrollFootInner.style.width = _fnStringToCss(iOuterWidth);\n                    nScrollFootInner.style.paddingRight = bScrolling ? o.oScroll.iBarWidth + \"px\" : \"0px\";\n                }\n\n                /* Adjust the position of the header in case we loose the y-scrollbar */\n                $(nScrollBody).scroll();\n\n                /* If sorting or filtering has occurred, jump the scrolling back to the top */\n                if (o.bSorted || o.bFiltered) {\n                    nScrollBody.scrollTop = 0;\n                }\n            }\n\n\n            /**\n             * Apply a given function to the display child nodes of an element array (typically\n             * TD children of TR rows\n             *  @param {function} fn Method to apply to the objects\n             *  @param array {nodes} an1 List of elements to look through for display children\n             *  @param array {nodes} an2 Another list (identical structure to the first) - optional\n             *  @memberof DataTable#oApi\n             */\n            function _fnApplyToChildren(fn, an1, an2) {\n                var index = 0, i = 0, iLen = an1.length;\n                var nNode1, nNode2;\n\n                while (i < iLen) {\n                    nNode1 = an1[i].firstChild;\n                    nNode2 = an2 ? an2[i].firstChild : null;\n                    while (nNode1) {\n                        if (nNode1.nodeType === 1) {\n                            if (an2) {\n                                fn(nNode1, nNode2, index);\n                            } else {\n                                fn(nNode1, index);\n                            }\n                            index++;\n                        }\n                        nNode1 = nNode1.nextSibling;\n                        nNode2 = an2 ? nNode2.nextSibling : null;\n                    }\n                    i++;\n                }\n            }\n\n            /**\n             * Convert a CSS unit width to pixels (e.g. 2em)\n             *  @param {string} sWidth width to be converted\n             *  @param {node} nParent parent to get the with for (required for relative widths) - optional\n             *  @returns {int} iWidth width in pixels\n             *  @memberof DataTable#oApi\n             */\n            function _fnConvertToWidth(sWidth, nParent) {\n                if (!sWidth || sWidth === null || sWidth === '') {\n                    return 0;\n                }\n\n                if (!nParent) {\n                    nParent = document.body;\n                }\n\n                var iWidth;\n                var nTmp = document.createElement(\"div\");\n                nTmp.style.width = _fnStringToCss(sWidth);\n\n                nParent.appendChild(nTmp);\n                iWidth = nTmp.offsetWidth;\n                nParent.removeChild(nTmp);\n\n                return (iWidth);\n            }\n\n\n            /**\n             * Calculate the width of columns for the table\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnCalculateColumnWidths(oSettings) {\n                var iTableWidth = oSettings.nTable.offsetWidth;\n                var iUserInputs = 0;\n                var iTmpWidth;\n                var iVisibleColumns = 0;\n                var iColums = oSettings.aoColumns.length;\n                var i, iIndex, iCorrector, iWidth;\n                var oHeaders = $('th', oSettings.nTHead);\n                var widthAttr = oSettings.nTable.getAttribute('width');\n                var nWrapper = oSettings.nTable.parentNode;\n\n                /* Convert any user input sizes into pixel sizes */\n                for (i = 0; i < iColums; i++) {\n                    if (oSettings.aoColumns[i].bVisible) {\n                        iVisibleColumns++;\n\n                        if (oSettings.aoColumns[i].sWidth !== null) {\n                            iTmpWidth = _fnConvertToWidth(oSettings.aoColumns[i].sWidthOrig,\n                                nWrapper);\n                            if (iTmpWidth !== null) {\n                                oSettings.aoColumns[i].sWidth = _fnStringToCss(iTmpWidth);\n                            }\n\n                            iUserInputs++;\n                        }\n                    }\n                }\n\n                /* If the number of columns in the DOM equals the number that we have to process in\n\t\t\t * DataTables, then we can use the offsets that are created by the web-browser. No custom\n\t\t\t * sizes can be set in order for this to happen, nor scrolling used\n\t\t\t */\n                if (iColums == oHeaders.length && iUserInputs === 0 && iVisibleColumns == iColums &&\n                    oSettings.oScroll.sX === \"\" && oSettings.oScroll.sY === \"\") {\n                    for (i = 0; i < oSettings.aoColumns.length; i++) {\n                        iTmpWidth = $(oHeaders[i]).width();\n                        if (iTmpWidth !== null) {\n                            oSettings.aoColumns[i].sWidth = _fnStringToCss(iTmpWidth);\n                        }\n                    }\n                } else {\n                    /* Otherwise we are going to have to do some calculations to get the width of each column.\n\t\t\t\t * Construct a 1 row table with the widest node in the data, and any user defined widths,\n\t\t\t\t * then insert it into the DOM and allow the browser to do all the hard work of\n\t\t\t\t * calculating table widths.\n\t\t\t\t */\n                    var\n                        nCalcTmp = oSettings.nTable.cloneNode(false),\n                        nTheadClone = oSettings.nTHead.cloneNode(true),\n                        nBody = document.createElement('tbody'),\n                        nTr = document.createElement('tr'),\n                        nDivSizing;\n\n                    nCalcTmp.removeAttribute(\"id\");\n                    nCalcTmp.appendChild(nTheadClone);\n                    if (oSettings.nTFoot !== null) {\n                        nCalcTmp.appendChild(oSettings.nTFoot.cloneNode(true));\n                        _fnApplyToChildren(function(n) {\n                            n.style.width = \"\";\n                        }, nCalcTmp.getElementsByTagName('tr'));\n                    }\n\n                    nCalcTmp.appendChild(nBody);\n                    nBody.appendChild(nTr);\n\n                    /* Remove any sizing that was previously applied by the styles */\n                    var jqColSizing = $('thead th', nCalcTmp);\n                    if (jqColSizing.length === 0) {\n                        jqColSizing = $('tbody tr:eq(0)>td', nCalcTmp);\n                    }\n\n                    /* Apply custom sizing to the cloned header */\n                    var nThs = _fnGetUniqueThs(oSettings, nTheadClone);\n                    iCorrector = 0;\n                    for (i = 0; i < iColums; i++) {\n                        var oColumn = oSettings.aoColumns[i];\n                        if (oColumn.bVisible && oColumn.sWidthOrig !== null && oColumn.sWidthOrig !== \"\") {\n                            nThs[i - iCorrector].style.width = _fnStringToCss(oColumn.sWidthOrig);\n                        } else if (oColumn.bVisible) {\n                            nThs[i - iCorrector].style.width = \"\";\n                        } else {\n                            iCorrector++;\n                        }\n                    }\n\n                    /* Find the biggest td for each column and put it into the table */\n                    for (i = 0; i < iColums; i++) {\n                        if (oSettings.aoColumns[i].bVisible) {\n                            var nTd = _fnGetWidestNode(oSettings, i);\n                            if (nTd !== null) {\n                                nTd = nTd.cloneNode(true);\n                                if (oSettings.aoColumns[i].sContentPadding !== \"\") {\n                                    nTd.innerHTML += oSettings.aoColumns[i].sContentPadding;\n                                }\n                                nTr.appendChild(nTd);\n                            }\n                        }\n                    }\n\n                    /* Build the table and 'display' it */\n                    nWrapper.appendChild(nCalcTmp);\n\n                    /* When scrolling (X or Y) we want to set the width of the table as appropriate. However,\n\t\t\t\t * when not scrolling leave the table width as it is. This results in slightly different,\n\t\t\t\t * but I think correct behaviour\n\t\t\t\t */\n                    if (oSettings.oScroll.sX !== \"\" && oSettings.oScroll.sXInner !== \"\") {\n                        nCalcTmp.style.width = _fnStringToCss(oSettings.oScroll.sXInner);\n                    } else if (oSettings.oScroll.sX !== \"\") {\n                        nCalcTmp.style.width = \"\";\n                        if ($(nCalcTmp).width() < nWrapper.offsetWidth) {\n                            nCalcTmp.style.width = _fnStringToCss(nWrapper.offsetWidth);\n                        }\n                    } else if (oSettings.oScroll.sY !== \"\") {\n                        nCalcTmp.style.width = _fnStringToCss(nWrapper.offsetWidth);\n                    } else if (widthAttr) {\n                        nCalcTmp.style.width = _fnStringToCss(widthAttr);\n                    }\n                    nCalcTmp.style.visibility = \"hidden\";\n\n                    /* Scrolling considerations */\n                    _fnScrollingWidthAdjust(oSettings, nCalcTmp);\n\n                    /* Read the width's calculated by the browser and store them for use by the caller. We\n\t\t\t\t * first of all try to use the elements in the body, but it is possible that there are\n\t\t\t\t * no elements there, under which circumstances we use the header elements\n\t\t\t\t */\n                    var oNodes = $(\"tbody tr:eq(0)\", nCalcTmp).children();\n                    if (oNodes.length === 0) {\n                        oNodes = _fnGetUniqueThs(oSettings, $('thead', nCalcTmp)[0]);\n                    }\n\n                    /* Browsers need a bit of a hand when a width is assigned to any columns when\n\t\t\t\t * x-scrolling as they tend to collapse the table to the min-width, even if\n\t\t\t\t * we sent the column widths. So we need to keep track of what the table width\n\t\t\t\t * should be by summing the user given values, and the automatic values\n\t\t\t\t */\n                    if (oSettings.oScroll.sX !== \"\") {\n                        var iTotal = 0;\n                        iCorrector = 0;\n                        for (i = 0; i < oSettings.aoColumns.length; i++) {\n                            if (oSettings.aoColumns[i].bVisible) {\n                                if (oSettings.aoColumns[i].sWidthOrig === null) {\n                                    iTotal += $(oNodes[iCorrector]).outerWidth();\n                                } else {\n                                    iTotal += parseInt(oSettings.aoColumns[i].sWidth.replace('px', ''), 10) +\n                                        ($(oNodes[iCorrector]).outerWidth() - $(oNodes[iCorrector]).width());\n                                }\n                                iCorrector++;\n                            }\n                        }\n\n                        nCalcTmp.style.width = _fnStringToCss(iTotal);\n                        oSettings.nTable.style.width = _fnStringToCss(iTotal);\n                    }\n\n                    iCorrector = 0;\n                    for (i = 0; i < oSettings.aoColumns.length; i++) {\n                        if (oSettings.aoColumns[i].bVisible) {\n                            iWidth = $(oNodes[iCorrector]).width();\n                            if (iWidth !== null && iWidth > 0) {\n                                oSettings.aoColumns[i].sWidth = _fnStringToCss(iWidth);\n                            }\n                            iCorrector++;\n                        }\n                    }\n\n                    var cssWidth = $(nCalcTmp).css('width');\n                    oSettings.nTable.style.width = (cssWidth.indexOf('%') !== -1) ?\n                        cssWidth : _fnStringToCss($(nCalcTmp).outerWidth());\n                    nCalcTmp.parentNode.removeChild(nCalcTmp);\n                }\n\n                if (widthAttr) {\n                    oSettings.nTable.style.width = _fnStringToCss(widthAttr);\n                }\n            }\n\n\n            /**\n             * Adjust a table's width to take account of scrolling\n             *  @param {object} oSettings dataTables settings object\n             *  @param {node} n table node\n             *  @memberof DataTable#oApi\n             */\n            function _fnScrollingWidthAdjust(oSettings, n) {\n                if (oSettings.oScroll.sX === \"\" && oSettings.oScroll.sY !== \"\") {\n                    /* When y-scrolling only, we want to remove the width of the scroll bar so the table\n\t\t\t\t * + scroll bar will fit into the area avaialble.\n\t\t\t\t */\n                    var iOrigWidth = $(n).width();\n                    n.style.width = _fnStringToCss($(n).outerWidth() - oSettings.oScroll.iBarWidth);\n                } else if (oSettings.oScroll.sX !== \"\") {\n                    /* When x-scrolling both ways, fix the table at it's current size, without adjusting */\n                    n.style.width = _fnStringToCss($(n).outerWidth());\n                }\n            }\n\n\n            /**\n             * Get the widest node\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} iCol column of interest\n             *  @returns {node} widest table node\n             *  @memberof DataTable#oApi\n             */\n            function _fnGetWidestNode(oSettings, iCol) {\n                var iMaxIndex = _fnGetMaxLenString(oSettings, iCol);\n                if (iMaxIndex < 0) {\n                    return null;\n                }\n\n                if (oSettings.aoData[iMaxIndex].nTr === null) {\n                    var n = document.createElement('td');\n                    n.innerHTML = _fnGetCellData(oSettings, iMaxIndex, iCol, '');\n                    return n;\n                }\n                return _fnGetTdNodes(oSettings, iMaxIndex)[iCol];\n            }\n\n\n            /**\n             * Get the maximum strlen for each data column\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} iCol column of interest\n             *  @returns {string} max string length for each column\n             *  @memberof DataTable#oApi\n             */\n            function _fnGetMaxLenString(oSettings, iCol) {\n                var iMax = -1;\n                var iMaxIndex = -1;\n\n                for (var i = 0; i < oSettings.aoData.length; i++) {\n                    var s = _fnGetCellData(oSettings, i, iCol, 'display') + \"\";\n                    s = s.replace(/<.*?>/g, \"\");\n                    if (s.length > iMax) {\n                        iMax = s.length;\n                        iMaxIndex = i;\n                    }\n                }\n\n                return iMaxIndex;\n            }\n\n\n            /**\n             * Append a CSS unit (only if required) to a string\n             *  @param {array} aArray1 first array\n             *  @param {array} aArray2 second array\n             *  @returns {int} 0 if match, 1 if length is different, 2 if no match\n             *  @memberof DataTable#oApi\n             */\n            function _fnStringToCss(s) {\n                if (s === null) {\n                    return \"0px\";\n                }\n\n                if (typeof s == 'number') {\n                    if (s < 0) {\n                        return \"0px\";\n                    }\n                    return s + \"px\";\n                }\n\n                /* Check if the last character is not 0-9 */\n                var c = s.charCodeAt(s.length - 1);\n                if (c < 0x30 || c > 0x39) {\n                    return s;\n                }\n                return s + \"px\";\n            }\n\n\n            /**\n             * Get the width of a scroll bar in this browser being used\n             *  @returns {int} width in pixels\n             *  @memberof DataTable#oApi\n             */\n            function _fnScrollBarWidth() {\n                var inner = document.createElement('p');\n                var style = inner.style;\n                style.width = \"100%\";\n                style.height = \"200px\";\n                style.padding = \"0px\";\n\n                var outer = document.createElement('div');\n                style = outer.style;\n                style.position = \"absolute\";\n                style.top = \"0px\";\n                style.left = \"0px\";\n                style.visibility = \"hidden\";\n                style.width = \"200px\";\n                style.height = \"150px\";\n                style.padding = \"0px\";\n                style.overflow = \"hidden\";\n                outer.appendChild(inner);\n\n                document.body.appendChild(outer);\n                var w1 = inner.offsetWidth;\n                outer.style.overflow = 'scroll';\n                var w2 = inner.offsetWidth;\n                if (w1 == w2) {\n                    w2 = outer.clientWidth;\n                }\n\n                document.body.removeChild(outer);\n                return (w1 - w2);\n            }\n\n            /**\n             * Change the order of the table\n             *  @param {object} oSettings dataTables settings object\n             *  @param {bool} bApplyClasses optional - should we apply classes or not\n             *  @memberof DataTable#oApi\n             */\n            function _fnSort(oSettings, bApplyClasses) {\n                var\n                    i, iLen, j, jLen, k, kLen,\n                    sDataType, nTh,\n                    aaSort = [],\n                    aiOrig = [],\n                    oSort = DataTable.ext.oSort,\n                    aoData = oSettings.aoData,\n                    aoColumns = oSettings.aoColumns,\n                    oAria = oSettings.oLanguage.oAria;\n\n                /* No sorting required if server-side or no sorting array */\n                if (!oSettings.oFeatures.bServerSide &&\n                    (oSettings.aaSorting.length !== 0 || oSettings.aaSortingFixed !== null)) {\n                    aaSort = (oSettings.aaSortingFixed !== null) ?\n                        oSettings.aaSortingFixed.concat(oSettings.aaSorting) :\n                        oSettings.aaSorting.slice();\n\n                    /* If there is a sorting data type, and a function belonging to it, then we need to\n\t\t\t\t * get the data from the developer's function and apply it for this column\n\t\t\t\t */\n                    for (i = 0; i < aaSort.length; i++) {\n                        var iColumn = aaSort[i][0];\n                        var iVisColumn = _fnColumnIndexToVisible(oSettings, iColumn);\n                        sDataType = oSettings.aoColumns[iColumn].sSortDataType;\n                        if (DataTable.ext.afnSortData[sDataType]) {\n                            var aData = DataTable.ext.afnSortData[sDataType].call(\n                                oSettings.oInstance, oSettings, iColumn, iVisColumn\n                            );\n                            if (aData.length === aoData.length) {\n                                for (j = 0, jLen = aoData.length; j < jLen; j++) {\n                                    _fnSetCellData(oSettings, j, iColumn, aData[j]);\n                                }\n                            } else {\n                                _fnLog(oSettings, 0, \"Returned data sort array (col \" + iColumn + \") is the wrong length\");\n                            }\n                        }\n                    }\n\n                    /* Create a value - key array of the current row positions such that we can use their\n\t\t\t\t * current position during the sort, if values match, in order to perform stable sorting\n\t\t\t\t */\n                    for (i = 0, iLen = oSettings.aiDisplayMaster.length; i < iLen; i++) {\n                        aiOrig[oSettings.aiDisplayMaster[i]] = i;\n                    }\n\n                    /* Build an internal data array which is specific to the sort, so we can get and prep\n\t\t\t\t * the data to be sorted only once, rather than needing to do it every time the sorting\n\t\t\t\t * function runs. This make the sorting function a very simple comparison\n\t\t\t\t */\n                    var iSortLen = aaSort.length;\n                    var fnSortFormat, aDataSort;\n                    for (i = 0, iLen = aoData.length; i < iLen; i++) {\n                        for (j = 0; j < iSortLen; j++) {\n                            aDataSort = aoColumns[aaSort[j][0]].aDataSort;\n\n                            for (k = 0, kLen = aDataSort.length; k < kLen; k++) {\n                                sDataType = aoColumns[aDataSort[k]].sType;\n                                fnSortFormat = oSort[(sDataType ? sDataType : 'string') + \"-pre\"];\n\n                                aoData[i]._aSortData[aDataSort[k]] = fnSortFormat ?\n                                    fnSortFormat(_fnGetCellData(oSettings, i, aDataSort[k], 'sort')) :\n                                    _fnGetCellData(oSettings, i, aDataSort[k], 'sort');\n                            }\n                        }\n                    }\n\n                    /* Do the sort - here we want multi-column sorting based on a given data source (column)\n\t\t\t\t * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n\t\t\t\t * follow on it's own, but this is what we want (example two column sorting):\n\t\t\t\t *  fnLocalSorting = function(a,b){\n\t\t\t\t *  \tvar iTest;\n\t\t\t\t *  \tiTest = oSort['string-asc']('data11', 'data12');\n\t\t\t\t *  \tif (iTest !== 0)\n\t\t\t\t *  \t\treturn iTest;\n\t\t\t\t *    iTest = oSort['numeric-desc']('data21', 'data22');\n\t\t\t\t *    if (iTest !== 0)\n\t\t\t\t *  \t\treturn iTest;\n\t\t\t\t *  \treturn oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n\t\t\t\t *  }\n\t\t\t\t * Basically we have a test for each sorting column, if the data in that column is equal,\n\t\t\t\t * test the next column. If all columns match, then we use a numeric sort on the row\n\t\t\t\t * positions in the original data array to provide a stable sort.\n\t\t\t\t */\n                    oSettings.aiDisplayMaster.sort(function(a, b) {\n                        var k, l, lLen, iTest, aDataSort, sDataType;\n                        for (k = 0; k < iSortLen; k++) {\n                            aDataSort = aoColumns[aaSort[k][0]].aDataSort;\n\n                            for (l = 0, lLen = aDataSort.length; l < lLen; l++) {\n                                sDataType = aoColumns[aDataSort[l]].sType;\n\n                                iTest = oSort[(sDataType ? sDataType : 'string') + \"-\" + aaSort[k][1]](\n                                    aoData[a]._aSortData[aDataSort[l]],\n                                    aoData[b]._aSortData[aDataSort[l]]\n                                );\n\n                                if (iTest !== 0) {\n                                    return iTest;\n                                }\n                            }\n                        }\n\n                        return oSort['numeric-asc'](aiOrig[a], aiOrig[b]);\n                    });\n                }\n\n                /* Alter the sorting classes to take account of the changes */\n                if ((bApplyClasses === undefined || bApplyClasses) && !oSettings.oFeatures.bDeferRender) {\n                    _fnSortingClasses(oSettings);\n                }\n\n                for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                    var sTitle = aoColumns[i].sTitle.replace(/<.*?>/g, \"\");\n                    nTh = aoColumns[i].nTh;\n                    nTh.removeAttribute('aria-sort');\n                    nTh.removeAttribute('aria-label');\n\n                    /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n                    if (aoColumns[i].bSortable) {\n                        if (aaSort.length > 0 && aaSort[0][0] == i) {\n                            nTh.setAttribute('aria-sort', aaSort[0][1] == \"asc\" ? \"ascending\" : \"descending\");\n\n                            var nextSort = (aoColumns[i].asSorting[aaSort[0][2] + 1]) ?\n                                aoColumns[i].asSorting[aaSort[0][2] + 1] : aoColumns[i].asSorting[0];\n                            nTh.setAttribute('aria-label', sTitle +\n                                (nextSort == \"asc\" ? oAria.sSortAscending : oAria.sSortDescending));\n                        } else {\n                            nTh.setAttribute('aria-label', sTitle +\n                                (aoColumns[i].asSorting[0] == \"asc\" ? oAria.sSortAscending : oAria.sSortDescending));\n                        }\n                    } else {\n                        nTh.setAttribute('aria-label', sTitle);\n                    }\n                }\n\n                /* Tell the draw function that we have sorted the data */\n                oSettings.bSorted = true;\n                $(oSettings.oInstance).trigger('sort', oSettings);\n\n                /* Copy the master data into the draw array and re-draw */\n                if (oSettings.oFeatures.bFilter) {\n                    /* _fnFilter() will redraw the table for us */\n                    _fnFilterComplete(oSettings, oSettings.oPreviousSearch, 1);\n                } else {\n                    oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n                    oSettings._iDisplayStart = 0; /* reset display back to page 0 */\n                    _fnCalculateEnd(oSettings);\n                    _fnDraw(oSettings);\n                }\n            }\n\n\n            /**\n             * Attach a sort handler (click) to a node\n             *  @param {object} oSettings dataTables settings object\n             *  @param {node} nNode node to attach the handler to\n             *  @param {int} iDataIndex column sorting index\n             *  @param {function} [fnCallback] callback function\n             *  @memberof DataTable#oApi\n             */\n            function _fnSortAttachListener(oSettings, nNode, iDataIndex, fnCallback) {\n                _fnBindAction(nNode, {}, function(e) {\n                    /* If the column is not sortable - don't to anything */\n                    if (oSettings.aoColumns[iDataIndex].bSortable === false) {\n                        return;\n                    }\n\n                    /*\n\t\t\t\t * This is a little bit odd I admit... I declare a temporary function inside the scope of\n\t\t\t\t * _fnBuildHead and the click handler in order that the code presented here can be used\n\t\t\t\t * twice - once for when bProcessing is enabled, and another time for when it is\n\t\t\t\t * disabled, as we need to perform slightly different actions.\n\t\t\t\t *   Basically the issue here is that the Javascript engine in modern browsers don't\n\t\t\t\t * appear to allow the rendering engine to update the display while it is still executing\n\t\t\t\t * it's thread (well - it does but only after long intervals). This means that the\n\t\t\t\t * 'processing' display doesn't appear for a table sort. To break the js thread up a bit\n\t\t\t\t * I force an execution break by using setTimeout - but this breaks the expected\n\t\t\t\t * thread continuation for the end-developer's point of view (their code would execute\n\t\t\t\t * too early), so we only do it when we absolutely have to.\n\t\t\t\t */\n                    var fnInnerSorting = function() {\n                        var iColumn, iNextSort;\n\n                        /* If the shift key is pressed then we are multiple column sorting */\n                        if (e.shiftKey) {\n                            /* Are we already doing some kind of sort on this column? */\n                            var bFound = false;\n                            for (var i = 0; i < oSettings.aaSorting.length; i++) {\n                                if (oSettings.aaSorting[i][0] == iDataIndex) {\n                                    bFound = true;\n                                    iColumn = oSettings.aaSorting[i][0];\n                                    iNextSort = oSettings.aaSorting[i][2] + 1;\n\n                                    if (!oSettings.aoColumns[iColumn].asSorting[iNextSort]) {\n                                        /* Reached the end of the sorting options, remove from multi-col sort */\n                                        oSettings.aaSorting.splice(i, 1);\n                                    } else {\n                                        /* Move onto next sorting direction */\n                                        oSettings.aaSorting[i][1] = oSettings.aoColumns[iColumn].asSorting[iNextSort];\n                                        oSettings.aaSorting[i][2] = iNextSort;\n                                    }\n                                    break;\n                                }\n                            }\n\n                            /* No sort yet - add it in */\n                            if (bFound === false) {\n                                oSettings.aaSorting.push([iDataIndex,\n                                    oSettings.aoColumns[iDataIndex].asSorting[0], 0]);\n                            }\n                        } else {\n                            /* If no shift key then single column sort */\n                            if (oSettings.aaSorting.length == 1 && oSettings.aaSorting[0][0] == iDataIndex) {\n                                iColumn = oSettings.aaSorting[0][0];\n                                iNextSort = oSettings.aaSorting[0][2] + 1;\n                                if (!oSettings.aoColumns[iColumn].asSorting[iNextSort]) {\n                                    iNextSort = 0;\n                                }\n                                oSettings.aaSorting[0][1] = oSettings.aoColumns[iColumn].asSorting[iNextSort];\n                                oSettings.aaSorting[0][2] = iNextSort;\n                            } else {\n                                oSettings.aaSorting.splice(0, oSettings.aaSorting.length);\n                                oSettings.aaSorting.push([iDataIndex,\n                                    oSettings.aoColumns[iDataIndex].asSorting[0], 0]);\n                            }\n                        }\n\n                        /* Run the sort */\n                        _fnSort(oSettings);\n                    }; /* /fnInnerSorting */\n\n                    if (!oSettings.oFeatures.bProcessing) {\n                        fnInnerSorting();\n                    } else {\n                        _fnProcessingDisplay(oSettings, true);\n                        setTimeout(function() {\n                            fnInnerSorting();\n                            if (!oSettings.oFeatures.bServerSide) {\n                                _fnProcessingDisplay(oSettings, false);\n                            }\n                        }, 0);\n                    }\n\n                    /* Call the user specified callback function - used for async user interaction */\n                    if (typeof fnCallback == 'function') {\n                        fnCallback(oSettings);\n                    }\n                });\n            }\n\n\n            /**\n             * Set the sorting classes on the header, Note: it is safe to call this function\n             * when bSort and bSortClasses are false\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnSortingClasses(oSettings) {\n                var i, iLen, j, jLen, iFound;\n                var aaSort, sClass;\n                var iColumns = oSettings.aoColumns.length;\n                var oClasses = oSettings.oClasses;\n\n                for (i = 0; i < iColumns; i++) {\n                    if (oSettings.aoColumns[i].bSortable) {\n                        $(oSettings.aoColumns[i].nTh).removeClass(oClasses.sSortAsc + \" \" + oClasses.sSortDesc +\n                            \" \" + oSettings.aoColumns[i].sSortingClass);\n                    }\n                }\n\n                if (oSettings.aaSortingFixed !== null) {\n                    aaSort = oSettings.aaSortingFixed.concat(oSettings.aaSorting);\n                } else {\n                    aaSort = oSettings.aaSorting.slice();\n                }\n\n                /* Apply the required classes to the header */\n                for (i = 0; i < oSettings.aoColumns.length; i++) {\n                    if (oSettings.aoColumns[i].bSortable) {\n                        sClass = oSettings.aoColumns[i].sSortingClass;\n                        iFound = -1;\n                        for (j = 0; j < aaSort.length; j++) {\n                            if (aaSort[j][0] == i) {\n                                sClass = (aaSort[j][1] == \"asc\") ?\n                                    oClasses.sSortAsc : oClasses.sSortDesc;\n                                iFound = j;\n                                break;\n                            }\n                        }\n                        $(oSettings.aoColumns[i].nTh).addClass(sClass);\n\n                        if (oSettings.bJUI) {\n                            /* jQuery UI uses extra markup */\n                            var jqSpan = $(\"span.\" + oClasses.sSortIcon, oSettings.aoColumns[i].nTh);\n                            jqSpan.removeClass(oClasses.sSortJUIAsc + \" \" + oClasses.sSortJUIDesc + \" \" +\n                                oClasses.sSortJUI + \" \" + oClasses.sSortJUIAscAllowed + \" \" + oClasses.sSortJUIDescAllowed);\n\n                            var sSpanClass;\n                            if (iFound == -1) {\n                                sSpanClass = oSettings.aoColumns[i].sSortingClassJUI;\n                            } else if (aaSort[iFound][1] == \"asc\") {\n                                sSpanClass = oClasses.sSortJUIAsc;\n                            } else {\n                                sSpanClass = oClasses.sSortJUIDesc;\n                            }\n\n                            jqSpan.addClass(sSpanClass);\n                        }\n                    } else {\n                        /* No sorting on this column, so add the base class. This will have been assigned by\n\t\t\t\t\t * _fnAddColumn\n\t\t\t\t\t */\n                        $(oSettings.aoColumns[i].nTh).addClass(oSettings.aoColumns[i].sSortingClass);\n                    }\n                }\n\n                /*\n\t\t\t * Apply the required classes to the table body\n\t\t\t * Note that this is given as a feature switch since it can significantly slow down a sort\n\t\t\t * on large data sets (adding and removing of classes is always slow at the best of times..)\n\t\t\t * Further to this, note that this code is admittedly fairly ugly. It could be made a lot\n\t\t\t * simpler using jQuery selectors and add/removeClass, but that is significantly slower\n\t\t\t * (on the order of 5 times slower) - hence the direct DOM manipulation here.\n\t\t\t * Note that for deferred drawing we do use jQuery - the reason being that taking the first\n\t\t\t * row found to see if the whole column needs processed can miss classes since the first\n\t\t\t * column might be new.\n\t\t\t */\n                sClass = oClasses.sSortColumn;\n\n                if (oSettings.oFeatures.bSort && oSettings.oFeatures.bSortClasses) {\n                    var nTds = _fnGetTdNodes(oSettings);\n\n                    /* Determine what the sorting class for each column should be */\n                    var iClass, iTargetCol;\n                    var asClasses = [];\n                    for (i = 0; i < iColumns; i++) {\n                        asClasses.push(\"\");\n                    }\n                    for (i = 0, iClass = 1; i < aaSort.length; i++) {\n                        iTargetCol = parseInt(aaSort[i][0], 10);\n                        asClasses[iTargetCol] = sClass + iClass;\n\n                        if (iClass < 3) {\n                            iClass++;\n                        }\n                    }\n\n                    /* Make changes to the classes for each cell as needed */\n                    var reClass = new RegExp(sClass + \"[123]\");\n                    var sTmpClass, sCurrentClass, sNewClass;\n                    for (i = 0, iLen = nTds.length; i < iLen; i++) {\n                        /* Determine which column we're looking at */\n                        iTargetCol = i % iColumns;\n\n                        /* What is the full list of classes now */\n                        sCurrentClass = nTds[i].className;\n                        /* What sorting class should be applied? */\n                        sNewClass = asClasses[iTargetCol];\n                        /* What would the new full list be if we did a replacement? */\n                        sTmpClass = sCurrentClass.replace(reClass, sNewClass);\n\n                        if (sTmpClass != sCurrentClass) {\n                            /* We changed something */\n                            nTds[i].className = $.trim(sTmpClass);\n                        } else if (sNewClass.length > 0 && sCurrentClass.indexOf(sNewClass) == -1) {\n                            /* We need to add a class */\n                            nTds[i].className = sCurrentClass + \" \" + sNewClass;\n                        }\n                    }\n                }\n            }\n\n\n            /**\n             * Save the state of a table in a cookie such that the page can be reloaded\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnSaveState(oSettings) {\n                if (!oSettings.oFeatures.bStateSave || oSettings.bDestroying) {\n                    return;\n                }\n\n                /* Store the interesting variables */\n                var i, iLen, bInfinite = oSettings.oScroll.bInfinite;\n                var oState = {\n                    \"iCreate\": new Date().getTime(),\n                    \"iStart\": (bInfinite ? 0 : oSettings._iDisplayStart),\n                    \"iEnd\": (bInfinite ? oSettings._iDisplayLength : oSettings._iDisplayEnd),\n                    \"iLength\": oSettings._iDisplayLength,\n                    \"aaSorting\": $.extend(true, [], oSettings.aaSorting),\n                    \"oSearch\": $.extend(true, {}, oSettings.oPreviousSearch),\n                    \"aoSearchCols\": $.extend(true, [], oSettings.aoPreSearchCols),\n                    \"abVisCols\": []\n                };\n\n                for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                    oState.abVisCols.push(oSettings.aoColumns[i].bVisible);\n                }\n\n                _fnCallbackFire(oSettings, \"aoStateSaveParams\", 'stateSaveParams', [oSettings, oState]);\n\n                oSettings.fnStateSave.call(oSettings.oInstance, oSettings, oState);\n            }\n\n\n            /**\n             * Attempt to load a saved table state from a cookie\n             *  @param {object} oSettings dataTables settings object\n             *  @param {object} oInit DataTables init object so we can override settings\n             *  @memberof DataTable#oApi\n             */\n            function _fnLoadState(oSettings, oInit) {\n                if (!oSettings.oFeatures.bStateSave) {\n                    return;\n                }\n\n                var oData = oSettings.fnStateLoad.call(oSettings.oInstance, oSettings);\n                if (!oData) {\n                    return;\n                }\n\n                /* Allow custom and plug-in manipulation functions to alter the saved data set and\n\t\t\t * cancelling of loading by returning false\n\t\t\t */\n                var abStateLoad = _fnCallbackFire(oSettings, 'aoStateLoadParams', 'stateLoadParams', [oSettings, oData]);\n                if ($.inArray(false, abStateLoad) !== -1) {\n                    return;\n                }\n\n                /* Store the saved state so it might be accessed at any time */\n                oSettings.oLoadedState = $.extend(true, {}, oData);\n\n                /* Restore key features */\n                oSettings._iDisplayStart = oData.iStart;\n                oSettings.iInitDisplayStart = oData.iStart;\n                oSettings._iDisplayEnd = oData.iEnd;\n                oSettings._iDisplayLength = oData.iLength;\n                oSettings.aaSorting = oData.aaSorting.slice();\n                oSettings.saved_aaSorting = oData.aaSorting.slice();\n\n                /* Search filtering  */\n                $.extend(oSettings.oPreviousSearch, oData.oSearch);\n                $.extend(true, oSettings.aoPreSearchCols, oData.aoSearchCols);\n\n                /* Column visibility state\n\t\t\t * Pass back visibility settings to the init handler, but to do not here override\n\t\t\t * the init object that the user might have passed in\n\t\t\t */\n                oInit.saved_aoColumns = [];\n                for (var i = 0; i < oData.abVisCols.length; i++) {\n                    oInit.saved_aoColumns[i] = {};\n                    oInit.saved_aoColumns[i].bVisible = oData.abVisCols[i];\n                }\n\n                _fnCallbackFire(oSettings, 'aoStateLoaded', 'stateLoaded', [oSettings, oData]);\n            }\n\n\n            /**\n             * Create a new cookie with a value to store the state of a table\n             *  @param {string} sName name of the cookie to create\n             *  @param {string} sValue the value the cookie should take\n             *  @param {int} iSecs duration of the cookie\n             *  @param {string} sBaseName sName is made up of the base + file name - this is the base\n             *  @param {function} fnCallback User definable function to modify the cookie\n             *  @memberof DataTable#oApi\n             */\n            function _fnCreateCookie(sName, sValue, iSecs, sBaseName, fnCallback) {\n                var date = new Date();\n                date.setTime(date.getTime() + (iSecs * 1000));\n\n                /*\n\t\t\t * Shocking but true - it would appear IE has major issues with having the path not having\n\t\t\t * a trailing slash on it. We need the cookie to be available based on the path, so we\n\t\t\t * have to append the file name to the cookie name. Appalling. Thanks to vex for adding the\n\t\t\t * patch to use at least some of the path\n\t\t\t */\n                var aParts = window.location.pathname.split('/');\n                var sNameFile = sName + '_' + aParts.pop().replace(/[\\/:]/g, \"\").toLowerCase();\n                var sFullCookie, oData;\n\n                if (fnCallback !== null) {\n                    oData = (typeof $.parseJSON === 'function') ?\n                        $.parseJSON(sValue) : eval('(' + sValue + ')');\n                    sFullCookie = fnCallback(sNameFile, oData, date.toGMTString(),\n                        aParts.join('/') + \"/\");\n                } else {\n                    sFullCookie = sNameFile + \"=\" + encodeURIComponent(sValue) +\n                        \"; expires=\" + date.toGMTString() + \"; path=\" + aParts.join('/') + \"/\";\n                }\n\n                /* Are we going to go over the cookie limit of 4KiB? If so, try to delete a cookies\n\t\t\t * belonging to DataTables.\n\t\t\t */\n                var\n                    aCookies = document.cookie.split(';'),\n                    iNewCookieLen = sFullCookie.split(';')[0].length,\n                    aOldCookies = [];\n\n                if (iNewCookieLen + document.cookie.length + 10 > 4096) /* Magic 10 for padding */\n                {\n                    for (var i = 0, iLen = aCookies.length; i < iLen; i++) {\n                        if (aCookies[i].indexOf(sBaseName) != -1) {\n                            /* It's a DataTables cookie, so eval it and check the time stamp */\n                            var aSplitCookie = aCookies[i].split('=');\n                            try {\n                                oData = eval('(' + decodeURIComponent(aSplitCookie[1]) + ')');\n\n                                if (oData && oData.iCreate) {\n                                    aOldCookies.push({\n                                        \"name\": aSplitCookie[0],\n                                        \"time\": oData.iCreate\n                                    });\n                                }\n                            } catch (e) {\n                            }\n                        }\n                    }\n\n                    // Make sure we delete the oldest ones first\n                    aOldCookies.sort(function(a, b) {\n                        return b.time - a.time;\n                    });\n\n                    // Eliminate as many old DataTables cookies as we need to\n                    while (iNewCookieLen + document.cookie.length + 10 > 4096) {\n                        if (aOldCookies.length === 0) {\n                            // Deleted all DT cookies and still not enough space. Can't state save\n                            return;\n                        }\n\n                        var old = aOldCookies.pop();\n                        document.cookie = old.name + \"=; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=\" +\n                            aParts.join('/') + \"/\";\n                    }\n                }\n\n                document.cookie = sFullCookie;\n            }\n\n\n            /**\n             * Read an old cookie to get a cookie with an old table state\n             *  @param {string} sName name of the cookie to read\n             *  @returns {string} contents of the cookie - or null if no cookie with that name found\n             *  @memberof DataTable#oApi\n             */\n            function _fnReadCookie(sName) {\n                var\n                    aParts = window.location.pathname.split('/'),\n                    sNameEQ = sName + '_' + aParts[aParts.length - 1].replace(/[\\/:]/g, \"\").toLowerCase() + '=',\n                    sCookieContents = document.cookie.split(';');\n\n                for (var i = 0; i < sCookieContents.length; i++) {\n                    var c = sCookieContents[i];\n\n                    while (c.charAt(0) == ' ') {\n                        c = c.substring(1, c.length);\n                    }\n\n                    if (c.indexOf(sNameEQ) === 0) {\n                        return decodeURIComponent(c.substring(sNameEQ.length, c.length));\n                    }\n                }\n                return null;\n            }\n\n\n            /**\n             * Return the settings object for a particular table\n             *  @param {node} nTable table we are using as a dataTable\n             *  @returns {object} Settings object - or null if not found\n             *  @memberof DataTable#oApi\n             */\n            function _fnSettingsFromNode(nTable) {\n                for (var i = 0; i < DataTable.settings.length; i++) {\n                    if (DataTable.settings[i].nTable === nTable) {\n                        return DataTable.settings[i];\n                    }\n                }\n\n                return null;\n            }\n\n\n            /**\n             * Return an array with the TR nodes for the table\n             *  @param {object} oSettings dataTables settings object\n             *  @returns {array} TR array\n             *  @memberof DataTable#oApi\n             */\n            function _fnGetTrNodes(oSettings) {\n                var aNodes = [];\n                var aoData = oSettings.aoData;\n                for (var i = 0, iLen = aoData.length; i < iLen; i++) {\n                    if (aoData[i].nTr !== null) {\n                        aNodes.push(aoData[i].nTr);\n                    }\n                }\n                return aNodes;\n            }\n\n\n            /**\n             * Return an flat array with all TD nodes for the table, or row\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} [iIndividualRow] aoData index to get the nodes for - optional\n             *    if not given then the return array will contain all nodes for the table\n             *  @returns {array} TD array\n             *  @memberof DataTable#oApi\n             */\n            function _fnGetTdNodes(oSettings, iIndividualRow) {\n                var anReturn = [];\n                var iCorrector;\n                var anTds, nTd;\n                var iRow, iRows = oSettings.aoData.length,\n                    iColumn, iColumns, oData, sNodeName, iStart = 0, iEnd = iRows;\n\n                /* Allow the collection to be limited to just one row */\n                if (iIndividualRow !== undefined) {\n                    iStart = iIndividualRow;\n                    iEnd = iIndividualRow + 1;\n                }\n\n                for (iRow = iStart; iRow < iEnd; iRow++) {\n                    oData = oSettings.aoData[iRow];\n                    if (oData.nTr !== null) {\n                        /* get the TD child nodes - taking into account text etc nodes */\n                        anTds = [];\n                        nTd = oData.nTr.firstChild;\n                        while (nTd) {\n                            sNodeName = nTd.nodeName.toLowerCase();\n                            if (sNodeName == 'td' || sNodeName == 'th') {\n                                anTds.push(nTd);\n                            }\n                            nTd = nTd.nextSibling;\n                        }\n\n                        iCorrector = 0;\n                        for (iColumn = 0, iColumns = oSettings.aoColumns.length; iColumn < iColumns; iColumn++) {\n                            if (oSettings.aoColumns[iColumn].bVisible) {\n                                anReturn.push(anTds[iColumn - iCorrector]);\n                            } else {\n                                anReturn.push(oData._anHidden[iColumn]);\n                                iCorrector++;\n                            }\n                        }\n                    }\n                }\n\n                return anReturn;\n            }\n\n\n            /**\n             * Log an error message\n             *  @param {object} oSettings dataTables settings object\n             *  @param {int} iLevel log error messages, or display them to the user\n             *  @param {string} sMesg error message\n             *  @memberof DataTable#oApi\n             */\n            function _fnLog(oSettings, iLevel, sMesg) {\n                var sAlert = (oSettings === null) ?\n                    \"DataTables warning: \" + sMesg :\n                    \"DataTables warning (table id = '\" + oSettings.sTableId + \"'): \" + sMesg;\n\n                if (iLevel === 0) {\n                    if (DataTable.ext.sErrMode == 'alert') {\n                        alert(sAlert);\n                    } else {\n                        throw new Error(sAlert);\n                    }\n                    return;\n                } else if (window.console && console.log) {\n                    console.log(sAlert);\n                }\n            }\n\n\n            /**\n             * See if a property is defined on one object, if so assign it to the other object\n             *  @param {object} oRet target object\n             *  @param {object} oSrc source object\n             *  @param {string} sName property\n             *  @param {string} [sMappedName] name to map too - optional, sName used if not given\n             *  @memberof DataTable#oApi\n             */\n            function _fnMap(oRet, oSrc, sName, sMappedName) {\n                if (sMappedName === undefined) {\n                    sMappedName = sName;\n                }\n                if (oSrc[sName] !== undefined) {\n                    oRet[sMappedName] = oSrc[sName];\n                }\n            }\n\n\n            /**\n             * Extend objects - very similar to jQuery.extend, but deep copy objects, and shallow\n             * copy arrays. The reason we need to do this, is that we don't want to deep copy array\n             * init values (such as aaSorting) since the dev wouldn't be able to override them, but\n             * we do want to deep copy arrays.\n             *  @param {object} oOut Object to extend\n             *  @param {object} oExtender Object from which the properties will be applied to oOut\n             *  @returns {object} oOut Reference, just for convenience - oOut === the return.\n             *  @memberof DataTable#oApi\n             *  @todo This doesn't take account of arrays inside the deep copied objects.\n             */\n            function _fnExtend(oOut, oExtender) {\n                var val;\n\n                for (var prop in oExtender) {\n                    if (oExtender.hasOwnProperty(prop)) {\n                        val = oExtender[prop];\n\n                        if (typeof oInit[prop] === 'object' && val !== null && $.isArray(val) === false) {\n                            $.extend(true, oOut[prop], val);\n                        } else {\n                            oOut[prop] = val;\n                        }\n                    }\n                }\n\n                return oOut;\n            }\n\n\n            /**\n             * Bind an event handers to allow a click or return key to activate the callback.\n             * This is good for accessibility since a return on the keyboard will have the\n             * same effect as a click, if the element has focus.\n             *  @param {element} n Element to bind the action to\n             *  @param {object} oData Data object to pass to the triggered function\n             *  @param {function} fn Callback function for when the event is triggered\n             *  @memberof DataTable#oApi\n             */\n            function _fnBindAction(n, oData, fn) {\n                $(n)\n                    .bind('click.DT', oData, function(e) {\n                        n.blur(); // Remove focus outline for mouse users\n                        fn(e);\n                    })\n                    .bind('keypress.DT', oData, function(e) {\n                        if (e.which === 13) {\n                            fn(e);\n                        }\n                    })\n                    .bind('selectstart.DT', function() {\n                        /* Take the brutal approach to cancelling text selection */\n                        return false;\n                    });\n            }\n\n\n            /**\n             * Register a callback function. Easily allows a callback function to be added to\n             * an array store of callback functions that can then all be called together.\n             *  @param {object} oSettings dataTables settings object\n             *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n             *  @param {function} fn Function to be called back\n             *  @param {string} sName Identifying name for the callback (i.e. a label)\n             *  @memberof DataTable#oApi\n             */\n            function _fnCallbackReg(oSettings, sStore, fn, sName) {\n                if (fn) {\n                    oSettings[sStore].push({\n                        \"fn\": fn,\n                        \"sName\": sName\n                    });\n                }\n            }\n\n\n            /**\n             * Fire callback functions and trigger events. Note that the loop over the callback\n             * array store is done backwards! Further note that you do not want to fire off triggers\n             * in time sensitive applications (for example cell creation) as its slow.\n             *  @param {object} oSettings dataTables settings object\n             *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n             *  @param {string} sTrigger Name of the jQuery custom event to trigger. If null no trigger\n             *    is fired\n             *  @param {array} aArgs Array of arguments to pass to the callback function / trigger\n             *  @memberof DataTable#oApi\n             */\n            function _fnCallbackFire(oSettings, sStore, sTrigger, aArgs) {\n                var aoStore = oSettings[sStore];\n                var aRet = [];\n\n                for (var i = aoStore.length - 1; i >= 0; i--) {\n                    aRet.push(aoStore[i].fn.apply(oSettings.oInstance, aArgs));\n                }\n\n                if (sTrigger !== null) {\n                    $(oSettings.oInstance).trigger(sTrigger, aArgs);\n                }\n\n                return aRet;\n            }\n\n\n            /**\n             * JSON stringify. If JSON.stringify it provided by the browser, json2.js or any other\n             * library, then we use that as it is fast, safe and accurate. If the function isn't\n             * available then we need to built it ourselves - the inspiration for this function comes\n             * from Craig Buckler ( http://www.sitepoint.com/javascript-json-serialization/ ). It is\n             * not perfect and absolutely should not be used as a replacement to json2.js - but it does\n             * do what we need, without requiring a dependency for DataTables.\n             *  @param {object} o JSON object to be converted\n             *  @returns {string} JSON string\n             *  @memberof DataTable#oApi\n             */\n            var _fnJsonString = (window.JSON) ? JSON.stringify : function(o) {\n                /* Not an object or array */\n                var sType = typeof o;\n                if (sType !== \"object\" || o === null) {\n                    // simple data type\n                    if (sType === \"string\") {\n                        o = '\"' + o + '\"';\n                    }\n                    return o + \"\";\n                }\n\n                /* If object or array, need to recurse over it */\n                var\n                    sProp, mValue,\n                    json = [],\n                    bArr = $.isArray(o);\n\n                for (sProp in o) {\n                    mValue = o[sProp];\n                    sType = typeof mValue;\n\n                    if (sType === \"string\") {\n                        mValue = '\"' + mValue + '\"';\n                    } else if (sType === \"object\" && mValue !== null) {\n                        mValue = _fnJsonString(mValue);\n                    }\n\n                    json.push((bArr ? \"\" : '\"' + sProp + '\":') + mValue);\n                }\n\n                return (bArr ? \"[\" : \"{\") + json + (bArr ? \"]\" : \"}\");\n            };\n\n\n            /**\n             * From some browsers (specifically IE6/7) we need special handling to work around browser\n             * bugs - this function is used to detect when these workarounds are needed.\n             *  @param {object} oSettings dataTables settings object\n             *  @memberof DataTable#oApi\n             */\n            function _fnBrowserDetect(oSettings) {\n                /* IE6/7 will oversize a width 100% element inside a scrolling element, to include the\n\t\t\t * width of the scrollbar, while other browsers ensure the inner element is contained\n\t\t\t * without forcing scrolling\n\t\t\t */\n                var n = $(\n                    '<div style=\"position:absolute; top:0; left:0; height:1px; width:1px; overflow:hidden\">' +\n                    '<div style=\"position:absolute; top:1px; left:1px; width:100px; overflow:scroll;\">' +\n                    '<div id=\"DT_BrowserTest\" style=\"width:100%; height:10px;\"></div>' +\n                    '</div>' +\n                    '</div>')[0];\n\n                document.body.appendChild(n);\n                oSettings.oBrowser.bScrollOversize = $('#DT_BrowserTest', n)[0].offsetWidth === 100 ? true : false;\n                document.body.removeChild(n);\n            }\n\n\n            /**\n             * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n             * return the resulting jQuery object.\n             *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n             *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n             *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n             *    criterion (\"applied\") or all TR elements (i.e. no filter).\n             *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n             *    Can be either 'current', whereby the current sorting of the table is used, or\n             *    'original' whereby the original order the data was read into the table is used.\n             *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n             *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n             *    'current' and filter is 'applied', regardless of what they might be given as.\n             *  @returns {object} jQuery object, filtered by the given selector.\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *\n             *      // Highlight every second row\n             *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n             *    } );\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *\n             *      // Filter to rows with 'Webkit' in them, add a background colour and then\n             *      // remove the filter, thus highlighting the 'Webkit' rows only.\n             *      oTable.fnFilter('Webkit');\n             *      oTable.$('tr', {\"filter\": \"applied\"}).css('backgroundColor', 'blue');\n             *      oTable.fnFilter('');\n             *    } );\n             */\n            this.$ = function(sSelector, oOpts) {\n                var i, iLen, a = [], tr;\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n                var aoData = oSettings.aoData;\n                var aiDisplay = oSettings.aiDisplay;\n                var aiDisplayMaster = oSettings.aiDisplayMaster;\n\n                if (!oOpts) {\n                    oOpts = {};\n                }\n\n                oOpts = $.extend({}, {\n                    \"filter\": \"none\", // applied\n                    \"order\": \"current\", // \"original\"\n                    \"page\": \"all\" // current\n                }, oOpts);\n\n                // Current page implies that order=current and fitler=applied, since it is fairly\n                // senseless otherwise\n                if (oOpts.page == 'current') {\n                    for (i = oSettings._iDisplayStart, iLen = oSettings.fnDisplayEnd(); i < iLen; i++) {\n                        tr = aoData[aiDisplay[i]].nTr;\n                        if (tr) {\n                            a.push(tr);\n                        }\n                    }\n                } else if (oOpts.order == \"current\" && oOpts.filter == \"none\") {\n                    for (i = 0, iLen = aiDisplayMaster.length; i < iLen; i++) {\n                        tr = aoData[aiDisplayMaster[i]].nTr;\n                        if (tr) {\n                            a.push(tr);\n                        }\n                    }\n                } else if (oOpts.order == \"current\" && oOpts.filter == \"applied\") {\n                    for (i = 0, iLen = aiDisplay.length; i < iLen; i++) {\n                        tr = aoData[aiDisplay[i]].nTr;\n                        if (tr) {\n                            a.push(tr);\n                        }\n                    }\n                } else if (oOpts.order == \"original\" && oOpts.filter == \"none\") {\n                    for (i = 0, iLen = aoData.length; i < iLen; i++) {\n                        tr = aoData[i].nTr;\n                        if (tr) {\n                            a.push(tr);\n                        }\n                    }\n                } else if (oOpts.order == \"original\" && oOpts.filter == \"applied\") {\n                    for (i = 0, iLen = aoData.length; i < iLen; i++) {\n                        tr = aoData[i].nTr;\n                        if ($.inArray(i, aiDisplay) !== -1 && tr) {\n                            a.push(tr);\n                        }\n                    }\n                } else {\n                    _fnLog(oSettings, 1, \"Unknown selection options\");\n                }\n\n                /* We need to filter on the TR elements and also 'find' in their descendants\n\t\t\t * to make the selector act like it would in a full table - so we need\n\t\t\t * to build both results and then combine them together\n\t\t\t */\n                var jqA = $(a);\n                var jqTRs = jqA.filter(sSelector);\n                var jqDescendants = jqA.find(sSelector);\n\n                return $([].concat($.makeArray(jqTRs), $.makeArray(jqDescendants)));\n            };\n\n\n            /**\n             * Almost identical to $ in operation, but in this case returns the data for the matched\n             * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n             * rather than any descendants, so the data can be obtained for the row/cell. If matching\n             * rows are found, the data returned is the original data array/object that was used to\n             * create the row (or a generated array if from a DOM source).\n             *\n             * This method is often useful in-combination with $ where both functions are given the\n             * same parameters and the array indexes will match identically.\n             *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n             *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n             *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n             *    criterion (\"applied\") or all elements (i.e. no filter).\n             *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n             *    Can be either 'current', whereby the current sorting of the table is used, or\n             *    'original' whereby the original order the data was read into the table is used.\n             *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n             *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n             *    'current' and filter is 'applied', regardless of what they might be given as.\n             *  @returns {array} Data for the matched elements. If any elements, as a result of the\n             *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n             *    entry in the array.\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *\n             *      // Get the data from the first row in the table\n             *      var data = oTable._('tr:first');\n             *\n             *      // Do something useful with the data\n             *      alert( \"First cell is: \"+data[0] );\n             *    } );\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *\n             *      // Filter to 'Webkit' and get all data for\n             *      oTable.fnFilter('Webkit');\n             *      var data = oTable._('tr', {\"filter\": \"applied\"});\n             *\n             *      // Do something with the data\n             *      alert( data.length+\" rows matched the filter\" );\n             *    } );\n             */\n            this._ = function(sSelector, oOpts) {\n                var aOut = [];\n                var i, iLen, iIndex;\n                var aTrs = this.$(sSelector, oOpts);\n\n                for (i = 0, iLen = aTrs.length; i < iLen; i++) {\n                    aOut.push(this.fnGetData(aTrs[i]));\n                }\n\n                return aOut;\n            };\n\n\n            /**\n             * Add a single new row or multiple rows of data to the table. Please note\n             * that this is suitable for client-side processing only - if you are using\n             * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n             * must add it to the data source, i.e. the server-side, through an Ajax call.\n             *  @param {array|object} mData The data to be added to the table. This can be:\n             *    <ul>\n             *      <li>1D array of data - add a single row with the data provided</li>\n             *      <li>2D array of arrays - add multiple rows in a single call</li>\n             *      <li>object - data object when using <i>mData</i></li>\n             *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n             *    </ul>\n             *  @param {bool} [bRedraw=true] redraw the table or not\n             *  @returns {array} An array of integers, representing the list of indexes in\n             *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n             *    the table.\n             *  @dtopt API\n             *\n             *  @example\n             *    // Global var for counter\n             *    var giCount = 2;\n             *\n             *    $(document).ready(function() {\n             *      $('#example').dataTable();\n             *    } );\n             *\n             *    function fnClickAddRow() {\n             *      $('#example').dataTable().fnAddData( [\n             *        giCount+\".1\",\n             *        giCount+\".2\",\n             *        giCount+\".3\",\n             *        giCount+\".4\" ]\n             *      );\n             *\n             *      giCount++;\n             *    }\n             */\n            this.fnAddData = function(mData, bRedraw) {\n                if (mData.length === 0) {\n                    return [];\n                }\n\n                var aiReturn = [];\n                var iTest;\n\n                /* Find settings from table node */\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n\n                /* Check if we want to add multiple rows or not */\n                if (typeof mData[0] === \"object\" && mData[0] !== null) {\n                    for (var i = 0; i < mData.length; i++) {\n                        iTest = _fnAddData(oSettings, mData[i]);\n                        if (iTest == -1) {\n                            return aiReturn;\n                        }\n                        aiReturn.push(iTest);\n                    }\n                } else {\n                    iTest = _fnAddData(oSettings, mData);\n                    if (iTest == -1) {\n                        return aiReturn;\n                    }\n                    aiReturn.push(iTest);\n                }\n\n                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n\n                if (bRedraw === undefined || bRedraw) {\n                    _fnReDraw(oSettings);\n                }\n                return aiReturn;\n            };\n\n\n            /**\n             * This function will make DataTables recalculate the column sizes, based on the data\n             * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n             * through the sWidth parameter). This can be useful when the width of the table's\n             * parent element changes (for example a window resize).\n             *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable( {\n             *        \"sScrollY\": \"200px\",\n             *        \"bPaginate\": false\n             *      } );\n             *\n             *      $(window).bind('resize', function () {\n             *        oTable.fnAdjustColumnSizing();\n             *      } );\n             *    } );\n             */\n            this.fnAdjustColumnSizing = function(bRedraw) {\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n                _fnAdjustColumnSizing(oSettings);\n\n                if (bRedraw === undefined || bRedraw) {\n                    this.fnDraw(false);\n                } else if (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") {\n                    /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n                    this.oApi._fnScrollDraw(oSettings);\n                }\n            };\n\n\n            /**\n             * Quickly and simply clear a table\n             *  @param {bool} [bRedraw=true] redraw the table or not\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *\n             *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n             *      oTable.fnClearTable();\n             *    } );\n             */\n            this.fnClearTable = function(bRedraw) {\n                /* Find settings from table node */\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n                _fnClearTable(oSettings);\n\n                if (bRedraw === undefined || bRedraw) {\n                    _fnDraw(oSettings);\n                }\n            };\n\n\n            /**\n             * The exact opposite of 'opening' a row, this function will close any rows which\n             * are currently 'open'.\n             *  @param {node} nTr the table row to 'close'\n             *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable;\n             *\n             *      // 'open' an information row when a row is clicked on\n             *      $('#example tbody tr').click( function () {\n             *        if ( oTable.fnIsOpen(this) ) {\n             *          oTable.fnClose( this );\n             *        } else {\n             *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n             *        }\n             *      } );\n             *\n             *      oTable = $('#example').dataTable();\n             *    } );\n             */\n            this.fnClose = function(nTr) {\n                /* Find settings from table node */\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n\n                for (var i = 0; i < oSettings.aoOpenRows.length; i++) {\n                    if (oSettings.aoOpenRows[i].nParent == nTr) {\n                        var nTrParent = oSettings.aoOpenRows[i].nTr.parentNode;\n                        if (nTrParent) {\n                            /* Remove it if it is currently on display */\n                            nTrParent.removeChild(oSettings.aoOpenRows[i].nTr);\n                        }\n                        oSettings.aoOpenRows.splice(i, 1);\n                        return 0;\n                    }\n                }\n                return 1;\n            };\n\n\n            /**\n             * Remove a row for the table\n             *  @param {mixed} mTarget The index of the row from aoData to be deleted, or\n             *    the TR element you want to delete\n             *  @param {function|null} [fnCallBack] Callback function\n             *  @param {bool} [bRedraw=true] Redraw the table or not\n             *  @returns {array} The row that was deleted\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *\n             *      // Immediately remove the first row\n             *      oTable.fnDeleteRow( 0 );\n             *    } );\n             */\n            this.fnDeleteRow = function(mTarget, fnCallBack, bRedraw) {\n                /* Find settings from table node */\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n                var i, iLen, iAODataIndex;\n\n                iAODataIndex = (typeof mTarget === 'object') ?\n                    _fnNodeToDataIndex(oSettings, mTarget) : mTarget;\n\n                /* Return the data array from this row */\n                var oData = oSettings.aoData.splice(iAODataIndex, 1);\n\n                /* Update the _DT_RowIndex parameter */\n                for (i = 0, iLen = oSettings.aoData.length; i < iLen; i++) {\n                    if (oSettings.aoData[i].nTr !== null) {\n                        oSettings.aoData[i].nTr._DT_RowIndex = i;\n                    }\n                }\n\n                /* Remove the target row from the search array */\n                var iDisplayIndex = $.inArray(iAODataIndex, oSettings.aiDisplay);\n                oSettings.asDataSearch.splice(iDisplayIndex, 1);\n\n                /* Delete from the display arrays */\n                _fnDeleteIndex(oSettings.aiDisplayMaster, iAODataIndex);\n                _fnDeleteIndex(oSettings.aiDisplay, iAODataIndex);\n\n                /* If there is a user callback function - call it */\n                if (typeof fnCallBack === \"function\") {\n                    fnCallBack.call(this, oSettings, oData);\n                }\n\n                /* Check for an 'overflow' they case for displaying the table */\n                if (oSettings._iDisplayStart >= oSettings.fnRecordsDisplay()) {\n                    oSettings._iDisplayStart -= oSettings._iDisplayLength;\n                    if (oSettings._iDisplayStart < 0) {\n                        oSettings._iDisplayStart = 0;\n                    }\n                }\n\n                if (bRedraw === undefined || bRedraw) {\n                    _fnCalculateEnd(oSettings);\n                    _fnDraw(oSettings);\n                }\n\n                return oData;\n            };\n\n\n            /**\n             * Restore the table to it's original state in the DOM by removing all of DataTables\n             * enhancements, alterations to the DOM structure of the table and event listeners.\n             *  @param {boolean} [bRemove=false] Completely remove the table from the DOM\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n             *      var oTable = $('#example').dataTable();\n             *      oTable.fnDestroy();\n             *    } );\n             */\n            this.fnDestroy = function(bRemove) {\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n                var nOrig = oSettings.nTableWrapper.parentNode;\n                var nBody = oSettings.nTBody;\n                var i, iLen;\n\n                bRemove = (bRemove === undefined) ? false : bRemove;\n\n                /* Flag to note that the table is currently being destroyed - no action should be taken */\n                oSettings.bDestroying = true;\n\n                /* Fire off the destroy callbacks for plug-ins etc */\n                _fnCallbackFire(oSettings, \"aoDestroyCallback\", \"destroy\", [oSettings]);\n\n                /* If the table is not being removed, restore the hidden columns */\n                if (!bRemove) {\n                    for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                        if (oSettings.aoColumns[i].bVisible === false) {\n                            this.fnSetColumnVis(i, true);\n                        }\n                    }\n                }\n\n                /* Blitz all DT events */\n                $(oSettings.nTableWrapper).find('*').andSelf().unbind('.DT');\n\n                /* If there is an 'empty' indicator row, remove it */\n                $('tbody>tr>td.' + oSettings.oClasses.sRowEmpty, oSettings.nTable).parent().remove();\n\n                /* When scrolling we had to break the table up - restore it */\n                if (oSettings.nTable != oSettings.nTHead.parentNode) {\n                    $(oSettings.nTable).children('thead').remove();\n                    oSettings.nTable.appendChild(oSettings.nTHead);\n                }\n\n                if (oSettings.nTFoot && oSettings.nTable != oSettings.nTFoot.parentNode) {\n                    $(oSettings.nTable).children('tfoot').remove();\n                    oSettings.nTable.appendChild(oSettings.nTFoot);\n                }\n\n                /* Remove the DataTables generated nodes, events and classes */\n                oSettings.nTable.parentNode.removeChild(oSettings.nTable);\n                $(oSettings.nTableWrapper).remove();\n\n                oSettings.aaSorting = [];\n                oSettings.aaSortingFixed = [];\n                _fnSortingClasses(oSettings);\n\n                $(_fnGetTrNodes(oSettings)).removeClass(oSettings.asStripeClasses.join(' '));\n\n                $('th, td', oSettings.nTHead).removeClass([\n                    oSettings.oClasses.sSortable,\n                    oSettings.oClasses.sSortableAsc,\n                    oSettings.oClasses.sSortableDesc,\n                    oSettings.oClasses.sSortableNone].join(' ')\n                );\n                if (oSettings.bJUI) {\n                    $('th span.' + oSettings.oClasses.sSortIcon\n                        + ', td span.' + oSettings.oClasses.sSortIcon, oSettings.nTHead).remove();\n\n                    $('th, td', oSettings.nTHead).each(function() {\n                        var jqWrapper = $('div.' + oSettings.oClasses.sSortJUIWrapper, this);\n                        var kids = jqWrapper.contents();\n                        $(this).append(kids);\n                        jqWrapper.remove();\n                    });\n                }\n\n                /* Add the TR elements back into the table in their original order */\n                if (!bRemove && oSettings.nTableReinsertBefore) {\n                    nOrig.insertBefore(oSettings.nTable, oSettings.nTableReinsertBefore);\n                } else if (!bRemove) {\n                    nOrig.appendChild(oSettings.nTable);\n                }\n\n                for (i = 0, iLen = oSettings.aoData.length; i < iLen; i++) {\n                    if (oSettings.aoData[i].nTr !== null) {\n                        nBody.appendChild(oSettings.aoData[i].nTr);\n                    }\n                }\n\n                /* Restore the width of the original table */\n                if (oSettings.oFeatures.bAutoWidth === true) {\n                    oSettings.nTable.style.width = _fnStringToCss(oSettings.sDestroyWidth);\n                }\n\n                /* If the were originally stripe classes - then we add them back here. Note\n\t\t\t * this is not fool proof (for example if not all rows had stripe classes - but\n\t\t\t * it's a good effort without getting carried away\n\t\t\t */\n                iLen = oSettings.asDestroyStripes.length;\n                if (iLen) {\n                    var anRows = $(nBody).children('tr');\n                    for (i = 0; i < iLen; i++) {\n                        anRows.filter(':nth-child(' + iLen + 'n + ' + i + ')').addClass(oSettings.asDestroyStripes[i]);\n                    }\n                }\n\n                /* Remove the settings object from the settings array */\n                for (i = 0, iLen = DataTable.settings.length; i < iLen; i++) {\n                    if (DataTable.settings[i] == oSettings) {\n                        DataTable.settings.splice(i, 1);\n                    }\n                }\n\n                /* End it all */\n                oSettings = null;\n                oInit = null;\n            };\n\n\n            /**\n             * Redraw the table\n             *  @param {bool} [bComplete=true] Re-filter and resort (if enabled) the table before the draw.\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *\n             *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n             *      oTable.fnDraw();\n             *    } );\n             */\n            this.fnDraw = function(bComplete) {\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n                if (bComplete === false) {\n                    _fnCalculateEnd(oSettings);\n                    _fnDraw(oSettings);\n                } else {\n                    _fnReDraw(oSettings);\n                }\n            };\n\n\n            /**\n             * Filter the input based on data\n             *  @param {string} sInput String to filter the table on\n             *  @param {int|null} [iColumn] Column to limit filtering to\n             *  @param {bool} [bRegex=false] Treat as regular expression or not\n             *  @param {bool} [bSmart=true] Perform smart filtering or not\n             *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n             *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *\n             *      // Sometime later - filter...\n             *      oTable.fnFilter( 'test string' );\n             *    } );\n             */\n            this.fnFilter = function(sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n\n                if (!oSettings.oFeatures.bFilter) {\n                    return;\n                }\n\n                if (bRegex === undefined || bRegex === null) {\n                    bRegex = false;\n                }\n\n                if (bSmart === undefined || bSmart === null) {\n                    bSmart = true;\n                }\n\n                if (bShowGlobal === undefined || bShowGlobal === null) {\n                    bShowGlobal = true;\n                }\n\n                if (bCaseInsensitive === undefined || bCaseInsensitive === null) {\n                    bCaseInsensitive = true;\n                }\n\n                if (iColumn === undefined || iColumn === null) {\n                    /* Global filter */\n                    _fnFilterComplete(oSettings, {\n                        \"sSearch\": sInput + \"\",\n                        \"bRegex\": bRegex,\n                        \"bSmart\": bSmart,\n                        \"bCaseInsensitive\": bCaseInsensitive\n                    }, 1);\n\n                    if (bShowGlobal && oSettings.aanFeatures.f) {\n                        var n = oSettings.aanFeatures.f;\n                        for (var i = 0, iLen = n.length; i < iLen; i++) {\n                            // IE9 throws an 'unknown error' if document.activeElement is used\n                            // inside an iframe or frame...\n                            try {\n                                if (n[i]._DT_Input != document.activeElement) {\n                                    $(n[i]._DT_Input).val(sInput);\n                                }\n                            } catch (e) {\n                                $(n[i]._DT_Input).val(sInput);\n                            }\n                        }\n                    }\n                } else {\n                    /* Single column filter */\n                    $.extend(oSettings.aoPreSearchCols[iColumn], {\n                        \"sSearch\": sInput + \"\",\n                        \"bRegex\": bRegex,\n                        \"bSmart\": bSmart,\n                        \"bCaseInsensitive\": bCaseInsensitive\n                    });\n                    _fnFilterComplete(oSettings, oSettings.oPreviousSearch, 1);\n                }\n            };\n\n\n            /**\n             * Get the data for the whole table, an individual row or an individual cell based on the\n             * provided parameters.\n             *  @param {int|node} [mRow] A TR row node, TD/TH cell node or an integer. If given as\n             *    a TR node then the data source for the whole row will be returned. If given as a\n             *    TD/TH cell node then iCol will be automatically calculated and the data for the\n             *    cell returned. If given as an integer, then this is treated as the aoData internal\n             *    data index for the row (see fnGetPosition) and the data for that row used.\n             *  @param {int} [iCol] Optional column index that you want the data of.\n             *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n             *    returned. If mRow is defined, just data for that row, and is iCol is\n             *    defined, only data for the designated cell is returned.\n             *  @dtopt API\n             *\n             *  @example\n             *    // Row data\n             *    $(document).ready(function() {\n             *      oTable = $('#example').dataTable();\n             *\n             *      oTable.$('tr').click( function () {\n             *        var data = oTable.fnGetData( this );\n             *        // ... do something with the array / object of data for the row\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Individual cell data\n             *    $(document).ready(function() {\n             *      oTable = $('#example').dataTable();\n             *\n             *      oTable.$('td').click( function () {\n             *        var sData = oTable.fnGetData( this );\n             *        alert( 'The cell clicked on had the value of '+sData );\n             *      } );\n             *    } );\n             */\n            this.fnGetData = function(mRow, iCol) {\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n\n                if (mRow !== undefined) {\n                    var iRow = mRow;\n                    if (typeof mRow === 'object') {\n                        var sNode = mRow.nodeName.toLowerCase();\n                        if (sNode === \"tr\") {\n                            iRow = _fnNodeToDataIndex(oSettings, mRow);\n                        } else if (sNode === \"td\") {\n                            iRow = _fnNodeToDataIndex(oSettings, mRow.parentNode);\n                            iCol = _fnNodeToColumnIndex(oSettings, iRow, mRow);\n                        }\n                    }\n\n                    if (iCol !== undefined) {\n                        return _fnGetCellData(oSettings, iRow, iCol, '');\n                    }\n                    return (oSettings.aoData[iRow] !== undefined) ?\n                        oSettings.aoData[iRow]._aData : null;\n                }\n                return _fnGetDataMaster(oSettings);\n            };\n\n\n            /**\n             * Get an array of the TR nodes that are used in the table's body. Note that you will\n             * typically want to use the '$' API method in preference to this as it is more\n             * flexible.\n             *  @param {int} [iRow] Optional row index for the TR element you want\n             *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n             *    in the table's body, or iRow is defined, just the TR element requested.\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *\n             *      // Get the nodes from the table\n             *      var nNodes = oTable.fnGetNodes( );\n             *    } );\n             */\n            this.fnGetNodes = function(iRow) {\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n\n                if (iRow !== undefined) {\n                    return (oSettings.aoData[iRow] !== undefined) ?\n                        oSettings.aoData[iRow].nTr : null;\n                }\n                return _fnGetTrNodes(oSettings);\n            };\n\n\n            /**\n             * Get the array indexes of a particular cell from it's DOM element\n             * and column index including hidden columns\n             *  @param {node} nNode this can either be a TR, TD or TH in the table's body\n             *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n             *    if given as a cell, an array of [row index, column index (visible),\n             *    column index (all)] is given.\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      $('#example tbody td').click( function () {\n             *        // Get the position of the current data from the node\n             *        var aPos = oTable.fnGetPosition( this );\n             *\n             *        // Get the data array for this row\n             *        var aData = oTable.fnGetData( aPos[0] );\n             *\n             *        // Update the data array and return the value\n             *        aData[ aPos[1] ] = 'clicked';\n             *        this.innerHTML = 'clicked';\n             *      } );\n             *\n             *      // Init DataTables\n             *      oTable = $('#example').dataTable();\n             *    } );\n             */\n            this.fnGetPosition = function(nNode) {\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n                var sNodeName = nNode.nodeName.toUpperCase();\n\n                if (sNodeName == \"TR\") {\n                    return _fnNodeToDataIndex(oSettings, nNode);\n                } else if (sNodeName == \"TD\" || sNodeName == \"TH\") {\n                    var iDataIndex = _fnNodeToDataIndex(oSettings, nNode.parentNode);\n                    var iColumnIndex = _fnNodeToColumnIndex(oSettings, iDataIndex, nNode);\n                    return [iDataIndex, _fnColumnIndexToVisible(oSettings, iColumnIndex), iColumnIndex];\n                }\n                return null;\n            };\n\n\n            /**\n             * Check to see if a row is 'open' or not.\n             *  @param {node} nTr the table row to check\n             *  @returns {boolean} true if the row is currently open, false otherwise\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable;\n             *\n             *      // 'open' an information row when a row is clicked on\n             *      $('#example tbody tr').click( function () {\n             *        if ( oTable.fnIsOpen(this) ) {\n             *          oTable.fnClose( this );\n             *        } else {\n             *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n             *        }\n             *      } );\n             *\n             *      oTable = $('#example').dataTable();\n             *    } );\n             */\n            this.fnIsOpen = function(nTr) {\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n                var aoOpenRows = oSettings.aoOpenRows;\n\n                for (var i = 0; i < oSettings.aoOpenRows.length; i++) {\n                    if (oSettings.aoOpenRows[i].nParent == nTr) {\n                        return true;\n                    }\n                }\n                return false;\n            };\n\n\n            /**\n             * This function will place a new row directly after a row which is currently\n             * on display on the page, with the HTML contents that is passed into the\n             * function. This can be used, for example, to ask for confirmation that a\n             * particular record should be deleted.\n             *  @param {node} nTr The table row to 'open'\n             *  @param {string|node|jQuery} mHtml The HTML to put into the row\n             *  @param {string} sClass Class to give the new TD cell\n             *  @returns {node} The row opened. Note that if the table row passed in as the\n             *    first parameter, is not found in the table, this method will silently\n             *    return.\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable;\n             *\n             *      // 'open' an information row when a row is clicked on\n             *      $('#example tbody tr').click( function () {\n             *        if ( oTable.fnIsOpen(this) ) {\n             *          oTable.fnClose( this );\n             *        } else {\n             *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n             *        }\n             *      } );\n             *\n             *      oTable = $('#example').dataTable();\n             *    } );\n             */\n            this.fnOpen = function(nTr, mHtml, sClass) {\n                /* Find settings from table node */\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n\n                /* Check that the row given is in the table */\n                var nTableRows = _fnGetTrNodes(oSettings);\n                if ($.inArray(nTr, nTableRows) === -1) {\n                    return;\n                }\n\n                /* the old open one if there is one */\n                this.fnClose(nTr);\n\n                var nNewRow = document.createElement(\"tr\");\n                var nNewCell = document.createElement(\"td\");\n                nNewRow.appendChild(nNewCell);\n                nNewCell.className = sClass;\n                nNewCell.colSpan = _fnVisbleColumns(oSettings);\n\n                if (typeof mHtml === \"string\") {\n                    nNewCell.innerHTML = mHtml;\n                } else {\n                    $(nNewCell).html(mHtml);\n                }\n\n                /* If the nTr isn't on the page at the moment - then we don't insert at the moment */\n                var nTrs = $('tr', oSettings.nTBody);\n                if ($.inArray(nTr, nTrs) != -1) {\n                    $(nNewRow).insertAfter(nTr);\n                }\n\n                oSettings.aoOpenRows.push({\n                    \"nTr\": nNewRow,\n                    \"nParent\": nTr\n                });\n\n                return nNewRow;\n            };\n\n\n            /**\n             * Change the pagination - provides the internal logic for pagination in a simple API\n             * function. With this function you can have a DataTables table go to the next,\n             * previous, first or last pages.\n             *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n             *    or page number to jump to (integer), note that page 0 is the first page.\n             *  @param {bool} [bRedraw=true] Redraw the table or not\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *      oTable.fnPageChange( 'next' );\n             *    } );\n             */\n            this.fnPageChange = function(mAction, bRedraw) {\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n                _fnPageChange(oSettings, mAction);\n                _fnCalculateEnd(oSettings);\n\n                if (bRedraw === undefined || bRedraw) {\n                    _fnDraw(oSettings);\n                }\n            };\n\n\n            /**\n             * Show a particular column\n             *  @param {int} iCol The column whose display should be changed\n             *  @param {bool} bShow Show (true) or hide (false) the column\n             *  @param {bool} [bRedraw=true] Redraw the table or not\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *\n             *      // Hide the second column after initialisation\n             *      oTable.fnSetColumnVis( 1, false );\n             *    } );\n             */\n            this.fnSetColumnVis = function(iCol, bShow, bRedraw) {\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n                var i, iLen;\n                var aoColumns = oSettings.aoColumns;\n                var aoData = oSettings.aoData;\n                var nTd, bAppend, iBefore;\n\n                /* No point in doing anything if we are requesting what is already true */\n                if (aoColumns[iCol].bVisible == bShow) {\n                    return;\n                }\n\n                /* Show the column */\n                if (bShow) {\n                    var iInsert = 0;\n                    for (i = 0; i < iCol; i++) {\n                        if (aoColumns[i].bVisible) {\n                            iInsert++;\n                        }\n                    }\n\n                    /* Need to decide if we should use appendChild or insertBefore */\n                    bAppend = (iInsert >= _fnVisbleColumns(oSettings));\n\n                    /* Which coloumn should we be inserting before? */\n                    if (!bAppend) {\n                        for (i = iCol; i < aoColumns.length; i++) {\n                            if (aoColumns[i].bVisible) {\n                                iBefore = i;\n                                break;\n                            }\n                        }\n                    }\n\n                    for (i = 0, iLen = aoData.length; i < iLen; i++) {\n                        if (aoData[i].nTr !== null) {\n                            if (bAppend) {\n                                aoData[i].nTr.appendChild(\n                                    aoData[i]._anHidden[iCol]\n                                );\n                            } else {\n                                aoData[i].nTr.insertBefore(\n                                    aoData[i]._anHidden[iCol],\n                                    _fnGetTdNodes(oSettings, i)[iBefore]);\n                            }\n                        }\n                    }\n                } else {\n                    /* Remove a column from display */\n                    for (i = 0, iLen = aoData.length; i < iLen; i++) {\n                        if (aoData[i].nTr !== null) {\n                            nTd = _fnGetTdNodes(oSettings, i)[iCol];\n                            aoData[i]._anHidden[iCol] = nTd;\n                            nTd.parentNode.removeChild(nTd);\n                        }\n                    }\n                }\n\n                /* Clear to set the visible flag */\n                aoColumns[iCol].bVisible = bShow;\n\n                /* Redraw the header and footer based on the new column visibility */\n                _fnDrawHead(oSettings, oSettings.aoHeader);\n                if (oSettings.nTFoot) {\n                    _fnDrawHead(oSettings, oSettings.aoFooter);\n                }\n\n                /* If there are any 'open' rows, then we need to alter the colspan for this col change */\n                for (i = 0, iLen = oSettings.aoOpenRows.length; i < iLen; i++) {\n                    oSettings.aoOpenRows[i].nTr.colSpan = _fnVisbleColumns(oSettings);\n                }\n\n                /* Do a redraw incase anything depending on the table columns needs it\n\t\t\t * (built-in: scrolling)\n\t\t\t */\n                if (bRedraw === undefined || bRedraw) {\n                    _fnAdjustColumnSizing(oSettings);\n                    _fnDraw(oSettings);\n                }\n\n                _fnSaveState(oSettings);\n            };\n\n\n            /**\n             * Get the settings for a particular table for external manipulation\n             *  @returns {object} DataTables settings object. See\n             *    {@link DataTable.models.oSettings}\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *      var oSettings = oTable.fnSettings();\n             *\n             *      // Show an example parameter from the settings\n             *      alert( oSettings._iDisplayStart );\n             *    } );\n             */\n            this.fnSettings = function() {\n                return _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n            };\n\n\n            /**\n             * Sort the table by a particular column\n             *  @param {int} iCol the data index to sort on. Note that this will not match the\n             *    'display index' if you have hidden data entries\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *\n             *      // Sort immediately with columns 0 and 1\n             *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n             *    } );\n             */\n            this.fnSort = function(aaSort) {\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n                oSettings.aaSorting = aaSort;\n                _fnSort(oSettings);\n            };\n\n\n            /**\n             * Attach a sort listener to an element for a given column\n             *  @param {node} nNode the element to attach the sort listener to\n             *  @param {int} iColumn the column that a click on this node will sort on\n             *  @param {function} [fnCallback] callback function when sort is run\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *\n             *      // Sort on column 1, when 'sorter' is clicked on\n             *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n             *    } );\n             */\n            this.fnSortListener = function(nNode, iColumn, fnCallback) {\n                _fnSortAttachListener(_fnSettingsFromNode(this[DataTable.ext.iApiIndex]), nNode, iColumn,\n                    fnCallback);\n            };\n\n\n            /**\n             * Update a table cell or row - this method will accept either a single value to\n             * update the cell with, an array of values with one element for each column or\n             * an object in the same format as the original data source. The function is\n             * self-referencing in order to make the multi column updates easier.\n             *  @param {object|array|string} mData Data to update the cell/row with\n             *  @param {node|int} mRow TR element you want to update or the aoData index\n             *  @param {int} [iColumn] The column to update (not used of mData is an array or object)\n             *  @param {bool} [bRedraw=true] Redraw the table or not\n             *  @param {bool} [bAction=true] Perform pre-draw actions or not\n             *  @returns {int} 0 on success, 1 on error\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n             *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], 1, 0 ); // Row\n             *    } );\n             */\n            this.fnUpdate = function(mData, mRow, iColumn, bRedraw, bAction) {\n                var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);\n                var i, iLen, sDisplay;\n                var iRow = (typeof mRow === 'object') ?\n                    _fnNodeToDataIndex(oSettings, mRow) : mRow;\n\n                if ($.isArray(mData) && iColumn === undefined) {\n                    /* Array update - update the whole row */\n                    oSettings.aoData[iRow]._aData = mData.slice();\n\n                    /* Flag to the function that we are recursing */\n                    for (i = 0; i < oSettings.aoColumns.length; i++) {\n                        this.fnUpdate(_fnGetCellData(oSettings, iRow, i), iRow, i, false, false);\n                    }\n                } else if ($.isPlainObject(mData) && iColumn === undefined) {\n                    /* Object update - update the whole row - assume the developer gets the object right */\n                    oSettings.aoData[iRow]._aData = $.extend(true, {}, mData);\n\n                    for (i = 0; i < oSettings.aoColumns.length; i++) {\n                        this.fnUpdate(_fnGetCellData(oSettings, iRow, i), iRow, i, false, false);\n                    }\n                } else {\n                    /* Individual cell update */\n                    _fnSetCellData(oSettings, iRow, iColumn, mData);\n                    sDisplay = _fnGetCellData(oSettings, iRow, iColumn, 'display');\n\n                    var oCol = oSettings.aoColumns[iColumn];\n                    if (oCol.fnRender !== null) {\n                        sDisplay = _fnRender(oSettings, iRow, iColumn);\n                        if (oCol.bUseRendered) {\n                            _fnSetCellData(oSettings, iRow, iColumn, sDisplay);\n                        }\n                    }\n\n                    if (oSettings.aoData[iRow].nTr !== null) {\n                        /* Do the actual HTML update */\n                        _fnGetTdNodes(oSettings, iRow)[iColumn].innerHTML = sDisplay;\n                    }\n                }\n\n                /* Modify the search index for this row (strictly this is likely not needed, since fnReDraw\n\t\t\t * will rebuild the search array - however, the redraw might be disabled by the user)\n\t\t\t */\n                var iDisplayIndex = $.inArray(iRow, oSettings.aiDisplay);\n                oSettings.asDataSearch[iDisplayIndex] = _fnBuildSearchRow(\n                    oSettings,\n                    _fnGetRowData(oSettings, iRow, 'filter', _fnGetColumns(oSettings, 'bSearchable'))\n                );\n\n                /* Perform pre-draw actions */\n                if (bAction === undefined || bAction) {\n                    _fnAdjustColumnSizing(oSettings);\n                }\n\n                /* Redraw the table */\n                if (bRedraw === undefined || bRedraw) {\n                    _fnReDraw(oSettings);\n                }\n                return 0;\n            };\n\n\n            /**\n             * Provide a common method for plug-ins to check the version of DataTables being used, in order\n             * to ensure compatibility.\n             *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n             *    formats \"X\" and \"X.Y\" are also acceptable.\n             *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n             *    version, or false if this version of DataTales is not suitable\n             *  @method\n             *  @dtopt API\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n             *    } );\n             */\n            this.fnVersionCheck = DataTable.ext.fnVersionCheck;\n\n\n            /*\n\t\t * This is really a good bit rubbish this method of exposing the internal methods\n\t\t * publicly... - To be fixed in 2.0 using methods on the prototype\n\t\t */\n\n\n            /**\n             * Create a wrapper function for exporting an internal functions to an external API.\n             *  @param {string} sFunc API function name\n             *  @returns {function} wrapped function\n             *  @memberof DataTable#oApi\n             */\n            function _fnExternApiFunc(sFunc) {\n                return function() {\n                    var aArgs = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(\n                        Array.prototype.slice.call(arguments));\n                    return DataTable.ext.oApi[sFunc].apply(this, aArgs);\n                };\n            }\n\n\n            /**\n             * Reference to internal functions for use by plug-in developers. Note that these\n             * methods are references to internal functions and are considered to be private.\n             * If you use these methods, be aware that they are liable to change between versions\n             * (check the upgrade notes).\n             *  @namespace\n             */\n            this.oApi = {\n                \"_fnExternApiFunc\": _fnExternApiFunc,\n                \"_fnInitialise\": _fnInitialise,\n                \"_fnInitComplete\": _fnInitComplete,\n                \"_fnLanguageCompat\": _fnLanguageCompat,\n                \"_fnAddColumn\": _fnAddColumn,\n                \"_fnColumnOptions\": _fnColumnOptions,\n                \"_fnAddData\": _fnAddData,\n                \"_fnCreateTr\": _fnCreateTr,\n                \"_fnGatherData\": _fnGatherData,\n                \"_fnBuildHead\": _fnBuildHead,\n                \"_fnDrawHead\": _fnDrawHead,\n                \"_fnDraw\": _fnDraw,\n                \"_fnReDraw\": _fnReDraw,\n                \"_fnAjaxUpdate\": _fnAjaxUpdate,\n                \"_fnAjaxParameters\": _fnAjaxParameters,\n                \"_fnAjaxUpdateDraw\": _fnAjaxUpdateDraw,\n                \"_fnServerParams\": _fnServerParams,\n                \"_fnAddOptionsHtml\": _fnAddOptionsHtml,\n                \"_fnFeatureHtmlTable\": _fnFeatureHtmlTable,\n                \"_fnScrollDraw\": _fnScrollDraw,\n                \"_fnAdjustColumnSizing\": _fnAdjustColumnSizing,\n                \"_fnFeatureHtmlFilter\": _fnFeatureHtmlFilter,\n                \"_fnFilterComplete\": _fnFilterComplete,\n                \"_fnFilterCustom\": _fnFilterCustom,\n                \"_fnFilterColumn\": _fnFilterColumn,\n                \"_fnFilter\": _fnFilter,\n                \"_fnBuildSearchArray\": _fnBuildSearchArray,\n                \"_fnBuildSearchRow\": _fnBuildSearchRow,\n                \"_fnFilterCreateSearch\": _fnFilterCreateSearch,\n                \"_fnDataToSearch\": _fnDataToSearch,\n                \"_fnSort\": _fnSort,\n                \"_fnSortAttachListener\": _fnSortAttachListener,\n                \"_fnSortingClasses\": _fnSortingClasses,\n                \"_fnFeatureHtmlPaginate\": _fnFeatureHtmlPaginate,\n                \"_fnPageChange\": _fnPageChange,\n                \"_fnFeatureHtmlInfo\": _fnFeatureHtmlInfo,\n                \"_fnUpdateInfo\": _fnUpdateInfo,\n                \"_fnFeatureHtmlLength\": _fnFeatureHtmlLength,\n                \"_fnFeatureHtmlProcessing\": _fnFeatureHtmlProcessing,\n                \"_fnProcessingDisplay\": _fnProcessingDisplay,\n                \"_fnVisibleToColumnIndex\": _fnVisibleToColumnIndex,\n                \"_fnColumnIndexToVisible\": _fnColumnIndexToVisible,\n                \"_fnNodeToDataIndex\": _fnNodeToDataIndex,\n                \"_fnVisbleColumns\": _fnVisbleColumns,\n                \"_fnCalculateEnd\": _fnCalculateEnd,\n                \"_fnConvertToWidth\": _fnConvertToWidth,\n                \"_fnCalculateColumnWidths\": _fnCalculateColumnWidths,\n                \"_fnScrollingWidthAdjust\": _fnScrollingWidthAdjust,\n                \"_fnGetWidestNode\": _fnGetWidestNode,\n                \"_fnGetMaxLenString\": _fnGetMaxLenString,\n                \"_fnStringToCss\": _fnStringToCss,\n                \"_fnDetectType\": _fnDetectType,\n                \"_fnSettingsFromNode\": _fnSettingsFromNode,\n                \"_fnGetDataMaster\": _fnGetDataMaster,\n                \"_fnGetTrNodes\": _fnGetTrNodes,\n                \"_fnGetTdNodes\": _fnGetTdNodes,\n                \"_fnEscapeRegex\": _fnEscapeRegex,\n                \"_fnDeleteIndex\": _fnDeleteIndex,\n                \"_fnReOrderIndex\": _fnReOrderIndex,\n                \"_fnColumnOrdering\": _fnColumnOrdering,\n                \"_fnLog\": _fnLog,\n                \"_fnClearTable\": _fnClearTable,\n                \"_fnSaveState\": _fnSaveState,\n                \"_fnLoadState\": _fnLoadState,\n                \"_fnCreateCookie\": _fnCreateCookie,\n                \"_fnReadCookie\": _fnReadCookie,\n                \"_fnDetectHeader\": _fnDetectHeader,\n                \"_fnGetUniqueThs\": _fnGetUniqueThs,\n                \"_fnScrollBarWidth\": _fnScrollBarWidth,\n                \"_fnApplyToChildren\": _fnApplyToChildren,\n                \"_fnMap\": _fnMap,\n                \"_fnGetRowData\": _fnGetRowData,\n                \"_fnGetCellData\": _fnGetCellData,\n                \"_fnSetCellData\": _fnSetCellData,\n                \"_fnGetObjectDataFn\": _fnGetObjectDataFn,\n                \"_fnSetObjectDataFn\": _fnSetObjectDataFn,\n                \"_fnApplyColumnDefs\": _fnApplyColumnDefs,\n                \"_fnBindAction\": _fnBindAction,\n                \"_fnExtend\": _fnExtend,\n                \"_fnCallbackReg\": _fnCallbackReg,\n                \"_fnCallbackFire\": _fnCallbackFire,\n                \"_fnJsonString\": _fnJsonString,\n                \"_fnRender\": _fnRender,\n                \"_fnNodeToColumnIndex\": _fnNodeToColumnIndex,\n                \"_fnInfoMacros\": _fnInfoMacros,\n                \"_fnBrowserDetect\": _fnBrowserDetect,\n                \"_fnGetColumns\": _fnGetColumns\n            };\n\n            $.extend(DataTable.ext.oApi, this.oApi);\n\n            for (var sFunc in DataTable.ext.oApi) {\n                if (sFunc) {\n                    this[sFunc] = _fnExternApiFunc(sFunc);\n                }\n            }\n\n\n            var _that = this;\n            this.each(function() {\n                var i = 0, iLen, j, jLen, k, kLen;\n                var sId = this.getAttribute('id');\n                var bInitHandedOff = false;\n                var bUsePassedData = false;\n\n\n                /* Sanity check */\n                if (this.nodeName.toLowerCase() != 'table') {\n                    _fnLog(null, 0, \"Attempted to initialise DataTables on a node which is not a \" +\n                        \"table: \" + this.nodeName);\n                    return;\n                }\n\n                /* Check to see if we are re-initialising a table */\n                for (i = 0, iLen = DataTable.settings.length; i < iLen; i++) {\n                    /* Base check on table node */\n                    if (DataTable.settings[i].nTable == this) {\n                        if (oInit === undefined || oInit.bRetrieve) {\n                            return DataTable.settings[i].oInstance;\n                        } else if (oInit.bDestroy) {\n                            DataTable.settings[i].oInstance.fnDestroy();\n                            break;\n                        } else {\n                            _fnLog(DataTable.settings[i], 0, \"Cannot reinitialise DataTable.\\n\\n\" +\n                                \"To retrieve the DataTables object for this table, pass no arguments or see \" +\n                                \"the docs for bRetrieve and bDestroy\");\n                            return;\n                        }\n                    }\n\n                    /* If the element we are initialising has the same ID as a table which was previously\n\t\t\t\t * initialised, but the table nodes don't match (from before) then we destroy the old\n\t\t\t\t * instance by simply deleting it. This is under the assumption that the table has been\n\t\t\t\t * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n\t\t\t\t */\n                    if (DataTable.settings[i].sTableId == this.id) {\n                        DataTable.settings.splice(i, 1);\n                        break;\n                    }\n                }\n\n                /* Ensure the table has an ID - required for accessibility */\n                if (sId === null || sId === \"\") {\n                    sId = \"DataTables_Table_\" + (DataTable.ext._oExternConfig.iNextUnique++);\n                    this.id = sId;\n                }\n\n                /* Create the settings object for this table and set some of the default parameters */\n                var oSettings = $.extend(true, {}, DataTable.models.oSettings, {\n                    \"nTable\": this,\n                    \"oApi\": _that.oApi,\n                    \"oInit\": oInit,\n                    \"sDestroyWidth\": $(this).width(),\n                    \"sInstance\": sId,\n                    \"sTableId\": sId\n                });\n                DataTable.settings.push(oSettings);\n\n                // Need to add the instance after the instance after the settings object has been added\n                // to the settings array, so we can self reference the table instance if more than one\n                oSettings.oInstance = (_that.length === 1) ? _that : $(this).dataTable();\n\n                /* Setting up the initialisation object */\n                if (!oInit) {\n                    oInit = {};\n                }\n\n                // Backwards compatibility, before we apply all the defaults\n                if (oInit.oLanguage) {\n                    _fnLanguageCompat(oInit.oLanguage);\n                }\n\n                oInit = _fnExtend($.extend(true, {}, DataTable.defaults), oInit);\n\n                // Map the initialisation options onto the settings object\n                _fnMap(oSettings.oFeatures, oInit, \"bPaginate\");\n                _fnMap(oSettings.oFeatures, oInit, \"bLengthChange\");\n                _fnMap(oSettings.oFeatures, oInit, \"bFilter\");\n                _fnMap(oSettings.oFeatures, oInit, \"bSort\");\n                _fnMap(oSettings.oFeatures, oInit, \"bInfo\");\n                _fnMap(oSettings.oFeatures, oInit, \"bProcessing\");\n                _fnMap(oSettings.oFeatures, oInit, \"bAutoWidth\");\n                _fnMap(oSettings.oFeatures, oInit, \"bSortClasses\");\n                _fnMap(oSettings.oFeatures, oInit, \"bServerSide\");\n                _fnMap(oSettings.oFeatures, oInit, \"bDeferRender\");\n                _fnMap(oSettings.oScroll, oInit, \"sScrollX\", \"sX\");\n                _fnMap(oSettings.oScroll, oInit, \"sScrollXInner\", \"sXInner\");\n                _fnMap(oSettings.oScroll, oInit, \"sScrollY\", \"sY\");\n                _fnMap(oSettings.oScroll, oInit, \"bScrollCollapse\", \"bCollapse\");\n                _fnMap(oSettings.oScroll, oInit, \"bScrollInfinite\", \"bInfinite\");\n                _fnMap(oSettings.oScroll, oInit, \"iScrollLoadGap\", \"iLoadGap\");\n                _fnMap(oSettings.oScroll, oInit, \"bScrollAutoCss\", \"bAutoCss\");\n                _fnMap(oSettings, oInit, \"asStripeClasses\");\n                _fnMap(oSettings, oInit, \"asStripClasses\", \"asStripeClasses\"); // legacy\n                _fnMap(oSettings, oInit, \"fnServerData\");\n                _fnMap(oSettings, oInit, \"fnFormatNumber\");\n                _fnMap(oSettings, oInit, \"sServerMethod\");\n                _fnMap(oSettings, oInit, \"aaSorting\");\n                _fnMap(oSettings, oInit, \"aaSortingFixed\");\n                _fnMap(oSettings, oInit, \"aLengthMenu\");\n                _fnMap(oSettings, oInit, \"sPaginationType\");\n                _fnMap(oSettings, oInit, \"sAjaxSource\");\n                _fnMap(oSettings, oInit, \"sAjaxDataProp\");\n                _fnMap(oSettings, oInit, \"iCookieDuration\");\n                _fnMap(oSettings, oInit, \"sCookiePrefix\");\n                _fnMap(oSettings, oInit, \"sDom\");\n                _fnMap(oSettings, oInit, \"bSortCellsTop\");\n                _fnMap(oSettings, oInit, \"iTabIndex\");\n                _fnMap(oSettings, oInit, \"oSearch\", \"oPreviousSearch\");\n                _fnMap(oSettings, oInit, \"aoSearchCols\", \"aoPreSearchCols\");\n                _fnMap(oSettings, oInit, \"iDisplayLength\", \"_iDisplayLength\");\n                _fnMap(oSettings, oInit, \"bJQueryUI\", \"bJUI\");\n                _fnMap(oSettings, oInit, \"fnCookieCallback\");\n                _fnMap(oSettings, oInit, \"fnStateLoad\");\n                _fnMap(oSettings, oInit, \"fnStateSave\");\n                _fnMap(oSettings.oLanguage, oInit, \"fnInfoCallback\");\n\n                /* Callback functions which are array driven */\n                _fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');\n                _fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');\n                _fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');\n                _fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');\n                _fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');\n                _fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');\n                _fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');\n                _fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');\n                _fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');\n                _fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');\n                _fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');\n\n                if (oSettings.oFeatures.bServerSide && oSettings.oFeatures.bSort &&\n                    oSettings.oFeatures.bSortClasses) {\n                    /* Enable sort classes for server-side processing. Safe to do it here, since server-side\n\t\t\t\t * processing must be enabled by the developer\n\t\t\t\t */\n                    _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSortingClasses, 'server_side_sort_classes');\n                } else if (oSettings.oFeatures.bDeferRender) {\n                    _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSortingClasses, 'defer_sort_classes');\n                }\n\n                if (oInit.bJQueryUI) {\n                    /* Use the JUI classes object for display. You could clone the oStdClasses object if\n\t\t\t\t * you want to have multiple tables with multiple independent classes\n\t\t\t\t */\n                    $.extend(oSettings.oClasses, DataTable.ext.oJUIClasses);\n\n                    if (oInit.sDom === DataTable.defaults.sDom && DataTable.defaults.sDom === \"lfrtip\") {\n                        /* Set the DOM to use a layout suitable for jQuery UI's theming */\n                        oSettings.sDom = '<\"H\"lfr>t<\"F\"ip>';\n                    }\n                } else {\n                    $.extend(oSettings.oClasses, DataTable.ext.oStdClasses);\n                }\n                $(this).addClass(oSettings.oClasses.sTable);\n\n                /* Calculate the scroll bar width and cache it for use later on */\n                if (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") {\n                    oSettings.oScroll.iBarWidth = _fnScrollBarWidth();\n                }\n\n                if (oSettings.iInitDisplayStart === undefined) {\n                    /* Display start point, taking into account the save saving */\n                    oSettings.iInitDisplayStart = oInit.iDisplayStart;\n                    oSettings._iDisplayStart = oInit.iDisplayStart;\n                }\n\n                /* Must be done after everything which can be overridden by a cookie! */\n                if (oInit.bStateSave) {\n                    oSettings.oFeatures.bStateSave = true;\n                    _fnLoadState(oSettings, oInit);\n                    _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');\n                }\n\n                if (oInit.iDeferLoading !== null) {\n                    oSettings.bDeferLoading = true;\n                    var tmp = $.isArray(oInit.iDeferLoading);\n                    oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n                    oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n                }\n\n                if (oInit.aaData !== null) {\n                    bUsePassedData = true;\n                }\n\n                /* Language definitions */\n                if (oInit.oLanguage.sUrl !== \"\") {\n                    /* Get the language definitions from a file - because this Ajax call makes the language\n\t\t\t\t * get async to the remainder of this function we use bInitHandedOff to indicate that\n\t\t\t\t * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n\t\t\t\t */\n                    oSettings.oLanguage.sUrl = oInit.oLanguage.sUrl;\n                    $.getJSON(oSettings.oLanguage.sUrl, null, function(json) {\n                        _fnLanguageCompat(json);\n                        $.extend(true, oSettings.oLanguage, oInit.oLanguage, json);\n                        _fnInitialise(oSettings);\n                    });\n                    bInitHandedOff = true;\n                } else {\n                    $.extend(true, oSettings.oLanguage, oInit.oLanguage);\n                }\n\n\n                /*\n\t\t\t * Stripes\n\t\t\t */\n                if (oInit.asStripeClasses === null) {\n                    oSettings.asStripeClasses = [\n                        oSettings.oClasses.sStripeOdd,\n                        oSettings.oClasses.sStripeEven\n                    ];\n                }\n\n                /* Remove row stripe classes if they are already on the table row */\n                iLen = oSettings.asStripeClasses.length;\n                oSettings.asDestroyStripes = [];\n                if (iLen) {\n                    var bStripeRemove = false;\n                    var anRows = $(this).children('tbody').children('tr:lt(' + iLen + ')');\n                    for (i = 0; i < iLen; i++) {\n                        if (anRows.hasClass(oSettings.asStripeClasses[i])) {\n                            bStripeRemove = true;\n\n                            /* Store the classes which we are about to remove so they can be re-added on destroy */\n                            oSettings.asDestroyStripes.push(oSettings.asStripeClasses[i]);\n                        }\n                    }\n\n                    if (bStripeRemove) {\n                        anRows.removeClass(oSettings.asStripeClasses.join(' '));\n                    }\n                }\n\n                /*\n\t\t\t * Columns\n\t\t\t * See if we should load columns automatically or use defined ones\n\t\t\t */\n                var anThs = [];\n                var aoColumnsInit;\n                var nThead = this.getElementsByTagName('thead');\n                if (nThead.length !== 0) {\n                    _fnDetectHeader(oSettings.aoHeader, nThead[0]);\n                    anThs = _fnGetUniqueThs(oSettings);\n                }\n\n                /* If not given a column array, generate one with nulls */\n                if (oInit.aoColumns === null) {\n                    aoColumnsInit = [];\n                    for (i = 0, iLen = anThs.length; i < iLen; i++) {\n                        aoColumnsInit.push(null);\n                    }\n                } else {\n                    aoColumnsInit = oInit.aoColumns;\n                }\n\n                /* Add the columns */\n                for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {\n                    /* Short cut - use the loop to check if we have column visibility state to restore */\n                    if (oInit.saved_aoColumns !== undefined && oInit.saved_aoColumns.length == iLen) {\n                        if (aoColumnsInit[i] === null) {\n                            aoColumnsInit[i] = {};\n                        }\n                        aoColumnsInit[i].bVisible = oInit.saved_aoColumns[i].bVisible;\n                    }\n\n                    _fnAddColumn(oSettings, anThs ? anThs[i] : null);\n                }\n\n                /* Apply the column definitions */\n                _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function(iCol, oDef) {\n                    _fnColumnOptions(oSettings, iCol, oDef);\n                });\n\n\n                /*\n\t\t\t * Sorting\n\t\t\t * Check the aaSorting array\n\t\t\t */\n                for (i = 0, iLen = oSettings.aaSorting.length; i < iLen; i++) {\n                    if (oSettings.aaSorting[i][0] >= oSettings.aoColumns.length) {\n                        oSettings.aaSorting[i][0] = 0;\n                    }\n                    var oColumn = oSettings.aoColumns[oSettings.aaSorting[i][0]];\n\n                    /* Add a default sorting index */\n                    if (oSettings.aaSorting[i][2] === undefined) {\n                        oSettings.aaSorting[i][2] = 0;\n                    }\n\n                    /* If aaSorting is not defined, then we use the first indicator in asSorting */\n                    if (oInit.aaSorting === undefined && oSettings.saved_aaSorting === undefined) {\n                        oSettings.aaSorting[i][1] = oColumn.asSorting[0];\n                    }\n\n                    /* Set the current sorting index based on aoColumns.asSorting */\n                    for (j = 0, jLen = oColumn.asSorting.length; j < jLen; j++) {\n                        if (oSettings.aaSorting[i][1] == oColumn.asSorting[j]) {\n                            oSettings.aaSorting[i][2] = j;\n                            break;\n                        }\n                    }\n                }\n\n                /* Do a first pass on the sorting classes (allows any size changes to be taken into\n\t\t\t * account, and also will apply sorting disabled classes if disabled\n\t\t\t */\n                _fnSortingClasses(oSettings);\n\n\n                /*\n\t\t\t * Final init\n\t\t\t * Cache the header, body and footer as required, creating them if needed\n\t\t\t */\n\n                /* Browser support detection */\n                _fnBrowserDetect(oSettings);\n\n                // Work around for Webkit bug 83867 - store the caption-side before removing from doc\n                var captions = $(this).children('caption').each(function() {\n                    this._captionSide = $(this).css('caption-side');\n                });\n\n                var thead = $(this).children('thead');\n                if (thead.length === 0) {\n                    thead = [document.createElement('thead')];\n                    this.appendChild(thead[0]);\n                }\n                oSettings.nTHead = thead[0];\n\n                var tbody = $(this).children('tbody');\n                if (tbody.length === 0) {\n                    tbody = [document.createElement('tbody')];\n                    this.appendChild(tbody[0]);\n                }\n                oSettings.nTBody = tbody[0];\n                oSettings.nTBody.setAttribute(\"role\", \"alert\");\n                oSettings.nTBody.setAttribute(\"aria-live\", \"polite\");\n                oSettings.nTBody.setAttribute(\"aria-relevant\", \"all\");\n\n                var tfoot = $(this).children('tfoot');\n                if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\")) {\n                    // If we are a scrolling table, and no footer has been given, then we need to create\n                    // a tfoot element for the caption element to be appended to\n                    tfoot = [document.createElement('tfoot')];\n                    this.appendChild(tfoot[0]);\n                }\n\n                if (tfoot.length > 0) {\n                    oSettings.nTFoot = tfoot[0];\n                    _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);\n                }\n\n                /* Check if there is data passing into the constructor */\n                if (bUsePassedData) {\n                    for (i = 0; i < oInit.aaData.length; i++) {\n                        _fnAddData(oSettings, oInit.aaData[i]);\n                    }\n                } else {\n                    /* Grab the data from the page */\n                    _fnGatherData(oSettings);\n                }\n\n                /* Copy the data index array */\n                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n\n                /* Initialisation complete - table can be drawn */\n                oSettings.bInitialised = true;\n\n                /* Check if we need to initialise the table (it might not have been handed off to the\n\t\t\t * language processor)\n\t\t\t */\n                if (bInitHandedOff === false) {\n                    _fnInitialise(oSettings);\n                }\n            });\n            _that = null;\n            return this;\n        };\n\n\n        /**\n         * Provide a common method for plug-ins to check the version of DataTables being used, in order\n         * to ensure compatibility.\n         *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n         *    formats \"X\" and \"X.Y\" are also acceptable.\n         *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n         *    version, or false if this version of DataTales is not suitable\n         *  @static\n         *  @dtopt API-Static\n         *\n         *  @example\n         *    alert( $.fn.dataTable.fnVersionCheck( '1.9.0' ) );\n         */\n        DataTable.fnVersionCheck = function(sVersion) {\n            /* This is cheap, but effective */\n            var fnZPad = function(Zpad, count) {\n                while (Zpad.length < count) {\n                    Zpad += '0';\n                }\n                return Zpad;\n            };\n            var aThis = DataTable.ext.sVersion.split('.');\n            var aThat = sVersion.split('.');\n            var sThis = '', sThat = '';\n\n            for (var i = 0, iLen = aThat.length; i < iLen; i++) {\n                sThis += fnZPad(aThis[i], 3);\n                sThat += fnZPad(aThat[i], 3);\n            }\n\n            return parseInt(sThis, 10) >= parseInt(sThat, 10);\n        };\n\n\n        /**\n         * Check if a TABLE node is a DataTable table already or not.\n         *  @param {node} nTable The TABLE node to check if it is a DataTable or not (note that other\n         *    node types can be passed in, but will always return false).\n         *  @returns {boolean} true the table given is a DataTable, or false otherwise\n         *  @static\n         *  @dtopt API-Static\n         *\n         *  @example\n         *    var ex = document.getElementById('example');\n         *    if ( ! $.fn.DataTable.fnIsDataTable( ex ) ) {\n         *      $(ex).dataTable();\n         *    }\n         */\n        DataTable.fnIsDataTable = function(nTable) {\n            var o = DataTable.settings;\n\n            for (var i = 0; i < o.length; i++) {\n                if (o[i].nTable === nTable || o[i].nScrollHead === nTable || o[i].nScrollFoot === nTable) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n\n\n        /**\n         * Get all DataTable tables that have been initialised - optionally you can select to\n         * get only currently visible tables.\n         *  @param {boolean} [bVisible=false] Flag to indicate if you want all (default) or\n         *    visible tables only.\n         *  @returns {array} Array of TABLE nodes (not DataTable instances) which are DataTables\n         *  @static\n         *  @dtopt API-Static\n         *\n         *  @example\n         *    var table = $.fn.dataTable.fnTables(true);\n         *    if ( table.length > 0 ) {\n         *      $(table).dataTable().fnAdjustColumnSizing();\n         *    }\n         */\n        DataTable.fnTables = function(bVisible) {\n            var out = [];\n\n            jQuery.each(DataTable.settings, function(i, o) {\n                if (!bVisible || (bVisible === true && $(o.nTable).is(':visible'))) {\n                    out.push(o.nTable);\n                }\n            });\n\n            return out;\n        };\n\n\n        /**\n         * Version string for plug-ins to check compatibility. Allowed format is\n         * a.b.c.d.e where: a:int, b:int, c:int, d:string(dev|beta), e:int. d and\n         * e are optional\n         *  @member\n         *  @type string\n         *  @default Version number\n         */\n        DataTable.version = \"1.9.4\";\n\n        /**\n         * Private data store, containing all of the settings objects that are created for the\n         * tables on a given page.\n         *\n         * Note that the <i>DataTable.settings</i> object is aliased to <i>jQuery.fn.dataTableExt</i>\n         * through which it may be accessed and manipulated, or <i>jQuery.fn.dataTable.settings</i>.\n         *  @member\n         *  @type array\n         *  @default []\n         *  @private\n         */\n        DataTable.settings = [];\n\n        /**\n         * Object models container, for the various models that DataTables has available\n         * to it. These models define the objects that are used to hold the active state\n         * and configuration of the table.\n         *  @namespace\n         */\n        DataTable.models = {};\n\n\n        /**\n         * DataTables extension options and plug-ins. This namespace acts as a collection \"area\"\n         * for plug-ins that can be used to extend the default DataTables behaviour - indeed many\n         * of the build in methods use this method to provide their own capabilities (sorting methods\n         * for example).\n         *\n         * Note that this namespace is aliased to jQuery.fn.dataTableExt so it can be readily accessed\n         * and modified by plug-ins.\n         *  @namespace\n         */\n        DataTable.models.ext = {\n            /**\n             * Plug-in filtering functions - this method of filtering is complimentary to the default\n             * type based filtering, and a lot more comprehensive as it allows you complete control\n             * over the filtering logic. Each element in this array is a function (parameters\n             * described below) that is called for every row in the table, and your logic decides if\n             * it should be included in the filtered data set or not.\n             *   <ul>\n             *     <li>\n             *       Function input parameters:\n             *       <ul>\n             *         <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>\n             *         <li>{array|object} Data for the row to be processed (same as the original format\n             *           that was passed in as the data source, or an array from a DOM data source</li>\n             *         <li>{int} Row index in aoData ({@link DataTable.models.oSettings.aoData}), which can\n             *           be useful to retrieve the TR element if you need DOM interaction.</li>\n             *       </ul>\n             *     </li>\n             *     <li>\n             *       Function return:\n             *       <ul>\n             *         <li>{boolean} Include the row in the filtered result set (true) or not (false)</li>\n             *       </ul>\n             *     </il>\n             *   </ul>\n             *  @type array\n             *  @default []\n             *\n             *  @example\n             *    // The following example shows custom filtering being applied to the fourth column (i.e.\n             *    // the aData[3] index) based on two input values from the end-user, matching the data in\n             *    // a certain range.\n             *    $.fn.dataTableExt.afnFiltering.push(\n             *      function( oSettings, aData, iDataIndex ) {\n             *        var iMin = document.getElementById('min').value * 1;\n             *        var iMax = document.getElementById('max').value * 1;\n             *        var iVersion = aData[3] == \"-\" ? 0 : aData[3]*1;\n             *        if ( iMin == \"\" && iMax == \"\" ) {\n             *          return true;\n             *        }\n             *        else if ( iMin == \"\" && iVersion < iMax ) {\n             *          return true;\n             *        }\n             *        else if ( iMin < iVersion && \"\" == iMax ) {\n             *          return true;\n             *        }\n             *        else if ( iMin < iVersion && iVersion < iMax ) {\n             *          return true;\n             *        }\n             *        return false;\n             *      }\n             *    );\n             */\n            \"afnFiltering\": [],\n\n\n            /**\n             * Plug-in sorting functions - this method of sorting is complimentary to the default type\n             * based sorting that DataTables does automatically, allowing much greater control over the\n             * the data that is being used to sort a column. This is useful if you want to do sorting\n             * based on live data (for example the contents of an 'input' element) rather than just the\n             * static string that DataTables knows of. The way these plug-ins work is that you create\n             * an array of the values you wish to be sorted for the column in question and then return\n             * that array. Which pre-sorting function is run here depends on the sSortDataType parameter\n             * that is used for the column (if any). This is the corollary of <i>ofnSearch</i> for sort\n             * data.\n             *   <ul>\n             *     <li>\n             *       Function input parameters:\n             *       <ul>\n             *         <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>\n             *         <li>{int} Target column index</li>\n             *       </ul>\n             *     </li>\n             *     <li>\n             *       Function return:\n             *       <ul>\n             *         <li>{array} Data for the column to be sorted upon</li>\n             *       </ul>\n             *     </il>\n             *   </ul>\n             *\n             * Note that as of v1.9, it is typically preferable to use <i>mData</i> to prepare data for\n             * the different uses that DataTables can put the data to. Specifically <i>mData</i> when\n             * used as a function will give you a 'type' (sorting, filtering etc) that you can use to\n             * prepare the data as required for the different types. As such, this method is deprecated.\n             *  @type array\n             *  @default []\n             *  @deprecated\n             *\n             *  @example\n             *    // Updating the cached sorting information with user entered values in HTML input elements\n             *    jQuery.fn.dataTableExt.afnSortData['dom-text'] = function ( oSettings, iColumn )\n             *    {\n             *      var aData = [];\n             *      $( 'td:eq('+iColumn+') input', oSettings.oApi._fnGetTrNodes(oSettings) ).each( function () {\n             *        aData.push( this.value );\n             *      } );\n             *      return aData;\n             *    }\n             */\n            \"afnSortData\": [],\n\n\n            /**\n             * Feature plug-ins - This is an array of objects which describe the feature plug-ins that are\n             * available to DataTables. These feature plug-ins are accessible through the sDom initialisation\n             * option. As such, each feature plug-in must describe a function that is used to initialise\n             * itself (fnInit), a character so the feature can be enabled by sDom (cFeature) and the name\n             * of the feature (sFeature). Thus the objects attached to this method must provide:\n             *   <ul>\n             *     <li>{function} fnInit Initialisation of the plug-in\n             *       <ul>\n             *         <li>\n             *           Function input parameters:\n             *           <ul>\n             *             <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>\n             *           </ul>\n             *         </li>\n             *         <li>\n             *           Function return:\n             *           <ul>\n             *             <li>{node|null} The element which contains your feature. Note that the return\n             *                may also be void if your plug-in does not require to inject any DOM elements\n             *                into DataTables control (sDom) - for example this might be useful when\n             *                developing a plug-in which allows table control via keyboard entry.</li>\n             *           </ul>\n             *         </il>\n             *       </ul>\n             *     </li>\n             *     <li>{character} cFeature Character that will be matched in sDom - case sensitive</li>\n             *     <li>{string} sFeature Feature name</li>\n             *   </ul>\n             *  @type array\n             *  @default []\n             *\n             *  @example\n             *    // How TableTools initialises itself.\n             *    $.fn.dataTableExt.aoFeatures.push( {\n             *      \"fnInit\": function( oSettings ) {\n             *        return new TableTools( { \"oDTSettings\": oSettings } );\n             *      },\n             *      \"cFeature\": \"T\",\n             *      \"sFeature\": \"TableTools\"\n             *    } );\n             */\n            \"aoFeatures\": [],\n\n\n            /**\n             * Type detection plug-in functions - DataTables utilises types to define how sorting and\n             * filtering behave, and types can be either  be defined by the developer (sType for the\n             * column) or they can be automatically detected by the methods in this array. The functions\n             * defined in the array are quite simple, taking a single parameter (the data to analyse)\n             * and returning the type if it is a known type, or null otherwise.\n             *   <ul>\n             *     <li>\n             *       Function input parameters:\n             *       <ul>\n             *         <li>{*} Data from the column cell to be analysed</li>\n             *       </ul>\n             *     </li>\n             *     <li>\n             *       Function return:\n             *       <ul>\n             *         <li>{string|null} Data type detected, or null if unknown (and thus pass it\n             *           on to the other type detection functions.</li>\n             *       </ul>\n             *     </il>\n             *   </ul>\n             *  @type array\n             *  @default []\n             *\n             *  @example\n             *    // Currency type detection plug-in:\n             *    jQuery.fn.dataTableExt.aTypes.push(\n             *      function ( sData ) {\n             *        var sValidChars = \"0123456789.-\";\n             *        var Char;\n             *\n             *        // Check the numeric part\n             *        for ( i=1 ; i<sData.length ; i++ ) {\n             *          Char = sData.charAt(i);\n             *          if (sValidChars.indexOf(Char) == -1) {\n             *            return null;\n             *          }\n             *        }\n             *\n             *        // Check prefixed by currency\n             *        if ( sData.charAt(0) == '$' || sData.charAt(0) == '&pound;' ) {\n             *          return 'currency';\n             *        }\n             *        return null;\n             *      }\n             *    );\n             */\n            \"aTypes\": [],\n\n\n            /**\n             * Provide a common method for plug-ins to check the version of DataTables being used,\n             * in order to ensure compatibility.\n             *  @type function\n             *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note\n             *    that the formats \"X\" and \"X.Y\" are also acceptable.\n             *  @returns {boolean} true if this version of DataTables is greater or equal to the\n             *    required version, or false if this version of DataTales is not suitable\n             *\n             *  @example\n             *    $(document).ready(function() {\n             *      var oTable = $('#example').dataTable();\n             *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n             *    } );\n             */\n            \"fnVersionCheck\": DataTable.fnVersionCheck,\n\n\n            /**\n             * Index for what 'this' index API functions should use\n             *  @type int\n             *  @default 0\n             */\n            \"iApiIndex\": 0,\n\n\n            /**\n             * Pre-processing of filtering data plug-ins - When you assign the sType for a column\n             * (or have it automatically detected for you by DataTables or a type detection plug-in),\n             * you will typically be using this for custom sorting, but it can also be used to provide\n             * custom filtering by allowing you to pre-processing the data and returning the data in\n             * the format that should be filtered upon. This is done by adding functions this object\n             * with a parameter name which matches the sType for that target column. This is the\n             * corollary of <i>afnSortData</i> for filtering data.\n             *   <ul>\n             *     <li>\n             *       Function input parameters:\n             *       <ul>\n             *         <li>{*} Data from the column cell to be prepared for filtering</li>\n             *       </ul>\n             *     </li>\n             *     <li>\n             *       Function return:\n             *       <ul>\n             *         <li>{string|null} Formatted string that will be used for the filtering.</li>\n             *       </ul>\n             *     </il>\n             *   </ul>\n             *\n             * Note that as of v1.9, it is typically preferable to use <i>mData</i> to prepare data for\n             * the different uses that DataTables can put the data to. Specifically <i>mData</i> when\n             * used as a function will give you a 'type' (sorting, filtering etc) that you can use to\n             * prepare the data as required for the different types. As such, this method is deprecated.\n             *  @type object\n             *  @default {}\n             *  @deprecated\n             *\n             *  @example\n             *    $.fn.dataTableExt.ofnSearch['title-numeric'] = function ( sData ) {\n             *      return sData.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n             *    }\n             */\n            \"ofnSearch\": {},\n\n\n            /**\n             * Container for all private functions in DataTables so they can be exposed externally\n             *  @type object\n             *  @default {}\n             */\n            \"oApi\": {},\n\n\n            /**\n             * Storage for the various classes that DataTables uses\n             *  @type object\n             *  @default {}\n             */\n            \"oStdClasses\": {},\n\n\n            /**\n             * Storage for the various classes that DataTables uses - jQuery UI suitable\n             *  @type object\n             *  @default {}\n             */\n            \"oJUIClasses\": {},\n\n\n            /**\n             * Pagination plug-in methods - The style and controls of the pagination can significantly\n             * impact on how the end user interacts with the data in your table, and DataTables allows\n             * the addition of pagination controls by extending this object, which can then be enabled\n             * through the <i>sPaginationType</i> initialisation parameter. Each pagination type that\n             * is added is an object (the property name of which is what <i>sPaginationType</i> refers\n             * to) that has two properties, both methods that are used by DataTables to update the\n             * control's state.\n             *   <ul>\n             *     <li>\n             *       fnInit -  Initialisation of the paging controls. Called only during initialisation\n             *         of the table. It is expected that this function will add the required DOM elements\n             *         to the page for the paging controls to work. The element pointer\n             *         'oSettings.aanFeatures.p' array is provided by DataTables to contain the paging\n             *         controls (note that this is a 2D array to allow for multiple instances of each\n             *         DataTables DOM element). It is suggested that you add the controls to this element\n             *         as children\n             *       <ul>\n             *         <li>\n             *           Function input parameters:\n             *           <ul>\n             *             <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>\n             *             <li>{node} Container into which the pagination controls must be inserted</li>\n             *             <li>{function} Draw callback function - whenever the controls cause a page\n             *               change, this method must be called to redraw the table.</li>\n             *           </ul>\n             *         </li>\n             *         <li>\n             *           Function return:\n             *           <ul>\n             *             <li>No return required</li>\n             *           </ul>\n             *         </il>\n             *       </ul>\n             *     </il>\n             *     <li>\n             *       fnInit -  This function is called whenever the paging status of the table changes and is\n             *         typically used to update classes and/or text of the paging controls to reflex the new\n             *         status.\n             *       <ul>\n             *         <li>\n             *           Function input parameters:\n             *           <ul>\n             *             <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>\n             *             <li>{function} Draw callback function - in case you need to redraw the table again\n             *               or attach new event listeners</li>\n             *           </ul>\n             *         </li>\n             *         <li>\n             *           Function return:\n             *           <ul>\n             *             <li>No return required</li>\n             *           </ul>\n             *         </il>\n             *       </ul>\n             *     </il>\n             *   </ul>\n             *  @type object\n             *  @default {}\n             *\n             *  @example\n             *    $.fn.dataTableExt.oPagination.four_button = {\n             *      \"fnInit\": function ( oSettings, nPaging, fnCallbackDraw ) {\n             *        nFirst = document.createElement( 'span' );\n             *        nPrevious = document.createElement( 'span' );\n             *        nNext = document.createElement( 'span' );\n             *        nLast = document.createElement( 'span' );\n             *\n             *        nFirst.appendChild( document.createTextNode( oSettings.oLanguage.oPaginate.sFirst ) );\n             *        nPrevious.appendChild( document.createTextNode( oSettings.oLanguage.oPaginate.sPrevious ) );\n             *        nNext.appendChild( document.createTextNode( oSettings.oLanguage.oPaginate.sNext ) );\n             *        nLast.appendChild( document.createTextNode( oSettings.oLanguage.oPaginate.sLast ) );\n             *\n             *        nFirst.className = \"paginate_button first\";\n             *        nPrevious.className = \"paginate_button previous\";\n             *        nNext.className=\"paginate_button next\";\n             *        nLast.className = \"paginate_button last\";\n             *\n             *        nPaging.appendChild( nFirst );\n             *        nPaging.appendChild( nPrevious );\n             *        nPaging.appendChild( nNext );\n             *        nPaging.appendChild( nLast );\n             *\n             *        $(nFirst).click( function () {\n             *          oSettings.oApi._fnPageChange( oSettings, \"first\" );\n             *          fnCallbackDraw( oSettings );\n             *        } );\n             *\n             *        $(nPrevious).click( function() {\n             *          oSettings.oApi._fnPageChange( oSettings, \"previous\" );\n             *          fnCallbackDraw( oSettings );\n             *        } );\n             *\n             *        $(nNext).click( function() {\n             *          oSettings.oApi._fnPageChange( oSettings, \"next\" );\n             *          fnCallbackDraw( oSettings );\n             *        } );\n             *\n             *        $(nLast).click( function() {\n             *          oSettings.oApi._fnPageChange( oSettings, \"last\" );\n             *          fnCallbackDraw( oSettings );\n             *        } );\n             *\n             *        $(nFirst).bind( 'selectstart', function () { return false; } );\n             *        $(nPrevious).bind( 'selectstart', function () { return false; } );\n             *        $(nNext).bind( 'selectstart', function () { return false; } );\n             *        $(nLast).bind( 'selectstart', function () { return false; } );\n             *      },\n             *\n             *      \"fnUpdate\": function ( oSettings, fnCallbackDraw ) {\n             *        if ( !oSettings.aanFeatures.p ) {\n             *          return;\n             *        }\n             *\n             *        // Loop over each instance of the pager\n             *        var an = oSettings.aanFeatures.p;\n             *        for ( var i=0, iLen=an.length ; i<iLen ; i++ ) {\n             *          var buttons = an[i].getElementsByTagName('span');\n             *          if ( oSettings._iDisplayStart === 0 ) {\n             *            buttons[0].className = \"paginate_disabled_previous\";\n             *            buttons[1].className = \"paginate_disabled_previous\";\n             *          }\n             *          else {\n             *            buttons[0].className = \"paginate_enabled_previous\";\n             *            buttons[1].className = \"paginate_enabled_previous\";\n             *          }\n             *\n             *          if ( oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay() ) {\n             *            buttons[2].className = \"paginate_disabled_next\";\n             *            buttons[3].className = \"paginate_disabled_next\";\n             *          }\n             *          else {\n             *            buttons[2].className = \"paginate_enabled_next\";\n             *            buttons[3].className = \"paginate_enabled_next\";\n             *          }\n             *        }\n             *      }\n             *    };\n             */\n            \"oPagination\": {},\n\n\n            /**\n             * Sorting plug-in methods - Sorting in DataTables is based on the detected type of the\n             * data column (you can add your own type detection functions, or override automatic\n             * detection using sType). With this specific type given to the column, DataTables will\n             * apply the required sort from the functions in the object. Each sort type must provide\n             * two mandatory methods, one each for ascending and descending sorting, and can optionally\n             * provide a pre-formatting method that will help speed up sorting by allowing DataTables\n             * to pre-format the sort data only once (rather than every time the actual sort functions\n             * are run). The two sorting functions are typical Javascript sort methods:\n             *   <ul>\n             *     <li>\n             *       Function input parameters:\n             *       <ul>\n             *         <li>{*} Data to compare to the second parameter</li>\n             *         <li>{*} Data to compare to the first parameter</li>\n             *       </ul>\n             *     </li>\n             *     <li>\n             *       Function return:\n             *       <ul>\n             *         <li>{int} Sorting match: <0 if first parameter should be sorted lower than\n             *           the second parameter, ===0 if the two parameters are equal and >0 if\n             *           the first parameter should be sorted height than the second parameter.</li>\n             *       </ul>\n             *     </il>\n             *   </ul>\n             *  @type object\n             *  @default {}\n             *\n             *  @example\n             *    // Case-sensitive string sorting, with no pre-formatting method\n             *    $.extend( $.fn.dataTableExt.oSort, {\n             *      \"string-case-asc\": function(x,y) {\n             *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n             *      },\n             *      \"string-case-desc\": function(x,y) {\n             *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n             *      }\n             *    } );\n             *\n             *  @example\n             *    // Case-insensitive string sorting, with pre-formatting\n             *    $.extend( $.fn.dataTableExt.oSort, {\n             *      \"string-pre\": function(x) {\n             *        return x.toLowerCase();\n             *      },\n             *      \"string-asc\": function(x,y) {\n             *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n             *      },\n             *      \"string-desc\": function(x,y) {\n             *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n             *      }\n             *    } );\n             */\n            \"oSort\": {},\n\n\n            /**\n             * Version string for plug-ins to check compatibility. Allowed format is\n             * a.b.c.d.e where: a:int, b:int, c:int, d:string(dev|beta), e:int. d and\n             * e are optional\n             *  @type string\n             *  @default Version number\n             */\n            \"sVersion\": DataTable.version,\n\n\n            /**\n             * How should DataTables report an error. Can take the value 'alert' or 'throw'\n             *  @type string\n             *  @default alert\n             */\n            \"sErrMode\": \"alert\",\n\n\n            /**\n             * Store information for DataTables to access globally about other instances\n             *  @namespace\n             *  @private\n             */\n            \"_oExternConfig\": {\n                /* int:iNextUnique - next unique number for an instance */\n                \"iNextUnique\": 0\n            }\n        };\n\n\n        /**\n         * Template object for the way in which DataTables holds information about\n         * search information for the global filter and individual column filters.\n         *  @namespace\n         */\n        DataTable.models.oSearch = {\n            /**\n             * Flag to indicate if the filtering should be case insensitive or not\n             *  @type boolean\n             *  @default true\n             */\n            \"bCaseInsensitive\": true,\n\n            /**\n             * Applied search term\n             *  @type string\n             *  @default <i>Empty string</i>\n             */\n            \"sSearch\": \"\",\n\n            /**\n             * Flag to indicate if the search term should be interpreted as a\n             * regular expression (true) or not (false) and therefore and special\n             * regex characters escaped.\n             *  @type boolean\n             *  @default false\n             */\n            \"bRegex\": false,\n\n            /**\n             * Flag to indicate if DataTables is to use its smart filtering or not.\n             *  @type boolean\n             *  @default true\n             */\n            \"bSmart\": true\n        };\n\n\n        /**\n         * Template object for the way in which DataTables holds information about\n         * each individual row. This is the object format used for the settings\n         * aoData array.\n         *  @namespace\n         */\n        DataTable.models.oRow = {\n            /**\n             * TR element for the row\n             *  @type node\n             *  @default null\n             */\n            \"nTr\": null,\n\n            /**\n             * Data object from the original data source for the row. This is either\n             * an array if using the traditional form of DataTables, or an object if\n             * using mData options. The exact type will depend on the passed in\n             * data from the data source, or will be an array if using DOM a data\n             * source.\n             *  @type array|object\n             *  @default []\n             */\n            \"_aData\": [],\n\n            /**\n             * Sorting data cache - this array is ostensibly the same length as the\n             * number of columns (although each index is generated only as it is\n             * needed), and holds the data that is used for sorting each column in the\n             * row. We do this cache generation at the start of the sort in order that\n             * the formatting of the sort data need be done only once for each cell\n             * per sort. This array should not be read from or written to by anything\n             * other than the master sorting methods.\n             *  @type array\n             *  @default []\n             *  @private\n             */\n            \"_aSortData\": [],\n\n            /**\n             * Array of TD elements that are cached for hidden rows, so they can be\n             * reinserted into the table if a column is made visible again (or to act\n             * as a store if a column is made hidden). Only hidden columns have a\n             * reference in the array. For non-hidden columns the value is either\n             * undefined or null.\n             *  @type array nodes\n             *  @default []\n             *  @private\n             */\n            \"_anHidden\": [],\n\n            /**\n             * Cache of the class name that DataTables has applied to the row, so we\n             * can quickly look at this variable rather than needing to do a DOM check\n             * on className for the nTr property.\n             *  @type string\n             *  @default <i>Empty string</i>\n             *  @private\n             */\n            \"_sRowStripe\": \"\"\n        };\n\n\n        /**\n         * Template object for the column information object in DataTables. This object\n         * is held in the settings aoColumns array and contains all the information that\n         * DataTables needs about each individual column.\n         *\n         * Note that this object is related to {@link DataTable.defaults.columns}\n         * but this one is the internal data store for DataTables's cache of columns.\n         * It should NOT be manipulated outside of DataTables. Any configuration should\n         * be done through the initialisation options.\n         *  @namespace\n         */\n        DataTable.models.oColumn = {\n            /**\n             * A list of the columns that sorting should occur on when this column\n             * is sorted. That this property is an array allows multi-column sorting\n             * to be defined for a column (for example first name / last name columns\n             * would benefit from this). The values are integers pointing to the\n             * columns to be sorted on (typically it will be a single integer pointing\n             * at itself, but that doesn't need to be the case).\n             *  @type array\n             */\n            \"aDataSort\": null,\n\n            /**\n             * Define the sorting directions that are applied to the column, in sequence\n             * as the column is repeatedly sorted upon - i.e. the first value is used\n             * as the sorting direction when the column if first sorted (clicked on).\n             * Sort it again (click again) and it will move on to the next index.\n             * Repeat until loop.\n             *  @type array\n             */\n            \"asSorting\": null,\n\n            /**\n             * Flag to indicate if the column is searchable, and thus should be included\n             * in the filtering or not.\n             *  @type boolean\n             */\n            \"bSearchable\": null,\n\n            /**\n             * Flag to indicate if the column is sortable or not.\n             *  @type boolean\n             */\n            \"bSortable\": null,\n\n            /**\n             * <code>Deprecated</code> When using fnRender, you have two options for what\n             * to do with the data, and this property serves as the switch. Firstly, you\n             * can have the sorting and filtering use the rendered value (true - default),\n             * or you can have the sorting and filtering us the original value (false).\n             *\n             * Please note that this option has now been deprecated and will be removed\n             * in the next version of DataTables. Please use mRender / mData rather than\n             * fnRender.\n             *  @type boolean\n             *  @deprecated\n             */\n            \"bUseRendered\": null,\n\n            /**\n             * Flag to indicate if the column is currently visible in the table or not\n             *  @type boolean\n             */\n            \"bVisible\": null,\n\n            /**\n             * Flag to indicate to the type detection method if the automatic type\n             * detection should be used, or if a column type (sType) has been specified\n             *  @type boolean\n             *  @default true\n             *  @private\n             */\n            \"_bAutoType\": true,\n\n            /**\n             * Developer definable function that is called whenever a cell is created (Ajax source,\n             * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n             * allowing you to modify the DOM element (add background colour for example) when the\n             * element is available.\n             *  @type function\n             *  @param {element} nTd The TD node that has been created\n             *  @param {*} sData The Data for the cell\n             *  @param {array|object} oData The data for the whole row\n             *  @param {int} iRow The row index for the aoData data store\n             *  @default null\n             */\n            \"fnCreatedCell\": null,\n\n            /**\n             * Function to get data from a cell in a column. You should <b>never</b>\n             * access data directly through _aData internally in DataTables - always use\n             * the method attached to this property. It allows mData to function as\n             * required. This function is automatically assigned by the column\n             * initialisation method\n             *  @type function\n             *  @param {array|object} oData The data array/object for the array\n             *    (i.e. aoData[]._aData)\n             *  @param {string} sSpecific The specific data type you want to get -\n             *    'display', 'type' 'filter' 'sort'\n             *  @returns {*} The data for the cell from the given row's data\n             *  @default null\n             */\n            \"fnGetData\": null,\n\n            /**\n             * <code>Deprecated</code> Custom display function that will be called for the\n             * display of each cell in this column.\n             *\n             * Please note that this option has now been deprecated and will be removed\n             * in the next version of DataTables. Please use mRender / mData rather than\n             * fnRender.\n             *  @type function\n             *  @param {object} o Object with the following parameters:\n             *  @param {int}    o.iDataRow The row in aoData\n             *  @param {int}    o.iDataColumn The column in question\n             *  @param {array}  o.aData The data for the row in question\n             *  @param {object} o.oSettings The settings object for this DataTables instance\n             *  @returns {string} The string you which to use in the display\n             *  @default null\n             *  @deprecated\n             */\n            \"fnRender\": null,\n\n            /**\n             * Function to set data for a cell in the column. You should <b>never</b>\n             * set the data directly to _aData internally in DataTables - always use\n             * this method. It allows mData to function as required. This function\n             * is automatically assigned by the column initialisation method\n             *  @type function\n             *  @param {array|object} oData The data array/object for the array\n             *    (i.e. aoData[]._aData)\n             *  @param {*} sValue Value to set\n             *  @default null\n             */\n            \"fnSetData\": null,\n\n            /**\n             * Property to read the value for the cells in the column from the data\n             * source array / object. If null, then the default content is used, if a\n             * function is given then the return from the function is used.\n             *  @type function|int|string|null\n             *  @default null\n             */\n            \"mData\": null,\n\n            /**\n             * Partner property to mData which is used (only when defined) to get\n             * the data - i.e. it is basically the same as mData, but without the\n             * 'set' option, and also the data fed to it is the result from mData.\n             * This is the rendering method to match the data method of mData.\n             *  @type function|int|string|null\n             *  @default null\n             */\n            \"mRender\": null,\n\n            /**\n             * Unique header TH/TD element for this column - this is what the sorting\n             * listener is attached to (if sorting is enabled.)\n             *  @type node\n             *  @default null\n             */\n            \"nTh\": null,\n\n            /**\n             * Unique footer TH/TD element for this column (if there is one). Not used\n             * in DataTables as such, but can be used for plug-ins to reference the\n             * footer for each column.\n             *  @type node\n             *  @default null\n             */\n            \"nTf\": null,\n\n            /**\n             * The class to apply to all TD elements in the table's TBODY for the column\n             *  @type string\n             *  @default null\n             */\n            \"sClass\": null,\n\n            /**\n             * When DataTables calculates the column widths to assign to each column,\n             * it finds the longest string in each column and then constructs a\n             * temporary table and reads the widths from that. The problem with this\n             * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n             * string - thus the calculation can go wrong (doing it properly and putting\n             * it into an DOM object and measuring that is horribly(!) slow). Thus as\n             * a \"work around\" we provide this option. It will append its value to the\n             * text that is found to be the longest string for the column - i.e. padding.\n             *  @type string\n             */\n            \"sContentPadding\": null,\n\n            /**\n             * Allows a default value to be given for a column's data, and will be used\n             * whenever a null data source is encountered (this can be because mData\n             * is set to null, or because the data source itself is null).\n             *  @type string\n             *  @default null\n             */\n            \"sDefaultContent\": null,\n\n            /**\n             * Name for the column, allowing reference to the column by name as well as\n             * by index (needs a lookup to work by name).\n             *  @type string\n             */\n            \"sName\": null,\n\n            /**\n             * Custom sorting data type - defines which of the available plug-ins in\n             * afnSortData the custom sorting will use - if any is defined.\n             *  @type string\n             *  @default std\n             */\n            \"sSortDataType\": 'std',\n\n            /**\n             * Class to be applied to the header element when sorting on this column\n             *  @type string\n             *  @default null\n             */\n            \"sSortingClass\": null,\n\n            /**\n             * Class to be applied to the header element when sorting on this column -\n             * when jQuery UI theming is used.\n             *  @type string\n             *  @default null\n             */\n            \"sSortingClassJUI\": null,\n\n            /**\n             * Title of the column - what is seen in the TH element (nTh).\n             *  @type string\n             */\n            \"sTitle\": null,\n\n            /**\n             * Column sorting and filtering type\n             *  @type string\n             *  @default null\n             */\n            \"sType\": null,\n\n            /**\n             * Width of the column\n             *  @type string\n             *  @default null\n             */\n            \"sWidth\": null,\n\n            /**\n             * Width of the column when it was first \"encountered\"\n             *  @type string\n             *  @default null\n             */\n            \"sWidthOrig\": null\n        };\n\n\n        /**\n         * Initialisation options that can be given to DataTables at initialisation\n         * time.\n         *  @namespace\n         */\n        DataTable.defaults = {\n            /**\n             * An array of data to use for the table, passed in at initialisation which\n             * will be used in preference to any data which is already in the DOM. This is\n             * particularly useful for constructing tables purely in Javascript, for\n             * example with a custom Ajax call.\n             *  @type array\n             *  @default null\n             *  @dtopt Option\n             *\n             *  @example\n             *    // Using a 2D array data source\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"aaData\": [\n             *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n             *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n             *        ],\n             *        \"aoColumns\": [\n             *          { \"sTitle\": \"Engine\" },\n             *          { \"sTitle\": \"Browser\" },\n             *          { \"sTitle\": \"Platform\" },\n             *          { \"sTitle\": \"Version\" },\n             *          { \"sTitle\": \"Grade\" }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Using an array of objects as a data source (mData)\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"aaData\": [\n             *          {\n             *            \"engine\":   \"Trident\",\n             *            \"browser\":  \"Internet Explorer 4.0\",\n             *            \"platform\": \"Win 95+\",\n             *            \"version\":  4,\n             *            \"grade\":    \"X\"\n             *          },\n             *          {\n             *            \"engine\":   \"Trident\",\n             *            \"browser\":  \"Internet Explorer 5.0\",\n             *            \"platform\": \"Win 95+\",\n             *            \"version\":  5,\n             *            \"grade\":    \"C\"\n             *          }\n             *        ],\n             *        \"aoColumns\": [\n             *          { \"sTitle\": \"Engine\",   \"mData\": \"engine\" },\n             *          { \"sTitle\": \"Browser\",  \"mData\": \"browser\" },\n             *          { \"sTitle\": \"Platform\", \"mData\": \"platform\" },\n             *          { \"sTitle\": \"Version\",  \"mData\": \"version\" },\n             *          { \"sTitle\": \"Grade\",    \"mData\": \"grade\" }\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"aaData\": null,\n\n\n            /**\n             * If sorting is enabled, then DataTables will perform a first pass sort on\n             * initialisation. You can define which column(s) the sort is performed upon,\n             * and the sorting direction, with this variable. The aaSorting array should\n             * contain an array for each column to be sorted initially containing the\n             * column's index and a direction string ('asc' or 'desc').\n             *  @type array\n             *  @default [[0,'asc']]\n             *  @dtopt Option\n             *\n             *  @example\n             *    // Sort by 3rd column first, and then 4th column\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aaSorting\": [[2,'asc'], [3,'desc']]\n             *      } );\n             *    } );\n             *\n             *    // No initial sorting\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aaSorting\": []\n             *      } );\n             *    } );\n             */\n            \"aaSorting\": [[0, 'asc']],\n\n\n            /**\n             * This parameter is basically identical to the aaSorting parameter, but\n             * cannot be overridden by user interaction with the table. What this means\n             * is that you could have a column (visible or hidden) which the sorting will\n             * always be forced on first - any sorting after that (from the user) will\n             * then be performed as required. This can be useful for grouping rows\n             * together.\n             *  @type array\n             *  @default null\n             *  @dtopt Option\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aaSortingFixed\": [[0,'asc']]\n             *      } );\n             *    } )\n             */\n            \"aaSortingFixed\": null,\n\n\n            /**\n             * This parameter allows you to readily specify the entries in the length drop\n             * down menu that DataTables shows when pagination is enabled. It can be\n             * either a 1D array of options which will be used for both the displayed\n             * option and the value, or a 2D array which will use the array in the first\n             * position as the value, and the array in the second position as the\n             * displayed options (useful for language strings such as 'All').\n             *  @type array\n             *  @default [ 10, 25, 50, 100 ]\n             *  @dtopt Option\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aLengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Setting the default display length as well as length menu\n             *    // This is likely to be wanted if you remove the '10' option which\n             *    // is the iDisplayLength default.\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"iDisplayLength\": 25,\n             *        \"aLengthMenu\": [[25, 50, 100, -1], [25, 50, 100, \"All\"]]\n             *      } );\n             *    } );\n             */\n            \"aLengthMenu\": [10, 25, 50, 100],\n\n\n            /**\n             * The aoColumns option in the initialisation parameter allows you to define\n             * details about the way individual columns behave. For a full list of\n             * column options that can be set, please see\n             * {@link DataTable.defaults.columns}. Note that if you use aoColumns to\n             * define your columns, you must have an entry in the array for every single\n             * column that you have in your table (these can be null if you don't which\n             * to specify any options).\n             *  @member\n             */\n            \"aoColumns\": null,\n\n            /**\n             * Very similar to aoColumns, aoColumnDefs allows you to target a specific\n             * column, multiple columns, or all columns, using the aTargets property of\n             * each object in the array. This allows great flexibility when creating\n             * tables, as the aoColumnDefs arrays can be of any length, targeting the\n             * columns you specifically want. aoColumnDefs may use any of the column\n             * options available: {@link DataTable.defaults.columns}, but it _must_\n             * have aTargets defined in each object in the array. Values in the aTargets\n             * array may be:\n             *   <ul>\n             *     <li>a string - class name will be matched on the TH for the column</li>\n             *     <li>0 or a positive integer - column index counting from the left</li>\n             *     <li>a negative integer - column index counting from the right</li>\n             *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n             *   </ul>\n             *  @member\n             */\n            \"aoColumnDefs\": null,\n\n\n            /**\n             * Basically the same as oSearch, this parameter defines the individual column\n             * filtering state at initialisation time. The array must be of the same size\n             * as the number of columns, and each element be an object with the parameters\n             * \"sSearch\" and \"bEscapeRegex\" (the latter is optional). 'null' is also\n             * accepted and the default will be used.\n             *  @type array\n             *  @default []\n             *  @dtopt Option\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoSearchCols\": [\n             *          null,\n             *          { \"sSearch\": \"My filter\" },\n             *          null,\n             *          { \"sSearch\": \"^[0-9]\", \"bEscapeRegex\": false }\n             *        ]\n             *      } );\n             *    } )\n             */\n            \"aoSearchCols\": [],\n\n\n            /**\n             * An array of CSS classes that should be applied to displayed rows. This\n             * array may be of any length, and DataTables will apply each class\n             * sequentially, looping when required.\n             *  @type array\n             *  @default null <i>Will take the values determined by the oClasses.sStripe*\n             *    options</i>\n             *  @dtopt Option\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"asStripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n             *      } );\n             *    } )\n             */\n            \"asStripeClasses\": null,\n\n\n            /**\n             * Enable or disable automatic column width calculation. This can be disabled\n             * as an optimisation (it takes some time to calculate the widths) if the\n             * tables widths are passed in using aoColumns.\n             *  @type boolean\n             *  @default true\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"bAutoWidth\": false\n             *      } );\n             *    } );\n             */\n            \"bAutoWidth\": true,\n\n\n            /**\n             * Deferred rendering can provide DataTables with a huge speed boost when you\n             * are using an Ajax or JS data source for the table. This option, when set to\n             * true, will cause DataTables to defer the creation of the table elements for\n             * each row until they are needed for a draw - saving a significant amount of\n             * time.\n             *  @type boolean\n             *  @default false\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      var oTable = $('#example').dataTable( {\n             *        \"sAjaxSource\": \"sources/arrays.txt\",\n             *        \"bDeferRender\": true\n             *      } );\n             *    } );\n             */\n            \"bDeferRender\": false,\n\n\n            /**\n             * Replace a DataTable which matches the given selector and replace it with\n             * one which has the properties of the new initialisation object passed. If no\n             * table matches the selector, then the new DataTable will be constructed as\n             * per normal.\n             *  @type boolean\n             *  @default false\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"sScrollY\": \"200px\",\n             *        \"bPaginate\": false\n             *      } );\n             *\n             *      // Some time later....\n             *      $('#example').dataTable( {\n             *        \"bFilter\": false,\n             *        \"bDestroy\": true\n             *      } );\n             *    } );\n             */\n            \"bDestroy\": false,\n\n\n            /**\n             * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n             * that it allows the end user to input multiple words (space separated) and\n             * will match a row containing those words, even if not in the order that was\n             * specified (this allow matching across multiple columns). Note that if you\n             * wish to use filtering in DataTables this must remain 'true' - to remove the\n             * default filtering input box and retain filtering abilities, please use\n             * {@link DataTable.defaults.sDom}.\n             *  @type boolean\n             *  @default true\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"bFilter\": false\n             *      } );\n             *    } );\n             */\n            \"bFilter\": true,\n\n\n            /**\n             * Enable or disable the table information display. This shows information\n             * about the data that is currently visible on the page, including information\n             * about filtered data if that action is being performed.\n             *  @type boolean\n             *  @default true\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"bInfo\": false\n             *      } );\n             *    } );\n             */\n            \"bInfo\": true,\n\n\n            /**\n             * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some\n             * slightly different and additional mark-up from what DataTables has\n             * traditionally used).\n             *  @type boolean\n             *  @default false\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bJQueryUI\": true\n             *      } );\n             *    } );\n             */\n            \"bJQueryUI\": false,\n\n\n            /**\n             * Allows the end user to select the size of a formatted page from a select\n             * menu (sizes are 10, 25, 50 and 100). Requires pagination (bPaginate).\n             *  @type boolean\n             *  @default true\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"bLengthChange\": false\n             *      } );\n             *    } );\n             */\n            \"bLengthChange\": true,\n\n\n            /**\n             * Enable or disable pagination.\n             *  @type boolean\n             *  @default true\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"bPaginate\": false\n             *      } );\n             *    } );\n             */\n            \"bPaginate\": true,\n\n\n            /**\n             * Enable or disable the display of a 'processing' indicator when the table is\n             * being processed (e.g. a sort). This is particularly useful for tables with\n             * large amounts of data where it can take a noticeable amount of time to sort\n             * the entries.\n             *  @type boolean\n             *  @default false\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"bProcessing\": true\n             *      } );\n             *    } );\n             */\n            \"bProcessing\": false,\n\n\n            /**\n             * Retrieve the DataTables object for the given selector. Note that if the\n             * table has already been initialised, this parameter will cause DataTables\n             * to simply return the object that has already been set up - it will not take\n             * account of any changes you might have made to the initialisation object\n             * passed to DataTables (setting this parameter to true is an acknowledgement\n             * that you understand this). bDestroy can be used to reinitialise a table if\n             * you need.\n             *  @type boolean\n             *  @default false\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      initTable();\n             *      tableActions();\n             *    } );\n             *\n             *    function initTable ()\n             *    {\n             *      return $('#example').dataTable( {\n             *        \"sScrollY\": \"200px\",\n             *        \"bPaginate\": false,\n             *        \"bRetrieve\": true\n             *      } );\n             *    }\n             *\n             *    function tableActions ()\n             *    {\n             *      var oTable = initTable();\n             *      // perform API operations with oTable\n             *    }\n             */\n            \"bRetrieve\": false,\n\n\n            /**\n             * Indicate if DataTables should be allowed to set the padding / margin\n             * etc for the scrolling header elements or not. Typically you will want\n             * this.\n             *  @type boolean\n             *  @default true\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bScrollAutoCss\": false,\n             *        \"sScrollY\": \"200px\"\n             *      } );\n             *    } );\n             */\n            \"bScrollAutoCss\": true,\n\n\n            /**\n             * When vertical (y) scrolling is enabled, DataTables will force the height of\n             * the table's viewport to the given height at all times (useful for layout).\n             * However, this can look odd when filtering data down to a small data set,\n             * and the footer is left \"floating\" further down. This parameter (when\n             * enabled) will cause DataTables to collapse the table's viewport down when\n             * the result set will fit within the given Y height.\n             *  @type boolean\n             *  @default false\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"sScrollY\": \"200\",\n             *        \"bScrollCollapse\": true\n             *      } );\n             *    } );\n             */\n            \"bScrollCollapse\": false,\n\n\n            /**\n             * Enable infinite scrolling for DataTables (to be used in combination with\n             * sScrollY). Infinite scrolling means that DataTables will continually load\n             * data as a user scrolls through a table, which is very useful for large\n             * dataset. This cannot be used with pagination, which is automatically\n             * disabled. Note - the Scroller extra for DataTables is recommended in\n             * in preference to this option.\n             *  @type boolean\n             *  @default false\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bScrollInfinite\": true,\n             *        \"bScrollCollapse\": true,\n             *        \"sScrollY\": \"200px\"\n             *      } );\n             *    } );\n             */\n            \"bScrollInfinite\": false,\n\n\n            /**\n             * Configure DataTables to use server-side processing. Note that the\n             * sAjaxSource parameter must also be given in order to give DataTables a\n             * source to obtain the required data for each draw.\n             *  @type boolean\n             *  @default false\n             *  @dtopt Features\n             *  @dtopt Server-side\n             *\n             *  @example\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"bServerSide\": true,\n             *        \"sAjaxSource\": \"xhr.php\"\n             *      } );\n             *    } );\n             */\n            \"bServerSide\": false,\n\n\n            /**\n             * Enable or disable sorting of columns. Sorting of individual columns can be\n             * disabled by the \"bSortable\" option for each column.\n             *  @type boolean\n             *  @default true\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"bSort\": false\n             *      } );\n             *    } );\n             */\n            \"bSort\": true,\n\n\n            /**\n             * Allows control over whether DataTables should use the top (true) unique\n             * cell that is found for a single column, or the bottom (false - default).\n             * This is useful when using complex headers.\n             *  @type boolean\n             *  @default false\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bSortCellsTop\": true\n             *      } );\n             *    } );\n             */\n            \"bSortCellsTop\": false,\n\n\n            /**\n             * Enable or disable the addition of the classes 'sorting_1', 'sorting_2' and\n             * 'sorting_3' to the columns which are currently being sorted on. This is\n             * presented as a feature switch as it can increase processing time (while\n             * classes are removed and added) so for large data sets you might want to\n             * turn this off.\n             *  @type boolean\n             *  @default true\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"bSortClasses\": false\n             *      } );\n             *    } );\n             */\n            \"bSortClasses\": true,\n\n\n            /**\n             * Enable or disable state saving. When enabled a cookie will be used to save\n             * table display information such as pagination information, display length,\n             * filtering and sorting. As such when the end user reloads the page the\n             * display display will match what thy had previously set up.\n             *  @type boolean\n             *  @default false\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"bStateSave\": true\n             *      } );\n             *    } );\n             */\n            \"bStateSave\": false,\n\n\n            /**\n             * Customise the cookie and / or the parameters being stored when using\n             * DataTables with state saving enabled. This function is called whenever\n             * the cookie is modified, and it expects a fully formed cookie string to be\n             * returned. Note that the data object passed in is a Javascript object which\n             * must be converted to a string (JSON.stringify for example).\n             *  @type function\n             *  @param {string} sName Name of the cookie defined by DataTables\n             *  @param {object} oData Data to be stored in the cookie\n             *  @param {string} sExpires Cookie expires string\n             *  @param {string} sPath Path of the cookie to set\n             *  @returns {string} Cookie formatted string (which should be encoded by\n             *    using encodeURIComponent())\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    $(document).ready( function () {\n             *      $('#example').dataTable( {\n             *        \"fnCookieCallback\": function (sName, oData, sExpires, sPath) {\n             *          // Customise oData or sName or whatever else here\n             *          return sName + \"=\"+JSON.stringify(oData)+\"; expires=\" + sExpires +\"; path=\" + sPath;\n             *        }\n             *      } );\n             *    } );\n             */\n            \"fnCookieCallback\": null,\n\n\n            /**\n             * This function is called when a TR element is created (and all TD child\n             * elements have been inserted), or registered if using a DOM source, allowing\n             * manipulation of the TR element (adding classes etc).\n             *  @type function\n             *  @param {node} nRow \"TR\" element for the current row\n             *  @param {array} aData Raw data array for this row\n             *  @param {int} iDataIndex The index of this row in aoData\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"fnCreatedRow\": function( nRow, aData, iDataIndex ) {\n             *          // Bold the grade for all 'A' grade browsers\n             *          if ( aData[4] == \"A\" )\n             *          {\n             *            $('td:eq(4)', nRow).html( '<b>A</b>' );\n             *          }\n             *        }\n             *      } );\n             *    } );\n             */\n            \"fnCreatedRow\": null,\n\n\n            /**\n             * This function is called on every 'draw' event, and allows you to\n             * dynamically modify any aspect you want about the created DOM.\n             *  @type function\n             *  @param {object} oSettings DataTables settings object\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"fnDrawCallback\": function( oSettings ) {\n             *          alert( 'DataTables has redrawn the table' );\n             *        }\n             *      } );\n             *    } );\n             */\n            \"fnDrawCallback\": null,\n\n\n            /**\n             * Identical to fnHeaderCallback() but for the table footer this function\n             * allows you to modify the table footer on every 'draw' even.\n             *  @type function\n             *  @param {node} nFoot \"TR\" element for the footer\n             *  @param {array} aData Full table data (as derived from the original HTML)\n             *  @param {int} iStart Index for the current display starting point in the\n             *    display array\n             *  @param {int} iEnd Index for the current display ending point in the\n             *    display array\n             *  @param {array int} aiDisplay Index array to translate the visual position\n             *    to the full data array\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"fnFooterCallback\": function( nFoot, aData, iStart, iEnd, aiDisplay ) {\n             *          nFoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+iStart;\n             *        }\n             *      } );\n             *    } )\n             */\n            \"fnFooterCallback\": null,\n\n\n            /**\n             * When rendering large numbers in the information element for the table\n             * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n             * to have a comma separator for the 'thousands' units (e.g. 1 million is\n             * rendered as \"1,000,000\") to help readability for the end user. This\n             * function will override the default method DataTables uses.\n             *  @type function\n             *  @member\n             *  @param {int} iIn number to be formatted\n             *  @returns {string} formatted string for DataTables to show the number\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"fnFormatNumber\": function ( iIn ) {\n             *          if ( iIn &lt; 1000 ) {\n             *            return iIn;\n             *          } else {\n             *            var\n             *              s=(iIn+\"\"),\n             *              a=s.split(\"\"), out=\"\",\n             *              iLen=s.length;\n             *\n             *            for ( var i=0 ; i&lt;iLen ; i++ ) {\n             *              if ( i%3 === 0 &amp;&amp; i !== 0 ) {\n             *                out = \"'\"+out;\n             *              }\n             *              out = a[iLen-i-1]+out;\n             *            }\n             *          }\n             *          return out;\n             *        };\n             *      } );\n             *    } );\n             */\n            \"fnFormatNumber\": function(iIn) {\n                if (iIn < 1000) {\n                    // A small optimisation for what is likely to be the majority of use cases\n                    return iIn;\n                }\n\n                var s = (iIn + \"\"), a = s.split(\"\"), out = \"\", iLen = s.length;\n\n                for (var i = 0; i < iLen; i++) {\n                    if (i % 3 === 0 && i !== 0) {\n                        out = this.oLanguage.sInfoThousands + out;\n                    }\n                    out = a[iLen - i - 1] + out;\n                }\n                return out;\n            },\n\n\n            /**\n             * This function is called on every 'draw' event, and allows you to\n             * dynamically modify the header row. This can be used to calculate and\n             * display useful information about the table.\n             *  @type function\n             *  @param {node} nHead \"TR\" element for the header\n             *  @param {array} aData Full table data (as derived from the original HTML)\n             *  @param {int} iStart Index for the current display starting point in the\n             *    display array\n             *  @param {int} iEnd Index for the current display ending point in the\n             *    display array\n             *  @param {array int} aiDisplay Index array to translate the visual position\n             *    to the full data array\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"fnHeaderCallback\": function( nHead, aData, iStart, iEnd, aiDisplay ) {\n             *          nHead.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(iEnd-iStart)+\" records\";\n             *        }\n             *      } );\n             *    } )\n             */\n            \"fnHeaderCallback\": null,\n\n\n            /**\n             * The information element can be used to convey information about the current\n             * state of the table. Although the internationalisation options presented by\n             * DataTables are quite capable of dealing with most customisations, there may\n             * be times where you wish to customise the string further. This callback\n             * allows you to do exactly that.\n             *  @type function\n             *  @param {object} oSettings DataTables settings object\n             *  @param {int} iStart Starting position in data for the draw\n             *  @param {int} iEnd End position in data for the draw\n             *  @param {int} iMax Total number of rows in the table (regardless of\n             *    filtering)\n             *  @param {int} iTotal Total number of rows in the data set, after filtering\n             *  @param {string} sPre The string that DataTables has formatted using it's\n             *    own rules\n             *  @returns {string} The string to be displayed in the information element.\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    $('#example').dataTable( {\n             *      \"fnInfoCallback\": function( oSettings, iStart, iEnd, iMax, iTotal, sPre ) {\n             *        return iStart +\" to \"+ iEnd;\n             *      }\n             *    } );\n             */\n            \"fnInfoCallback\": null,\n\n\n            /**\n             * Called when the table has been initialised. Normally DataTables will\n             * initialise sequentially and there will be no need for this function,\n             * however, this does not hold true when using external language information\n             * since that is obtained using an async XHR call.\n             *  @type function\n             *  @param {object} oSettings DataTables settings object\n             *  @param {object} json The JSON object request from the server - only\n             *    present if client-side Ajax sourced data is used\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"fnInitComplete\": function(oSettings, json) {\n             *          alert( 'DataTables has finished its initialisation.' );\n             *        }\n             *      } );\n             *    } )\n             */\n            \"fnInitComplete\": null,\n\n\n            /**\n             * Called at the very start of each table draw and can be used to cancel the\n             * draw by returning false, any other return (including undefined) results in\n             * the full draw occurring).\n             *  @type function\n             *  @param {object} oSettings DataTables settings object\n             *  @returns {boolean} False will cancel the draw, anything else (including no\n             *    return) will allow it to complete.\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"fnPreDrawCallback\": function( oSettings ) {\n             *          if ( $('#test').val() == 1 ) {\n             *            return false;\n             *          }\n             *        }\n             *      } );\n             *    } );\n             */\n            \"fnPreDrawCallback\": null,\n\n\n            /**\n             * This function allows you to 'post process' each row after it have been\n             * generated for each table draw, but before it is rendered on screen. This\n             * function might be used for setting the row class name etc.\n             *  @type function\n             *  @param {node} nRow \"TR\" element for the current row\n             *  @param {array} aData Raw data array for this row\n             *  @param {int} iDisplayIndex The display index for the current table draw\n             *  @param {int} iDisplayIndexFull The index of the data in the full list of\n             *    rows (after filtering)\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"fnRowCallback\": function( nRow, aData, iDisplayIndex, iDisplayIndexFull ) {\n             *          // Bold the grade for all 'A' grade browsers\n             *          if ( aData[4] == \"A\" )\n             *          {\n             *            $('td:eq(4)', nRow).html( '<b>A</b>' );\n             *          }\n             *        }\n             *      } );\n             *    } );\n             */\n            \"fnRowCallback\": null,\n\n\n            /**\n             * This parameter allows you to override the default function which obtains\n             * the data from the server ($.getJSON) so something more suitable for your\n             * application. For example you could use POST data, or pull information from\n             * a Gears or AIR database.\n             *  @type function\n             *  @member\n             *  @param {string} sSource HTTP source to obtain the data from (sAjaxSource)\n             *  @param {array} aoData A key/value pair object containing the data to send\n             *    to the server\n             *  @param {function} fnCallback to be called on completion of the data get\n             *    process that will draw the data on the page.\n             *  @param {object} oSettings DataTables settings object\n             *  @dtopt Callbacks\n             *  @dtopt Server-side\n             *\n             *  @example\n             *    // POST data to server\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bProcessing\": true,\n             *        \"bServerSide\": true,\n             *        \"sAjaxSource\": \"xhr.php\",\n             *        \"fnServerData\": function ( sSource, aoData, fnCallback, oSettings ) {\n             *          oSettings.jqXHR = $.ajax( {\n             *            \"dataType\": 'json',\n             *            \"type\": \"POST\",\n             *            \"url\": sSource,\n             *            \"data\": aoData,\n             *            \"success\": fnCallback\n             *          } );\n             *        }\n             *      } );\n             *    } );\n             */\n            \"fnServerData\": function(sUrl, aoData, fnCallback, oSettings) {\n                oSettings.jqXHR = $.ajax({\n                    \"url\": sUrl,\n                    \"data\": aoData,\n                    \"success\": function(json) {\n                        if (json.sError) {\n                            oSettings.oApi._fnLog(oSettings, 0, json.sError);\n                        }\n\n                        $(oSettings.oInstance).trigger('xhr', [oSettings, json]);\n                        fnCallback(json);\n                    },\n                    \"dataType\": \"json\",\n                    \"cache\": false,\n                    \"type\": oSettings.sServerMethod,\n                    \"error\": function(xhr, error, thrown) {\n                        if (error == \"parsererror\") {\n                            oSettings.oApi._fnLog(oSettings, 0, \"DataTables warning: JSON data from \" +\n                                \"server could not be parsed. This is caused by a JSON formatting error.\");\n                        }\n                    }\n                });\n            },\n\n\n            /**\n             * It is often useful to send extra data to the server when making an Ajax\n             * request - for example custom filtering information, and this callback\n             * function makes it trivial to send extra information to the server. The\n             * passed in parameter is the data set that has been constructed by\n             * DataTables, and you can add to this or modify it as you require.\n             *  @type function\n             *  @param {array} aoData Data array (array of objects which are name/value\n             *    pairs) that has been constructed by DataTables and will be sent to the\n             *    server. In the case of Ajax sourced data with server-side processing\n             *    this will be an empty array, for server-side processing there will be a\n             *    significant number of parameters!\n             *  @returns {undefined} Ensure that you modify the aoData array passed in,\n             *    as this is passed by reference.\n             *  @dtopt Callbacks\n             *  @dtopt Server-side\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bProcessing\": true,\n             *        \"bServerSide\": true,\n             *        \"sAjaxSource\": \"scripts/server_processing.php\",\n             *        \"fnServerParams\": function ( aoData ) {\n             *          aoData.push( { \"name\": \"more_data\", \"value\": \"my_value\" } );\n             *        }\n             *      } );\n             *    } );\n             */\n            \"fnServerParams\": null,\n\n\n            /**\n             * Load the table state. With this function you can define from where, and how, the\n             * state of a table is loaded. By default DataTables will load from its state saving\n             * cookie, but you might wish to use local storage (HTML5) or a server-side database.\n             *  @type function\n             *  @member\n             *  @param {object} oSettings DataTables settings object\n             *  @return {object} The DataTables state object to be loaded\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bStateSave\": true,\n             *        \"fnStateLoad\": function (oSettings) {\n             *          var o;\n             *\n             *          // Send an Ajax request to the server to get the data. Note that\n             *          // this is a synchronous request.\n             *          $.ajax( {\n             *            \"url\": \"/state_load\",\n             *            \"async\": false,\n             *            \"dataType\": \"json\",\n             *            \"success\": function (json) {\n             *              o = json;\n             *            }\n             *          } );\n             *\n             *          return o;\n             *        }\n             *      } );\n             *    } );\n             */\n            \"fnStateLoad\": function(oSettings) {\n                var sData = this.oApi._fnReadCookie(oSettings.sCookiePrefix + oSettings.sInstance);\n                var oData;\n\n                try {\n                    oData = (typeof $.parseJSON === 'function') ?\n                        $.parseJSON(sData) : eval('(' + sData + ')');\n                } catch (e) {\n                    oData = null;\n                }\n\n                return oData;\n            },\n\n\n            /**\n             * Callback which allows modification of the saved state prior to loading that state.\n             * This callback is called when the table is loading state from the stored data, but\n             * prior to the settings object being modified by the saved state. Note that for\n             * plug-in authors, you should use the 'stateLoadParams' event to load parameters for\n             * a plug-in.\n             *  @type function\n             *  @param {object} oSettings DataTables settings object\n             *  @param {object} oData The state object that is to be loaded\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    // Remove a saved filter, so filtering is never loaded\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bStateSave\": true,\n             *        \"fnStateLoadParams\": function (oSettings, oData) {\n             *          oData.oSearch.sSearch = \"\";\n             *        }\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Disallow state loading by returning false\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bStateSave\": true,\n             *        \"fnStateLoadParams\": function (oSettings, oData) {\n             *          return false;\n             *        }\n             *      } );\n             *    } );\n             */\n            \"fnStateLoadParams\": null,\n\n\n            /**\n             * Callback that is called when the state has been loaded from the state saving method\n             * and the DataTables settings object has been modified as a result of the loaded state.\n             *  @type function\n             *  @param {object} oSettings DataTables settings object\n             *  @param {object} oData The state object that was loaded\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    // Show an alert with the filtering value that was saved\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bStateSave\": true,\n             *        \"fnStateLoaded\": function (oSettings, oData) {\n             *          alert( 'Saved filter was: '+oData.oSearch.sSearch );\n             *        }\n             *      } );\n             *    } );\n             */\n            \"fnStateLoaded\": null,\n\n\n            /**\n             * Save the table state. This function allows you to define where and how the state\n             * information for the table is stored - by default it will use a cookie, but you\n             * might want to use local storage (HTML5) or a server-side database.\n             *  @type function\n             *  @member\n             *  @param {object} oSettings DataTables settings object\n             *  @param {object} oData The state object to be saved\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bStateSave\": true,\n             *        \"fnStateSave\": function (oSettings, oData) {\n             *          // Send an Ajax request to the server with the state object\n             *          $.ajax( {\n             *            \"url\": \"/state_save\",\n             *            \"data\": oData,\n             *            \"dataType\": \"json\",\n             *            \"method\": \"POST\"\n             *            \"success\": function () {}\n             *          } );\n             *        }\n             *      } );\n             *    } );\n             */\n            \"fnStateSave\": function(oSettings, oData) {\n                this.oApi._fnCreateCookie(\n                    oSettings.sCookiePrefix + oSettings.sInstance,\n                    this.oApi._fnJsonString(oData),\n                    oSettings.iCookieDuration,\n                    oSettings.sCookiePrefix,\n                    oSettings.fnCookieCallback\n                );\n            },\n\n\n            /**\n             * Callback which allows modification of the state to be saved. Called when the table\n             * has changed state a new state save is required. This method allows modification of\n             * the state saving object prior to actually doing the save, including addition or\n             * other state properties or modification. Note that for plug-in authors, you should\n             * use the 'stateSaveParams' event to save parameters for a plug-in.\n             *  @type function\n             *  @param {object} oSettings DataTables settings object\n             *  @param {object} oData The state object to be saved\n             *  @dtopt Callbacks\n             *\n             *  @example\n             *    // Remove a saved filter, so filtering is never saved\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bStateSave\": true,\n             *        \"fnStateSaveParams\": function (oSettings, oData) {\n             *          oData.oSearch.sSearch = \"\";\n             *        }\n             *      } );\n             *    } );\n             */\n            \"fnStateSaveParams\": null,\n\n\n            /**\n             * Duration of the cookie which is used for storing session information. This\n             * value is given in seconds.\n             *  @type int\n             *  @default 7200 <i>(2 hours)</i>\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"iCookieDuration\": 60*60*24; // 1 day\n             *      } );\n             *    } )\n             */\n            \"iCookieDuration\": 7200,\n\n\n            /**\n             * When enabled DataTables will not make a request to the server for the first\n             * page draw - rather it will use the data already on the page (no sorting etc\n             * will be applied to it), thus saving on an XHR at load time. iDeferLoading\n             * is used to indicate that deferred loading is required, but it is also used\n             * to tell DataTables how many records there are in the full table (allowing\n             * the information element and pagination to be displayed correctly). In the case\n             * where a filtering is applied to the table on initial load, this can be\n             * indicated by giving the parameter as an array, where the first element is\n             * the number of records available after filtering and the second element is the\n             * number of records without filtering (allowing the table information element\n             * to be shown correctly).\n             *  @type int | array\n             *  @default null\n             *  @dtopt Options\n             *\n             *  @example\n             *    // 57 records available in the table, no filtering applied\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bServerSide\": true,\n             *        \"sAjaxSource\": \"scripts/server_processing.php\",\n             *        \"iDeferLoading\": 57\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bServerSide\": true,\n             *        \"sAjaxSource\": \"scripts/server_processing.php\",\n             *        \"iDeferLoading\": [ 57, 100 ],\n             *        \"oSearch\": {\n             *          \"sSearch\": \"my_filter\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"iDeferLoading\": null,\n\n\n            /**\n             * Number of rows to display on a single page when using pagination. If\n             * feature enabled (bLengthChange) then the end user will be able to override\n             * this to a custom setting using a pop-up menu.\n             *  @type int\n             *  @default 10\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"iDisplayLength\": 50\n             *      } );\n             *    } )\n             */\n            \"iDisplayLength\": 10,\n\n\n            /**\n             * Define the starting point for data display when using DataTables with\n             * pagination. Note that this parameter is the number of records, rather than\n             * the page number, so if you have 10 records per page and want to start on\n             * the third page, it should be \"20\".\n             *  @type int\n             *  @default 0\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"iDisplayStart\": 20\n             *      } );\n             *    } )\n             */\n            \"iDisplayStart\": 0,\n\n\n            /**\n             * The scroll gap is the amount of scrolling that is left to go before\n             * DataTables will load the next 'page' of data automatically. You typically\n             * want a gap which is big enough that the scrolling will be smooth for the\n             * user, while not so large that it will load more data than need.\n             *  @type int\n             *  @default 100\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bScrollInfinite\": true,\n             *        \"bScrollCollapse\": true,\n             *        \"sScrollY\": \"200px\",\n             *        \"iScrollLoadGap\": 50\n             *      } );\n             *    } );\n             */\n            \"iScrollLoadGap\": 100,\n\n\n            /**\n             * By default DataTables allows keyboard navigation of the table (sorting, paging,\n             * and filtering) by adding a tabindex attribute to the required elements. This\n             * allows you to tab through the controls and press the enter key to activate them.\n             * The tabindex is default 0, meaning that the tab follows the flow of the document.\n             * You can overrule this using this parameter if you wish. Use a value of -1 to\n             * disable built-in keyboard navigation.\n             *  @type int\n             *  @default 0\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"iTabIndex\": 1\n             *      } );\n             *    } );\n             */\n            \"iTabIndex\": 0,\n\n\n            /**\n             * All strings that DataTables uses in the user interface that it creates\n             * are defined in this object, allowing you to modified them individually or\n             * completely replace them all as required.\n             *  @namespace\n             */\n            \"oLanguage\": {\n                /**\n                 * Strings that are used for WAI-ARIA labels and controls only (these are not\n                 * actually visible on the page, but will be read by screenreaders, and thus\n                 * must be internationalised as well).\n                 *  @namespace\n                 */\n                \"oAria\": {\n                    /**\n                     * ARIA label that is added to the table headers when the column may be\n                     * sorted ascending by activing the column (click or return when focused).\n                     * Note that the column header is prefixed to this string.\n                     *  @type string\n                     *  @default : activate to sort column ascending\n                     *  @dtopt Language\n                     *\n                     *  @example\n                     *    $(document).ready( function() {\n                     *      $('#example').dataTable( {\n                     *        \"oLanguage\": {\n                     *          \"oAria\": {\n                     *            \"sSortAscending\": \" - click/return to sort ascending\"\n                     *          }\n                     *        }\n                     *      } );\n                     *    } );\n                     */\n                    \"sSortAscending\": \": activate to sort column ascending\",\n\n                    /**\n                     * ARIA label that is added to the table headers when the column may be\n                     * sorted descending by activing the column (click or return when focused).\n                     * Note that the column header is prefixed to this string.\n                     *  @type string\n                     *  @default : activate to sort column ascending\n                     *  @dtopt Language\n                     *\n                     *  @example\n                     *    $(document).ready( function() {\n                     *      $('#example').dataTable( {\n                     *        \"oLanguage\": {\n                     *          \"oAria\": {\n                     *            \"sSortDescending\": \" - click/return to sort descending\"\n                     *          }\n                     *        }\n                     *      } );\n                     *    } );\n                     */\n                    \"sSortDescending\": \": activate to sort column descending\"\n                },\n\n                /**\n                 * Pagination string used by DataTables for the two built-in pagination\n                 * control types (\"two_button\" and \"full_numbers\")\n                 *  @namespace\n                 */\n                \"oPaginate\": {\n                    /**\n                     * Text to use when using the 'full_numbers' type of pagination for the\n                     * button to take the user to the first page.\n                     *  @type string\n                     *  @default First\n                     *  @dtopt Language\n                     *\n                     *  @example\n                     *    $(document).ready( function() {\n                     *      $('#example').dataTable( {\n                     *        \"oLanguage\": {\n                     *          \"oPaginate\": {\n                     *            \"sFirst\": \"First page\"\n                     *          }\n                     *        }\n                     *      } );\n                     *    } );\n                     */\n                    \"sFirst\": \"First\",\n\n\n                    /**\n                     * Text to use when using the 'full_numbers' type of pagination for the\n                     * button to take the user to the last page.\n                     *  @type string\n                     *  @default Last\n                     *  @dtopt Language\n                     *\n                     *  @example\n                     *    $(document).ready( function() {\n                     *      $('#example').dataTable( {\n                     *        \"oLanguage\": {\n                     *          \"oPaginate\": {\n                     *            \"sLast\": \"Last page\"\n                     *          }\n                     *        }\n                     *      } );\n                     *    } );\n                     */\n                    \"sLast\": \"Last\",\n\n\n                    /**\n                     * Text to use for the 'next' pagination button (to take the user to the\n                     * next page).\n                     *  @type string\n                     *  @default Next\n                     *  @dtopt Language\n                     *\n                     *  @example\n                     *    $(document).ready( function() {\n                     *      $('#example').dataTable( {\n                     *        \"oLanguage\": {\n                     *          \"oPaginate\": {\n                     *            \"sNext\": \"Next page\"\n                     *          }\n                     *        }\n                     *      } );\n                     *    } );\n                     */\n                    \"sNext\": \"Next\",\n\n\n                    /**\n                     * Text to use for the 'previous' pagination button (to take the user to\n                     * the previous page).\n                     *  @type string\n                     *  @default Previous\n                     *  @dtopt Language\n                     *\n                     *  @example\n                     *    $(document).ready( function() {\n                     *      $('#example').dataTable( {\n                     *        \"oLanguage\": {\n                     *          \"oPaginate\": {\n                     *            \"sPrevious\": \"Previous page\"\n                     *          }\n                     *        }\n                     *      } );\n                     *    } );\n                     */\n                    \"sPrevious\": \"Previous\"\n                },\n\n                /**\n                 * This string is shown in preference to sZeroRecords when the table is\n                 * empty of data (regardless of filtering). Note that this is an optional\n                 * parameter - if it is not given, the value of sZeroRecords will be used\n                 * instead (either the default or given value).\n                 *  @type string\n                 *  @default No data available in table\n                 *  @dtopt Language\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sEmptyTable\": \"No data available in table\"\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sEmptyTable\": \"No data available in table\",\n\n\n                /**\n                 * This string gives information to the end user about the information that\n                 * is current on display on the page. The _START_, _END_ and _TOTAL_\n                 * variables are all dynamically replaced as the table display updates, and\n                 * can be freely moved or removed as the language requirements change.\n                 *  @type string\n                 *  @default Showing _START_ to _END_ of _TOTAL_ entries\n                 *  @dtopt Language\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sInfo\": \"Got a total of _TOTAL_ entries to show (_START_ to _END_)\"\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n\n\n                /**\n                 * Display information string for when the table is empty. Typically the\n                 * format of this string should match sInfo.\n                 *  @type string\n                 *  @default Showing 0 to 0 of 0 entries\n                 *  @dtopt Language\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sInfoEmpty\": \"No entries to show\"\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n\n\n                /**\n                 * When a user filters the information in a table, this string is appended\n                 * to the information (sInfo) to give an idea of how strong the filtering\n                 * is. The variable _MAX_ is dynamically updated.\n                 *  @type string\n                 *  @default (filtered from _MAX_ total entries)\n                 *  @dtopt Language\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sInfoFiltered\": \" - filtering from _MAX_ records\"\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n\n\n                /**\n                 * If can be useful to append extra information to the info string at times,\n                 * and this variable does exactly that. This information will be appended to\n                 * the sInfo (sInfoEmpty and sInfoFiltered in whatever combination they are\n                 * being used) at all times.\n                 *  @type string\n                 *  @default <i>Empty string</i>\n                 *  @dtopt Language\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sInfoPostFix\": \"All records shown are derived from real information.\"\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sInfoPostFix\": \"\",\n\n\n                /**\n                 * DataTables has a build in number formatter (fnFormatNumber) which is used\n                 * to format large numbers that are used in the table information. By\n                 * default a comma is used, but this can be trivially changed to any\n                 * character you wish with this parameter.\n                 *  @type string\n                 *  @default ,\n                 *  @dtopt Language\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sInfoThousands\": \"'\"\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sInfoThousands\": \",\",\n\n\n                /**\n                 * Detail the action that will be taken when the drop down menu for the\n                 * pagination length option is changed. The '_MENU_' variable is replaced\n                 * with a default select list of 10, 25, 50 and 100, and can be replaced\n                 * with a custom select box if required.\n                 *  @type string\n                 *  @default Show _MENU_ entries\n                 *  @dtopt Language\n                 *\n                 *  @example\n                 *    // Language change only\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sLengthMenu\": \"Display _MENU_ records\"\n                 *        }\n                 *      } );\n                 *    } );\n                 *\n                 *  @example\n                 *    // Language and options change\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sLengthMenu\": 'Display <select>'+\n                 *            '<option value=\"10\">10</option>'+\n                 *            '<option value=\"20\">20</option>'+\n                 *            '<option value=\"30\">30</option>'+\n                 *            '<option value=\"40\">40</option>'+\n                 *            '<option value=\"50\">50</option>'+\n                 *            '<option value=\"-1\">All</option>'+\n                 *            '</select> records'\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sLengthMenu\": \"Show _MENU_ entries\",\n\n\n                /**\n                 * When using Ajax sourced data and during the first draw when DataTables is\n                 * gathering the data, this message is shown in an empty row in the table to\n                 * indicate to the end user the the data is being loaded. Note that this\n                 * parameter is not used when loading data by server-side processing, just\n                 * Ajax sourced data with client-side processing.\n                 *  @type string\n                 *  @default Loading...\n                 *  @dtopt Language\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sLoadingRecords\": \"Please wait - loading...\"\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sLoadingRecords\": \"Loading...\",\n\n\n                /**\n                 * Text which is displayed when the table is processing a user action\n                 * (usually a sort command or similar).\n                 *  @type string\n                 *  @default Processing...\n                 *  @dtopt Language\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sProcessing\": \"DataTables is currently busy\"\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sProcessing\": \"Processing...\",\n\n\n                /**\n                 * Details the actions that will be taken when the user types into the\n                 * filtering input text box. The variable \"_INPUT_\", if used in the string,\n                 * is replaced with the HTML text box for the filtering input allowing\n                 * control over where it appears in the string. If \"_INPUT_\" is not given\n                 * then the input box is appended to the string automatically.\n                 *  @type string\n                 *  @default Search:\n                 *  @dtopt Language\n                 *\n                 *  @example\n                 *    // Input text box will be appended at the end automatically\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sSearch\": \"Filter records:\"\n                 *        }\n                 *      } );\n                 *    } );\n                 *\n                 *  @example\n                 *    // Specify where the filter should appear\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sSearch\": \"Apply filter _INPUT_ to table\"\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sSearch\": \"Search:\",\n\n\n                /**\n                 * All of the language information can be stored in a file on the\n                 * server-side, which DataTables will look up if this parameter is passed.\n                 * It must store the URL of the language file, which is in a JSON format,\n                 * and the object has the same properties as the oLanguage object in the\n                 * initialiser object (i.e. the above parameters). Please refer to one of\n                 * the example language files to see how this works in action.\n                 *  @type string\n                 *  @default <i>Empty string - i.e. disabled</i>\n                 *  @dtopt Language\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sUrl\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sUrl\": \"\",\n\n\n                /**\n                 * Text shown inside the table records when the is no information to be\n                 * displayed after filtering. sEmptyTable is shown when there is simply no\n                 * information in the table at all (regardless of filtering).\n                 *  @type string\n                 *  @default No matching records found\n                 *  @dtopt Language\n                 *\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"oLanguage\": {\n                 *          \"sZeroRecords\": \"No records to display\"\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sZeroRecords\": \"No matching records found\"\n            },\n\n\n            /**\n             * This parameter allows you to have define the global filtering state at\n             * initialisation time. As an object the \"sSearch\" parameter must be\n             * defined, but all other parameters are optional. When \"bRegex\" is true,\n             * the search string will be treated as a regular expression, when false\n             * (default) it will be treated as a straight string. When \"bSmart\"\n             * DataTables will use it's smart filtering methods (to word match at\n             * any point in the data), when false this will not be done.\n             *  @namespace\n             *  @extends DataTable.models.oSearch\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"oSearch\": {\"sSearch\": \"Initial search\"}\n             *      } );\n             *    } )\n             */\n            \"oSearch\": $.extend({}, DataTable.models.oSearch),\n\n\n            /**\n             * By default DataTables will look for the property 'aaData' when obtaining\n             * data from an Ajax source or for server-side processing - this parameter\n             * allows that property to be changed. You can use Javascript dotted object\n             * notation to get a data source for multiple levels of nesting.\n             *  @type string\n             *  @default aaData\n             *  @dtopt Options\n             *  @dtopt Server-side\n             *\n             *  @example\n             *    // Get data from { \"data\": [...] }\n             *    $(document).ready( function() {\n             *      var oTable = $('#example').dataTable( {\n             *        \"sAjaxSource\": \"sources/data.txt\",\n             *        \"sAjaxDataProp\": \"data\"\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Get data from { \"data\": { \"inner\": [...] } }\n             *    $(document).ready( function() {\n             *      var oTable = $('#example').dataTable( {\n             *        \"sAjaxSource\": \"sources/data.txt\",\n             *        \"sAjaxDataProp\": \"data.inner\"\n             *      } );\n             *    } );\n             */\n            \"sAjaxDataProp\": \"aaData\",\n\n\n            /**\n             * You can instruct DataTables to load data from an external source using this\n             * parameter (use aData if you want to pass data in you already have). Simply\n             * provide a url a JSON object can be obtained from. This object must include\n             * the parameter 'aaData' which is the data source for the table.\n             *  @type string\n             *  @default null\n             *  @dtopt Options\n             *  @dtopt Server-side\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"sAjaxSource\": \"http://www.sprymedia.co.uk/dataTables/json.php\"\n             *      } );\n             *    } )\n             */\n            \"sAjaxSource\": null,\n\n\n            /**\n             * This parameter can be used to override the default prefix that DataTables\n             * assigns to a cookie when state saving is enabled.\n             *  @type string\n             *  @default SpryMedia_DataTables_\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"sCookiePrefix\": \"my_datatable_\",\n             *      } );\n             *    } );\n             */\n            \"sCookiePrefix\": \"SpryMedia_DataTables_\",\n\n\n            /**\n             * This initialisation variable allows you to specify exactly where in the\n             * DOM you want DataTables to inject the various controls it adds to the page\n             * (for example you might want the pagination controls at the top of the\n             * table). DIV elements (with or without a custom class) can also be added to\n             * aid styling. The follow syntax is used:\n             *   <ul>\n             *     <li>The following options are allowed:\n             *       <ul>\n             *         <li>'l' - Length changing</li\n             *         <li>'f' - Filtering input</li>\n             *         <li>'t' - The table!</li>\n             *         <li>'i' - Information</li>\n             *         <li>'p' - Pagination</li>\n             *         <li>'r' - pRocessing</li>\n             *       </ul>\n             *     </li>\n             *     <li>The following constants are allowed:\n             *       <ul>\n             *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n             *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n             *       </ul>\n             *     </li>\n             *     <li>The following syntax is expected:\n             *       <ul>\n             *         <li>'&lt;' and '&gt;' - div elements</li>\n             *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n             *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n             *       </ul>\n             *     </li>\n             *     <li>Examples:\n             *       <ul>\n             *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n             *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n             *       </ul>\n             *     </li>\n             *   </ul>\n             *  @type string\n             *  @default lfrtip <i>(when bJQueryUI is false)</i> <b>or</b>\n             *    <\"H\"lfr>t<\"F\"ip> <i>(when bJQueryUI is true)</i>\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"sDom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n             *      } );\n             *    } );\n             */\n            \"sDom\": \"lfrtip\",\n\n\n            /**\n             * DataTables features two different built-in pagination interaction methods\n             * ('two_button' or 'full_numbers') which present different page controls to\n             * the end user. Further methods can be added using the API (see below).\n             *  @type string\n             *  @default two_button\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"sPaginationType\": \"full_numbers\"\n             *      } );\n             *    } )\n             */\n            \"sPaginationType\": \"two_button\",\n\n\n            /**\n             * Enable horizontal scrolling. When a table is too wide to fit into a certain\n             * layout, or you have a large number of columns in the table, you can enable\n             * x-scrolling to show the table in a viewport, which can be scrolled. This\n             * property can be any CSS unit, or a number (in which case it will be treated\n             * as a pixel measurement).\n             *  @type string\n             *  @default <i>blank string - i.e. disabled</i>\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"sScrollX\": \"100%\",\n             *        \"bScrollCollapse\": true\n             *      } );\n             *    } );\n             */\n            \"sScrollX\": \"\",\n\n\n            /**\n             * This property can be used to force a DataTable to use more width than it\n             * might otherwise do when x-scrolling is enabled. For example if you have a\n             * table which requires to be well spaced, this parameter is useful for\n             * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n             * any CSS unit, or a number (in which case it will be treated as a pixel\n             * measurement).\n             *  @type string\n             *  @default <i>blank string - i.e. disabled</i>\n             *  @dtopt Options\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"sScrollX\": \"100%\",\n             *        \"sScrollXInner\": \"110%\"\n             *      } );\n             *    } );\n             */\n            \"sScrollXInner\": \"\",\n\n\n            /**\n             * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n             * to the given height, and enable scrolling for any data which overflows the\n             * current viewport. This can be used as an alternative to paging to display\n             * a lot of data in a small area (although paging and scrolling can both be\n             * enabled at the same time). This property can be any CSS unit, or a number\n             * (in which case it will be treated as a pixel measurement).\n             *  @type string\n             *  @default <i>blank string - i.e. disabled</i>\n             *  @dtopt Features\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"sScrollY\": \"200px\",\n             *        \"bPaginate\": false\n             *      } );\n             *    } );\n             */\n            \"sScrollY\": \"\",\n\n\n            /**\n             * Set the HTTP method that is used to make the Ajax call for server-side\n             * processing or Ajax sourced data.\n             *  @type string\n             *  @default GET\n             *  @dtopt Options\n             *  @dtopt Server-side\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"bServerSide\": true,\n             *        \"sAjaxSource\": \"scripts/post.php\",\n             *        \"sServerMethod\": \"POST\"\n             *      } );\n             *    } );\n             */\n            \"sServerMethod\": \"GET\"\n        };\n\n\n        /**\n         * Column options that can be given to DataTables at initialisation time.\n         *  @namespace\n         */\n        DataTable.defaults.columns = {\n            /**\n             * Allows a column's sorting to take multiple columns into account when\n             * doing a sort. For example first name / last name columns make sense to\n             * do a multi-column sort over the two columns.\n             *  @type array\n             *  @default null <i>Takes the value of the column index automatically</i>\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          { \"aDataSort\": [ 0, 1 ], \"aTargets\": [ 0 ] },\n             *          { \"aDataSort\": [ 1, 0 ], \"aTargets\": [ 1 ] },\n             *          { \"aDataSort\": [ 2, 3, 4 ], \"aTargets\": [ 2 ] }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          { \"aDataSort\": [ 0, 1 ] },\n             *          { \"aDataSort\": [ 1, 0 ] },\n             *          { \"aDataSort\": [ 2, 3, 4 ] },\n             *          null,\n             *          null\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"aDataSort\": null,\n\n\n            /**\n             * You can control the default sorting direction, and even alter the behaviour\n             * of the sort handler (i.e. only allow ascending sorting etc) using this\n             * parameter.\n             *  @type array\n             *  @default [ 'asc', 'desc' ]\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          { \"asSorting\": [ \"asc\" ], \"aTargets\": [ 1 ] },\n             *          { \"asSorting\": [ \"desc\", \"asc\", \"asc\" ], \"aTargets\": [ 2 ] },\n             *          { \"asSorting\": [ \"desc\" ], \"aTargets\": [ 3 ] }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          null,\n             *          { \"asSorting\": [ \"asc\" ] },\n             *          { \"asSorting\": [ \"desc\", \"asc\", \"asc\" ] },\n             *          { \"asSorting\": [ \"desc\" ] },\n             *          null\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"asSorting\": ['asc', 'desc'],\n\n\n            /**\n             * Enable or disable filtering on the data in this column.\n             *  @type boolean\n             *  @default true\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          { \"bSearchable\": false, \"aTargets\": [ 0 ] }\n             *        ] } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          { \"bSearchable\": false },\n             *          null,\n             *          null,\n             *          null,\n             *          null\n             *        ] } );\n             *    } );\n             */\n            \"bSearchable\": true,\n\n\n            /**\n             * Enable or disable sorting on this column.\n             *  @type boolean\n             *  @default true\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          { \"bSortable\": false, \"aTargets\": [ 0 ] }\n             *        ] } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          { \"bSortable\": false },\n             *          null,\n             *          null,\n             *          null,\n             *          null\n             *        ] } );\n             *    } );\n             */\n            \"bSortable\": true,\n\n\n            /**\n             * <code>Deprecated</code> When using fnRender() for a column, you may wish\n             * to use the original data (before rendering) for sorting and filtering\n             * (the default is to used the rendered data that the user can see). This\n             * may be useful for dates etc.\n             *\n             * Please note that this option has now been deprecated and will be removed\n             * in the next version of DataTables. Please use mRender / mData rather than\n             * fnRender.\n             *  @type boolean\n             *  @default true\n             *  @dtopt Columns\n             *  @deprecated\n             */\n            \"bUseRendered\": true,\n\n\n            /**\n             * Enable or disable the display of this column.\n             *  @type boolean\n             *  @default true\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          { \"bVisible\": false, \"aTargets\": [ 0 ] }\n             *        ] } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          { \"bVisible\": false },\n             *          null,\n             *          null,\n             *          null,\n             *          null\n             *        ] } );\n             *    } );\n             */\n            \"bVisible\": true,\n\n\n            /**\n             * Developer definable function that is called whenever a cell is created (Ajax source,\n             * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n             * allowing you to modify the DOM element (add background colour for example) when the\n             * element is available.\n             *  @type function\n             *  @param {element} nTd The TD node that has been created\n             *  @param {*} sData The Data for the cell\n             *  @param {array|object} oData The data for the whole row\n             *  @param {int} iRow The row index for the aoData data store\n             *  @param {int} iCol The column index for aoColumns\n             *  @dtopt Columns\n             *\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [ {\n             *          \"aTargets\": [3],\n             *          \"fnCreatedCell\": function (nTd, sData, oData, iRow, iCol) {\n             *            if ( sData == \"1.7\" ) {\n             *              $(nTd).css('color', 'blue')\n             *            }\n             *          }\n             *        } ]\n             *      });\n             *    } );\n             */\n            \"fnCreatedCell\": null,\n\n\n            /**\n             * <code>Deprecated</code> Custom display function that will be called for the\n             * display of each cell in this column.\n             *\n             * Please note that this option has now been deprecated and will be removed\n             * in the next version of DataTables. Please use mRender / mData rather than\n             * fnRender.\n             *  @type function\n             *  @param {object} o Object with the following parameters:\n             *  @param {int}    o.iDataRow The row in aoData\n             *  @param {int}    o.iDataColumn The column in question\n             *  @param {array}  o.aData The data for the row in question\n             *  @param {object} o.oSettings The settings object for this DataTables instance\n             *  @param {object} o.mDataProp The data property used for this column\n             *  @param {*}      val The current cell value\n             *  @returns {string} The string you which to use in the display\n             *  @dtopt Columns\n             *  @deprecated\n             */\n            \"fnRender\": null,\n\n\n            /**\n             * The column index (starting from 0!) that you wish a sort to be performed\n             * upon when this column is selected for sorting. This can be used for sorting\n             * on hidden columns for example.\n             *  @type int\n             *  @default -1 <i>Use automatically calculated column index</i>\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          { \"iDataSort\": 1, \"aTargets\": [ 0 ] }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          { \"iDataSort\": 1 },\n             *          null,\n             *          null,\n             *          null,\n             *          null\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"iDataSort\": -1,\n\n\n            /**\n             * This parameter has been replaced by mData in DataTables to ensure naming\n             * consistency. mDataProp can still be used, as there is backwards compatibility\n             * in DataTables for this option, but it is strongly recommended that you use\n             * mData in preference to mDataProp.\n             *  @name DataTable.defaults.columns.mDataProp\n             */\n\n\n            /**\n             * This property can be used to read data from any JSON data source property,\n             * including deeply nested objects / properties. mData can be given in a\n             * number of different ways which effect its behaviour:\n             *   <ul>\n             *     <li>integer - treated as an array index for the data source. This is the\n             *       default that DataTables uses (incrementally increased for each column).</li>\n             *     <li>string - read an object property from the data source. Note that you can\n             *       use Javascript dotted notation to read deep properties / arrays from the\n             *       data source.</li>\n             *     <li>null - the sDefaultContent option will be used for the cell (null\n             *       by default, so you will need to specify the default content you want -\n             *       typically an empty string). This can be useful on generated columns such\n             *       as edit / delete action columns.</li>\n             *     <li>function - the function given will be executed whenever DataTables\n             *       needs to set or get the data for a cell in the column. The function\n             *       takes three parameters:\n             *       <ul>\n             *         <li>{array|object} The data source for the row</li>\n             *         <li>{string} The type call data requested - this will be 'set' when\n             *           setting data or 'filter', 'display', 'type', 'sort' or undefined when\n             *           gathering data. Note that when <i>undefined</i> is given for the type\n             *           DataTables expects to get the raw data for the object back</li>\n             *         <li>{*} Data to set when the second parameter is 'set'.</li>\n             *       </ul>\n             *       The return value from the function is not required when 'set' is the type\n             *       of call, but otherwise the return is what will be used for the data\n             *       requested.</li>\n             *    </ul>\n             *\n             * Note that prior to DataTables 1.9.2 mData was called mDataProp. The name change\n             * reflects the flexibility of this property and is consistent with the naming of\n             * mRender. If 'mDataProp' is given, then it will still be used by DataTables, as\n             * it automatically maps the old name to the new if required.\n             *  @type string|int|function|null\n             *  @default null <i>Use automatically calculated column index</i>\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Read table data from objects\n             *    $(document).ready( function() {\n             *      var oTable = $('#example').dataTable( {\n             *        \"sAjaxSource\": \"sources/deep.txt\",\n             *        \"aoColumns\": [\n             *          { \"mData\": \"engine\" },\n             *          { \"mData\": \"browser\" },\n             *          { \"mData\": \"platform.inner\" },\n             *          { \"mData\": \"platform.details.0\" },\n             *          { \"mData\": \"platform.details.1\" }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Using mData as a function to provide different information for\n             *    // sorting, filtering and display. In this case, currency (price)\n             *    $(document).ready( function() {\n             *      var oTable = $('#example').dataTable( {\n             *        \"aoColumnDefs\": [ {\n             *          \"aTargets\": [ 0 ],\n             *          \"mData\": function ( source, type, val ) {\n             *            if (type === 'set') {\n             *              source.price = val;\n             *              // Store the computed dislay and filter values for efficiency\n             *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n             *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n             *              return;\n             *            }\n             *            else if (type === 'display') {\n             *              return source.price_display;\n             *            }\n             *            else if (type === 'filter') {\n             *              return source.price_filter;\n             *            }\n             *            // 'sort', 'type' and undefined all just use the integer\n             *            return source.price;\n             *          }\n             *        } ]\n             *      } );\n             *    } );\n             */\n            \"mData\": null,\n\n\n            /**\n             * This property is the rendering partner to mData and it is suggested that\n             * when you want to manipulate data for display (including filtering, sorting etc)\n             * but not altering the underlying data for the table, use this property. mData\n             * can actually do everything this property can and more, but this parameter is\n             * easier to use since there is no 'set' option. Like mData is can be given\n             * in a number of different ways to effect its behaviour, with the addition of\n             * supporting array syntax for easy outputting of arrays (including arrays of\n             * objects):\n             *   <ul>\n             *     <li>integer - treated as an array index for the data source. This is the\n             *       default that DataTables uses (incrementally increased for each column).</li>\n             *     <li>string - read an object property from the data source. Note that you can\n             *       use Javascript dotted notation to read deep properties / arrays from the\n             *       data source and also array brackets to indicate that the data reader should\n             *       loop over the data source array. When characters are given between the array\n             *       brackets, these characters are used to join the data source array together.\n             *       For example: \"accounts[, ].name\" would result in a comma separated list with\n             *       the 'name' value from the 'accounts' array of objects.</li>\n             *     <li>function - the function given will be executed whenever DataTables\n             *       needs to set or get the data for a cell in the column. The function\n             *       takes three parameters:\n             *       <ul>\n             *         <li>{array|object} The data source for the row (based on mData)</li>\n             *         <li>{string} The type call data requested - this will be 'filter', 'display',\n             *           'type' or 'sort'.</li>\n             *         <li>{array|object} The full data source for the row (not based on mData)</li>\n             *       </ul>\n             *       The return value from the function is what will be used for the data\n             *       requested.</li>\n             *    </ul>\n             *  @type string|int|function|null\n             *  @default null <i>Use mData</i>\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Create a comma separated list from an array of objects\n             *    $(document).ready( function() {\n             *      var oTable = $('#example').dataTable( {\n             *        \"sAjaxSource\": \"sources/deep.txt\",\n             *        \"aoColumns\": [\n             *          { \"mData\": \"engine\" },\n             *          { \"mData\": \"browser\" },\n             *          {\n             *            \"mData\": \"platform\",\n             *            \"mRender\": \"[, ].name\"\n             *          }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Use as a function to create a link from the data source\n             *    $(document).ready( function() {\n             *      var oTable = $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *        {\n             *          \"aTargets\": [ 0 ],\n             *          \"mData\": \"download_link\",\n             *          \"mRender\": function ( data, type, full ) {\n             *            return '<a href=\"'+data+'\">Download</a>';\n             *          }\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"mRender\": null,\n\n\n            /**\n             * Change the cell type created for the column - either TD cells or TH cells. This\n             * can be useful as TH cells have semantic meaning in the table body, allowing them\n             * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n             *  @type string\n             *  @default td\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Make the first column use TH cells\n             *    $(document).ready( function() {\n             *      var oTable = $('#example').dataTable( {\n             *        \"aoColumnDefs\": [ {\n             *          \"aTargets\": [ 0 ],\n             *          \"sCellType\": \"th\"\n             *        } ]\n             *      } );\n             *    } );\n             */\n            \"sCellType\": \"td\",\n\n\n            /**\n             * Class to give to each cell in this column.\n             *  @type string\n             *  @default <i>Empty string</i>\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          { \"sClass\": \"my_class\", \"aTargets\": [ 0 ] }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          { \"sClass\": \"my_class\" },\n             *          null,\n             *          null,\n             *          null,\n             *          null\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"sClass\": \"\",\n\n            /**\n             * When DataTables calculates the column widths to assign to each column,\n             * it finds the longest string in each column and then constructs a\n             * temporary table and reads the widths from that. The problem with this\n             * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n             * string - thus the calculation can go wrong (doing it properly and putting\n             * it into an DOM object and measuring that is horribly(!) slow). Thus as\n             * a \"work around\" we provide this option. It will append its value to the\n             * text that is found to be the longest string for the column - i.e. padding.\n             * Generally you shouldn't need this, and it is not documented on the\n             * general DataTables.net documentation\n             *  @type string\n             *  @default <i>Empty string<i>\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          null,\n             *          null,\n             *          null,\n             *          {\n             *            \"sContentPadding\": \"mmm\"\n             *          }\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"sContentPadding\": \"\",\n\n\n            /**\n             * Allows a default value to be given for a column's data, and will be used\n             * whenever a null data source is encountered (this can be because mData\n             * is set to null, or because the data source itself is null).\n             *  @type string\n             *  @default null\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          {\n             *            \"mData\": null,\n             *            \"sDefaultContent\": \"Edit\",\n             *            \"aTargets\": [ -1 ]\n             *          }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          null,\n             *          null,\n             *          null,\n             *          {\n             *            \"mData\": null,\n             *            \"sDefaultContent\": \"Edit\"\n             *          }\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"sDefaultContent\": null,\n\n\n            /**\n             * This parameter is only used in DataTables' server-side processing. It can\n             * be exceptionally useful to know what columns are being displayed on the\n             * client side, and to map these to database fields. When defined, the names\n             * also allow DataTables to reorder information from the server if it comes\n             * back in an unexpected order (i.e. if you switch your columns around on the\n             * client-side, your server-side code does not also need updating).\n             *  @type string\n             *  @default <i>Empty string</i>\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          { \"sName\": \"engine\", \"aTargets\": [ 0 ] },\n             *          { \"sName\": \"browser\", \"aTargets\": [ 1 ] },\n             *          { \"sName\": \"platform\", \"aTargets\": [ 2 ] },\n             *          { \"sName\": \"version\", \"aTargets\": [ 3 ] },\n             *          { \"sName\": \"grade\", \"aTargets\": [ 4 ] }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          { \"sName\": \"engine\" },\n             *          { \"sName\": \"browser\" },\n             *          { \"sName\": \"platform\" },\n             *          { \"sName\": \"version\" },\n             *          { \"sName\": \"grade\" }\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"sName\": \"\",\n\n\n            /**\n             * Defines a data source type for the sorting which can be used to read\n             * real-time information from the table (updating the internally cached\n             * version) prior to sorting. This allows sorting to occur on user editable\n             * elements such as form inputs.\n             *  @type string\n             *  @default std\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          { \"sSortDataType\": \"dom-text\", \"aTargets\": [ 2, 3 ] },\n             *          { \"sType\": \"numeric\", \"aTargets\": [ 3 ] },\n             *          { \"sSortDataType\": \"dom-select\", \"aTargets\": [ 4 ] },\n             *          { \"sSortDataType\": \"dom-checkbox\", \"aTargets\": [ 5 ] }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          null,\n             *          null,\n             *          { \"sSortDataType\": \"dom-text\" },\n             *          { \"sSortDataType\": \"dom-text\", \"sType\": \"numeric\" },\n             *          { \"sSortDataType\": \"dom-select\" },\n             *          { \"sSortDataType\": \"dom-checkbox\" }\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"sSortDataType\": \"std\",\n\n\n            /**\n             * The title of this column.\n             *  @type string\n             *  @default null <i>Derived from the 'TH' value for this column in the\n             *    original HTML table.</i>\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          { \"sTitle\": \"My column title\", \"aTargets\": [ 0 ] }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          { \"sTitle\": \"My column title\" },\n             *          null,\n             *          null,\n             *          null,\n             *          null\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"sTitle\": null,\n\n\n            /**\n             * The type allows you to specify how the data for this column will be sorted.\n             * Four types (string, numeric, date and html (which will strip HTML tags\n             * before sorting)) are currently available. Note that only date formats\n             * understood by Javascript's Date() object will be accepted as type date. For\n             * example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string', 'numeric',\n             * 'date' or 'html' (by default). Further types can be adding through\n             * plug-ins.\n             *  @type string\n             *  @default null <i>Auto-detected from raw data</i>\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          { \"sType\": \"html\", \"aTargets\": [ 0 ] }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          { \"sType\": \"html\" },\n             *          null,\n             *          null,\n             *          null,\n             *          null\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"sType\": null,\n\n\n            /**\n             * Defining the width of the column, this parameter may take any CSS value\n             * (3em, 20px etc). DataTables apples 'smart' widths to columns which have not\n             * been given a specific width through this interface ensuring that the table\n             * remains readable.\n             *  @type string\n             *  @default null <i>Automatic</i>\n             *  @dtopt Columns\n             *\n             *  @example\n             *    // Using aoColumnDefs\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumnDefs\": [\n             *          { \"sWidth\": \"20%\", \"aTargets\": [ 0 ] }\n             *        ]\n             *      } );\n             *    } );\n             *\n             *  @example\n             *    // Using aoColumns\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"aoColumns\": [\n             *          { \"sWidth\": \"20%\" },\n             *          null,\n             *          null,\n             *          null,\n             *          null\n             *        ]\n             *      } );\n             *    } );\n             */\n            \"sWidth\": null\n        };\n\n\n        /**\n         * DataTables settings object - this holds all the information needed for a\n         * given table, including configuration, data and current application of the\n         * table options. DataTables does not have a single instance for each DataTable\n         * with the settings attached to that instance, but rather instances of the\n         * DataTable \"class\" are created on-the-fly as needed (typically by a\n         * $().dataTable() call) and the settings object is then applied to that\n         * instance.\n         *\n         * Note that this object is related to {@link DataTable.defaults} but this\n         * one is the internal data store for DataTables's cache of columns. It should\n         * NOT be manipulated outside of DataTables. Any configuration should be done\n         * through the initialisation options.\n         *  @namespace\n         *  @todo Really should attach the settings object to individual instances so we\n         *    don't need to create new instances on each $().dataTable() call (if the\n         *    table already exists). It would also save passing oSettings around and\n         *    into every single function. However, this is a very significant\n         *    architecture change for DataTables and will almost certainly break\n         *    backwards compatibility with older installations. This is something that\n         *    will be done in 2.0.\n         */\n        DataTable.models.oSettings = {\n            /**\n             * Primary features of DataTables and their enablement state.\n             *  @namespace\n             */\n            \"oFeatures\": {\n\n                /**\n                 * Flag to say if DataTables should automatically try to calculate the\n                 * optimum table and columns widths (true) or not (false).\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bAutoWidth\": null,\n\n                /**\n                 * Delay the creation of TR and TD elements until they are actually\n                 * needed by a driven page draw. This can give a significant speed\n                 * increase for Ajax source and Javascript source data, but makes no\n                 * difference at all fro DOM and server-side processing tables.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bDeferRender\": null,\n\n                /**\n                 * Enable filtering on the table or not. Note that if this is disabled\n                 * then there is no filtering at all on the table, including fnFilter.\n                 * To just remove the filtering input use sDom and remove the 'f' option.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bFilter\": null,\n\n                /**\n                 * Table information element (the 'Showing x of y records' div) enable\n                 * flag.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bInfo\": null,\n\n                /**\n                 * Present a user control allowing the end user to change the page size\n                 * when pagination is enabled.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bLengthChange\": null,\n\n                /**\n                 * Pagination enabled or not. Note that if this is disabled then length\n                 * changing must also be disabled.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bPaginate\": null,\n\n                /**\n                 * Processing indicator enable flag whenever DataTables is enacting a\n                 * user request - typically an Ajax request for server-side processing.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bProcessing\": null,\n\n                /**\n                 * Server-side processing enabled flag - when enabled DataTables will\n                 * get all data from the server for every draw - there is no filtering,\n                 * sorting or paging done on the client-side.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bServerSide\": null,\n\n                /**\n                 * Sorting enablement flag.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bSort\": null,\n\n                /**\n                 * Apply a class to the columns which are being sorted to provide a\n                 * visual highlight or not. This can slow things down when enabled since\n                 * there is a lot of DOM interaction.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bSortClasses\": null,\n\n                /**\n                 * State saving enablement flag.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bStateSave\": null\n            },\n\n\n            /**\n             * Scrolling settings for a table.\n             *  @namespace\n             */\n            \"oScroll\": {\n                /**\n                 * Indicate if DataTables should be allowed to set the padding / margin\n                 * etc for the scrolling header elements or not. Typically you will want\n                 * this.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bAutoCss\": null,\n\n                /**\n                 * When the table is shorter in height than sScrollY, collapse the\n                 * table container down to the height of the table (when true).\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bCollapse\": null,\n\n                /**\n                 * Infinite scrolling enablement flag. Now deprecated in favour of\n                 * using the Scroller plug-in.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type boolean\n                 */\n                \"bInfinite\": null,\n\n                /**\n                 * Width of the scrollbar for the web-browser's platform. Calculated\n                 * during table initialisation.\n                 *  @type int\n                 *  @default 0\n                 */\n                \"iBarWidth\": 0,\n\n                /**\n                 * Space (in pixels) between the bottom of the scrolling container and\n                 * the bottom of the scrolling viewport before the next page is loaded\n                 * when using infinite scrolling.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type int\n                 */\n                \"iLoadGap\": null,\n\n                /**\n                 * Viewport width for horizontal scrolling. Horizontal scrolling is\n                 * disabled if an empty string.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type string\n                 */\n                \"sX\": null,\n\n                /**\n                 * Width to expand the table to when using x-scrolling. Typically you\n                 * should not need to use this.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type string\n                 *  @deprecated\n                 */\n                \"sXInner\": null,\n\n                /**\n                 * Viewport height for vertical scrolling. Vertical scrolling is disabled\n                 * if an empty string.\n                 * Note that this parameter will be set by the initialisation routine. To\n                 * set a default use {@link DataTable.defaults}.\n                 *  @type string\n                 */\n                \"sY\": null\n            },\n\n            /**\n             * Language information for the table.\n             *  @namespace\n             *  @extends DataTable.defaults.oLanguage\n             */\n            \"oLanguage\": {\n                /**\n                 * Information callback function. See\n                 * {@link DataTable.defaults.fnInfoCallback}\n                 *  @type function\n                 *  @default null\n                 */\n                \"fnInfoCallback\": null\n            },\n\n            /**\n             * Browser support parameters\n             *  @namespace\n             */\n            \"oBrowser\": {\n                /**\n                 * Indicate if the browser incorrectly calculates width:100% inside a\n                 * scrolling element (IE6/7)\n                 *  @type boolean\n                 *  @default false\n                 */\n                \"bScrollOversize\": false\n            },\n\n            /**\n             * Array referencing the nodes which are used for the features. The\n             * parameters of this object match what is allowed by sDom - i.e.\n             *   <ul>\n             *     <li>'l' - Length changing</li>\n             *     <li>'f' - Filtering input</li>\n             *     <li>'t' - The table!</li>\n             *     <li>'i' - Information</li>\n             *     <li>'p' - Pagination</li>\n             *     <li>'r' - pRocessing</li>\n             *   </ul>\n             *  @type array\n             *  @default []\n             */\n            \"aanFeatures\": [],\n\n            /**\n             * Store data information - see {@link DataTable.models.oRow} for detailed\n             * information.\n             *  @type array\n             *  @default []\n             */\n            \"aoData\": [],\n\n            /**\n             * Array of indexes which are in the current display (after filtering etc)\n             *  @type array\n             *  @default []\n             */\n            \"aiDisplay\": [],\n\n            /**\n             * Array of indexes for display - no filtering\n             *  @type array\n             *  @default []\n             */\n            \"aiDisplayMaster\": [],\n\n            /**\n             * Store information about each column that is in use\n             *  @type array\n             *  @default []\n             */\n            \"aoColumns\": [],\n\n            /**\n             * Store information about the table's header\n             *  @type array\n             *  @default []\n             */\n            \"aoHeader\": [],\n\n            /**\n             * Store information about the table's footer\n             *  @type array\n             *  @default []\n             */\n            \"aoFooter\": [],\n\n            /**\n             * Search data array for regular expression searching\n             *  @type array\n             *  @default []\n             */\n            \"asDataSearch\": [],\n\n            /**\n             * Store the applied global search information in case we want to force a\n             * research or compare the old search to a new one.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @namespace\n             *  @extends DataTable.models.oSearch\n             */\n            \"oPreviousSearch\": {},\n\n            /**\n             * Store the applied search for each column - see\n             * {@link DataTable.models.oSearch} for the format that is used for the\n             * filtering information for each column.\n             *  @type array\n             *  @default []\n             */\n            \"aoPreSearchCols\": [],\n\n            /**\n             * Sorting that is applied to the table. Note that the inner arrays are\n             * used in the following manner:\n             * <ul>\n             *   <li>Index 0 - column number</li>\n             *   <li>Index 1 - current sorting direction</li>\n             *   <li>Index 2 - index of asSorting for this column</li>\n             * </ul>\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type array\n             *  @todo These inner arrays should really be objects\n             */\n            \"aaSorting\": null,\n\n            /**\n             * Sorting that is always applied to the table (i.e. prefixed in front of\n             * aaSorting).\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type array|null\n             *  @default null\n             */\n            \"aaSortingFixed\": null,\n\n            /**\n             * Classes to use for the striping of a table.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type array\n             *  @default []\n             */\n            \"asStripeClasses\": null,\n\n            /**\n             * If restoring a table - we should restore its striping classes as well\n             *  @type array\n             *  @default []\n             */\n            \"asDestroyStripes\": [],\n\n            /**\n             * If restoring a table - we should restore its width\n             *  @type int\n             *  @default 0\n             */\n            \"sDestroyWidth\": 0,\n\n            /**\n             * Callback functions array for every time a row is inserted (i.e. on a draw).\n             *  @type array\n             *  @default []\n             */\n            \"aoRowCallback\": [],\n\n            /**\n             * Callback functions for the header on each draw.\n             *  @type array\n             *  @default []\n             */\n            \"aoHeaderCallback\": [],\n\n            /**\n             * Callback function for the footer on each draw.\n             *  @type array\n             *  @default []\n             */\n            \"aoFooterCallback\": [],\n\n            /**\n             * Array of callback functions for draw callback functions\n             *  @type array\n             *  @default []\n             */\n            \"aoDrawCallback\": [],\n\n            /**\n             * Array of callback functions for row created function\n             *  @type array\n             *  @default []\n             */\n            \"aoRowCreatedCallback\": [],\n\n            /**\n             * Callback functions for just before the table is redrawn. A return of\n             * false will be used to cancel the draw.\n             *  @type array\n             *  @default []\n             */\n            \"aoPreDrawCallback\": [],\n\n            /**\n             * Callback functions for when the table has been initialised.\n             *  @type array\n             *  @default []\n             */\n            \"aoInitComplete\": [],\n\n\n            /**\n             * Callbacks for modifying the settings to be stored for state saving, prior to\n             * saving state.\n             *  @type array\n             *  @default []\n             */\n            \"aoStateSaveParams\": [],\n\n            /**\n             * Callbacks for modifying the settings that have been stored for state saving\n             * prior to using the stored values to restore the state.\n             *  @type array\n             *  @default []\n             */\n            \"aoStateLoadParams\": [],\n\n            /**\n             * Callbacks for operating on the settings object once the saved state has been\n             * loaded\n             *  @type array\n             *  @default []\n             */\n            \"aoStateLoaded\": [],\n\n            /**\n             * Cache the table ID for quick access\n             *  @type string\n             *  @default <i>Empty string</i>\n             */\n            \"sTableId\": \"\",\n\n            /**\n             * The TABLE node for the main table\n             *  @type node\n             *  @default null\n             */\n            \"nTable\": null,\n\n            /**\n             * Permanent ref to the thead element\n             *  @type node\n             *  @default null\n             */\n            \"nTHead\": null,\n\n            /**\n             * Permanent ref to the tfoot element - if it exists\n             *  @type node\n             *  @default null\n             */\n            \"nTFoot\": null,\n\n            /**\n             * Permanent ref to the tbody element\n             *  @type node\n             *  @default null\n             */\n            \"nTBody\": null,\n\n            /**\n             * Cache the wrapper node (contains all DataTables controlled elements)\n             *  @type node\n             *  @default null\n             */\n            \"nTableWrapper\": null,\n\n            /**\n             * Indicate if when using server-side processing the loading of data\n             * should be deferred until the second draw.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             *  @default false\n             */\n            \"bDeferLoading\": false,\n\n            /**\n             * Indicate if all required information has been read in\n             *  @type boolean\n             *  @default false\n             */\n            \"bInitialised\": false,\n\n            /**\n             * Information about open rows. Each object in the array has the parameters\n             * 'nTr' and 'nParent'\n             *  @type array\n             *  @default []\n             */\n            \"aoOpenRows\": [],\n\n            /**\n             * Dictate the positioning of DataTables' control elements - see\n             * {@link DataTable.model.oInit.sDom}.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             *  @default null\n             */\n            \"sDom\": null,\n\n            /**\n             * Which type of pagination should be used.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             *  @default two_button\n             */\n            \"sPaginationType\": \"two_button\",\n\n            /**\n             * The cookie duration (for bStateSave) in seconds.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type int\n             *  @default 0\n             */\n            \"iCookieDuration\": 0,\n\n            /**\n             * The cookie name prefix.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             *  @default <i>Empty string</i>\n             */\n            \"sCookiePrefix\": \"\",\n\n            /**\n             * Callback function for cookie creation.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type function\n             *  @default null\n             */\n            \"fnCookieCallback\": null,\n\n            /**\n             * Array of callback functions for state saving. Each array element is an\n             * object with the following parameters:\n             *   <ul>\n             *     <li>function:fn - function to call. Takes two parameters, oSettings\n             *       and the JSON string to save that has been thus far created. Returns\n             *       a JSON string to be inserted into a json object\n             *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n             *     <li>string:sName - name of callback</li>\n             *   </ul>\n             *  @type array\n             *  @default []\n             */\n            \"aoStateSave\": [],\n\n            /**\n             * Array of callback functions for state loading. Each array element is an\n             * object with the following parameters:\n             *   <ul>\n             *     <li>function:fn - function to call. Takes two parameters, oSettings\n             *       and the object stored. May return false to cancel state loading</li>\n             *     <li>string:sName - name of callback</li>\n             *   </ul>\n             *  @type array\n             *  @default []\n             */\n            \"aoStateLoad\": [],\n\n            /**\n             * State that was loaded from the cookie. Useful for back reference\n             *  @type object\n             *  @default null\n             */\n            \"oLoadedState\": null,\n\n            /**\n             * Source url for AJAX data for the table.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             *  @default null\n             */\n            \"sAjaxSource\": null,\n\n            /**\n             * Property from a given object from which to read the table data from. This\n             * can be an empty string (when not server-side processing), in which case\n             * it is  assumed an an array is given directly.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             */\n            \"sAjaxDataProp\": null,\n\n            /**\n             * Note if draw should be blocked while getting data\n             *  @type boolean\n             *  @default true\n             */\n            \"bAjaxDataGet\": true,\n\n            /**\n             * The last jQuery XHR object that was used for server-side data gathering.\n             * This can be used for working with the XHR information in one of the\n             * callbacks\n             *  @type object\n             *  @default null\n             */\n            \"jqXHR\": null,\n\n            /**\n             * Function to get the server-side data.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type function\n             */\n            \"fnServerData\": null,\n\n            /**\n             * Functions which are called prior to sending an Ajax request so extra\n             * parameters can easily be sent to the server\n             *  @type array\n             *  @default []\n             */\n            \"aoServerParams\": [],\n\n            /**\n             * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n             * required).\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             */\n            \"sServerMethod\": null,\n\n            /**\n             * Format numbers for display.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type function\n             */\n            \"fnFormatNumber\": null,\n\n            /**\n             * List of options that can be used for the user selectable length menu.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type array\n             *  @default []\n             */\n            \"aLengthMenu\": null,\n\n            /**\n             * Counter for the draws that the table does. Also used as a tracker for\n             * server-side processing\n             *  @type int\n             *  @default 0\n             */\n            \"iDraw\": 0,\n\n            /**\n             * Indicate if a redraw is being done - useful for Ajax\n             *  @type boolean\n             *  @default false\n             */\n            \"bDrawing\": false,\n\n            /**\n             * Draw index (iDraw) of the last error when parsing the returned data\n             *  @type int\n             *  @default -1\n             */\n            \"iDrawError\": -1,\n\n            /**\n             * Paging display length\n             *  @type int\n             *  @default 10\n             */\n            \"_iDisplayLength\": 10,\n\n            /**\n             * Paging start point - aiDisplay index\n             *  @type int\n             *  @default 0\n             */\n            \"_iDisplayStart\": 0,\n\n            /**\n             * Paging end point - aiDisplay index. Use fnDisplayEnd rather than\n             * this property to get the end point\n             *  @type int\n             *  @default 10\n             *  @private\n             */\n            \"_iDisplayEnd\": 10,\n\n            /**\n             * Server-side processing - number of records in the result set\n             * (i.e. before filtering), Use fnRecordsTotal rather than\n             * this property to get the value of the number of records, regardless of\n             * the server-side processing setting.\n             *  @type int\n             *  @default 0\n             *  @private\n             */\n            \"_iRecordsTotal\": 0,\n\n            /**\n             * Server-side processing - number of records in the current display set\n             * (i.e. after filtering). Use fnRecordsDisplay rather than\n             * this property to get the value of the number of records, regardless of\n             * the server-side processing setting.\n             *  @type boolean\n             *  @default 0\n             *  @private\n             */\n            \"_iRecordsDisplay\": 0,\n\n            /**\n             * Flag to indicate if jQuery UI marking and classes should be used.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bJUI\": null,\n\n            /**\n             * The classes to use for the table\n             *  @type object\n             *  @default {}\n             */\n            \"oClasses\": {},\n\n            /**\n             * Flag attached to the settings object so you can check in the draw\n             * callback if filtering has been done in the draw. Deprecated in favour of\n             * events.\n             *  @type boolean\n             *  @default false\n             *  @deprecated\n             */\n            \"bFiltered\": false,\n\n            /**\n             * Flag attached to the settings object so you can check in the draw\n             * callback if sorting has been done in the draw. Deprecated in favour of\n             * events.\n             *  @type boolean\n             *  @default false\n             *  @deprecated\n             */\n            \"bSorted\": false,\n\n            /**\n             * Indicate that if multiple rows are in the header and there is more than\n             * one unique cell per column, if the top one (true) or bottom one (false)\n             * should be used for sorting / title by DataTables.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bSortCellsTop\": null,\n\n            /**\n             * Initialisation object that is used for the table\n             *  @type object\n             *  @default null\n             */\n            \"oInit\": null,\n\n            /**\n             * Destroy callback functions - for plug-ins to attach themselves to the\n             * destroy so they can clean up markup and events.\n             *  @type array\n             *  @default []\n             */\n            \"aoDestroyCallback\": [],\n\n\n            /**\n             * Get the number of records in the current record set, before filtering\n             *  @type function\n             */\n            \"fnRecordsTotal\": function() {\n                if (this.oFeatures.bServerSide) {\n                    return parseInt(this._iRecordsTotal, 10);\n                } else {\n                    return this.aiDisplayMaster.length;\n                }\n            },\n\n            /**\n             * Get the number of records in the current record set, after filtering\n             *  @type function\n             */\n            \"fnRecordsDisplay\": function() {\n                if (this.oFeatures.bServerSide) {\n                    return parseInt(this._iRecordsDisplay, 10);\n                } else {\n                    return this.aiDisplay.length;\n                }\n            },\n\n            /**\n             * Set the display end point - aiDisplay index\n             *  @type function\n             *  @todo Should do away with _iDisplayEnd and calculate it on-the-fly here\n             */\n            \"fnDisplayEnd\": function() {\n                if (this.oFeatures.bServerSide) {\n                    if (this.oFeatures.bPaginate === false || this._iDisplayLength == -1) {\n                        return this._iDisplayStart + this.aiDisplay.length;\n                    } else {\n                        return Math.min(this._iDisplayStart + this._iDisplayLength,\n                            this._iRecordsDisplay);\n                    }\n                } else {\n                    return this._iDisplayEnd;\n                }\n            },\n\n            /**\n             * The DataTables object for this table\n             *  @type object\n             *  @default null\n             */\n            \"oInstance\": null,\n\n            /**\n             * Unique identifier for each instance of the DataTables object. If there\n             * is an ID on the table node, then it takes that value, otherwise an\n             * incrementing internal counter is used.\n             *  @type string\n             *  @default null\n             */\n            \"sInstance\": null,\n\n            /**\n             * tabindex attribute value that is added to DataTables control elements, allowing\n             * keyboard navigation of the table and its controls.\n             */\n            \"iTabIndex\": 0,\n\n            /**\n             * DIV container for the footer scrolling table if scrolling\n             */\n            \"nScrollHead\": null,\n\n            /**\n             * DIV container for the footer scrolling table if scrolling\n             */\n            \"nScrollFoot\": null\n        };\n\n        /**\n         * Extension object for DataTables that is used to provide all extension options.\n         *\n         * Note that the <i>DataTable.ext</i> object is available through\n         * <i>jQuery.fn.dataTable.ext</i> where it may be accessed and manipulated. It is\n         * also aliased to <i>jQuery.fn.dataTableExt</i> for historic reasons.\n         *  @namespace\n         *  @extends DataTable.models.ext\n         */\n        DataTable.ext = $.extend(true, {}, DataTable.models.ext);\n\n        $.extend(DataTable.ext.oStdClasses, {\n            \"sTable\": \"dataTable\",\n\n            /* Two buttons buttons */\n            \"sPagePrevEnabled\": \"paginate_enabled_previous\",\n            \"sPagePrevDisabled\": \"paginate_disabled_previous\",\n            \"sPageNextEnabled\": \"paginate_enabled_next\",\n            \"sPageNextDisabled\": \"paginate_disabled_next\",\n            \"sPageJUINext\": \"\",\n            \"sPageJUIPrev\": \"\",\n\n            /* Full numbers paging buttons */\n            \"sPageButton\": \"paginate_button\",\n            \"sPageButtonActive\": \"paginate_active\",\n            \"sPageButtonStaticDisabled\": \"paginate_button paginate_button_disabled\",\n            \"sPageFirst\": \"first\",\n            \"sPagePrevious\": \"previous\",\n            \"sPageNext\": \"next\",\n            \"sPageLast\": \"last\",\n\n            /* Striping classes */\n            \"sStripeOdd\": \"odd\",\n            \"sStripeEven\": \"even\",\n\n            /* Empty row */\n            \"sRowEmpty\": \"dataTables_empty\",\n\n            /* Features */\n            \"sWrapper\": \"dataTables_wrapper\",\n            \"sFilter\": \"dataTables_filter\",\n            \"sInfo\": \"dataTables_info\",\n            \"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\n            \"sLength\": \"dataTables_length\",\n            \"sProcessing\": \"dataTables_processing\",\n\n            /* Sorting */\n            \"sSortAsc\": \"sorting_asc\",\n            \"sSortDesc\": \"sorting_desc\",\n            \"sSortable\": \"sorting\", /* Sortable in both directions */\n            \"sSortableAsc\": \"sorting_asc_disabled\",\n            \"sSortableDesc\": \"sorting_desc_disabled\",\n            \"sSortableNone\": \"sorting_disabled\",\n            \"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\n            \"sSortJUIAsc\": \"\",\n            \"sSortJUIDesc\": \"\",\n            \"sSortJUI\": \"\",\n            \"sSortJUIAscAllowed\": \"\",\n            \"sSortJUIDescAllowed\": \"\",\n            \"sSortJUIWrapper\": \"\",\n            \"sSortIcon\": \"\",\n\n            /* Scrolling */\n            \"sScrollWrapper\": \"dataTables_scroll\",\n            \"sScrollHead\": \"dataTables_scrollHead\",\n            \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n            \"sScrollBody\": \"dataTables_scrollBody\",\n            \"sScrollFoot\": \"dataTables_scrollFoot\",\n            \"sScrollFootInner\": \"dataTables_scrollFootInner\",\n\n            /* Misc */\n            \"sFooterTH\": \"\",\n            \"sJUIHeader\": \"\",\n            \"sJUIFooter\": \"\"\n        });\n\n\n        $.extend(DataTable.ext.oJUIClasses, DataTable.ext.oStdClasses, {\n            /* Two buttons buttons */\n            \"sPagePrevEnabled\": \"fg-button ui-button ui-state-default ui-corner-left\",\n            \"sPagePrevDisabled\": \"fg-button ui-button ui-state-default ui-corner-left ui-state-disabled\",\n            \"sPageNextEnabled\": \"fg-button ui-button ui-state-default ui-corner-right\",\n            \"sPageNextDisabled\": \"fg-button ui-button ui-state-default ui-corner-right ui-state-disabled\",\n            \"sPageJUINext\": \"ui-icon ui-icon-circle-arrow-e\",\n            \"sPageJUIPrev\": \"ui-icon ui-icon-circle-arrow-w\",\n\n            /* Full numbers paging buttons */\n            \"sPageButton\": \"fg-button ui-button ui-state-default\",\n            \"sPageButtonActive\": \"fg-button ui-button ui-state-default ui-state-disabled\",\n            \"sPageButtonStaticDisabled\": \"fg-button ui-button ui-state-default ui-state-disabled\",\n            \"sPageFirst\": \"first ui-corner-tl ui-corner-bl\",\n            \"sPageLast\": \"last ui-corner-tr ui-corner-br\",\n\n            /* Features */\n            \"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \" +\n                \"ui-buttonset-multi paging_\", /* Note that the type is postfixed */\n\n            /* Sorting */\n            \"sSortAsc\": \"ui-state-default\",\n            \"sSortDesc\": \"ui-state-default\",\n            \"sSortable\": \"ui-state-default\",\n            \"sSortableAsc\": \"ui-state-default\",\n            \"sSortableDesc\": \"ui-state-default\",\n            \"sSortableNone\": \"ui-state-default\",\n            \"sSortJUIAsc\": \"css_right ui-icon ui-icon-triangle-1-n\",\n            \"sSortJUIDesc\": \"css_right ui-icon ui-icon-triangle-1-s\",\n            \"sSortJUI\": \"css_right ui-icon ui-icon-carat-2-n-s\",\n            \"sSortJUIAscAllowed\": \"css_right ui-icon ui-icon-carat-1-n\",\n            \"sSortJUIDescAllowed\": \"css_right ui-icon ui-icon-carat-1-s\",\n            \"sSortJUIWrapper\": \"DataTables_sort_wrapper\",\n            \"sSortIcon\": \"DataTables_sort_icon\",\n\n            /* Scrolling */\n            \"sScrollHead\": \"dataTables_scrollHead ui-state-default\",\n            \"sScrollFoot\": \"dataTables_scrollFoot ui-state-default\",\n\n            /* Misc */\n            \"sFooterTH\": \"ui-state-default\",\n            \"sJUIHeader\": \"fg-toolbar ui-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix\",\n            \"sJUIFooter\": \"fg-toolbar ui-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix\"\n        });\n\n        /*\n\t * Variable: oPagination\n\t * Purpose:\n\t * Scope:    jQuery.fn.dataTableExt\n\t */\n        $.extend(DataTable.ext.oPagination, {\n            /*\n\t\t * Variable: two_button\n\t\t * Purpose:  Standard two button (forward/back) pagination\n\t\t * Scope:    jQuery.fn.dataTableExt.oPagination\n\t\t */\n            \"two_button\": {\n                /*\n\t\t\t * Function: oPagination.two_button.fnInit\n\t\t\t * Purpose:  Initialise dom elements required for pagination with forward/back buttons only\n\t\t\t * Returns:  -\n\t\t\t * Inputs:   object:oSettings - dataTables settings object\n\t\t\t *           node:nPaging - the DIV which contains this pagination control\n\t\t\t *           function:fnCallbackDraw - draw function which must be called on update\n\t\t\t */\n                \"fnInit\": function(oSettings, nPaging, fnCallbackDraw) {\n                    var oLang = oSettings.oLanguage.oPaginate;\n                    var oClasses = oSettings.oClasses;\n                    var fnClickHandler = function(e) {\n                        if (oSettings.oApi._fnPageChange(oSettings, e.data.action)) {\n                            fnCallbackDraw(oSettings);\n                        }\n                    };\n\n                    var sAppend = (!oSettings.bJUI) ?\n                        '<a class=\"' + oSettings.oClasses.sPagePrevDisabled + '\" tabindex=\"' + oSettings.iTabIndex + '\" role=\"button\">' + oLang.sPrevious + '</a>' +\n                        '<a class=\"' + oSettings.oClasses.sPageNextDisabled + '\" tabindex=\"' + oSettings.iTabIndex + '\" role=\"button\">' + oLang.sNext + '</a>'\n                        :\n                        '<a class=\"' + oSettings.oClasses.sPagePrevDisabled + '\" tabindex=\"' + oSettings.iTabIndex + '\" role=\"button\"><span class=\"' + oSettings.oClasses.sPageJUIPrev + '\"></span></a>' +\n                        '<a class=\"' + oSettings.oClasses.sPageNextDisabled + '\" tabindex=\"' + oSettings.iTabIndex + '\" role=\"button\"><span class=\"' + oSettings.oClasses.sPageJUINext + '\"></span></a>';\n                    $(nPaging).append(sAppend);\n\n                    var els = $('a', nPaging);\n                    var nPrevious = els[0],\n                        nNext = els[1];\n\n                    oSettings.oApi._fnBindAction(nPrevious, {action: \"previous\"}, fnClickHandler);\n                    oSettings.oApi._fnBindAction(nNext, {action: \"next\"}, fnClickHandler);\n\n                    /* ID the first elements only */\n                    if (!oSettings.aanFeatures.p) {\n                        nPaging.id = oSettings.sTableId + '_paginate';\n                        nPrevious.id = oSettings.sTableId + '_previous';\n                        nNext.id = oSettings.sTableId + '_next';\n\n                        nPrevious.setAttribute('aria-controls', oSettings.sTableId);\n                        nNext.setAttribute('aria-controls', oSettings.sTableId);\n                    }\n                },\n\n                /*\n\t\t\t * Function: oPagination.two_button.fnUpdate\n\t\t\t * Purpose:  Update the two button pagination at the end of the draw\n\t\t\t * Returns:  -\n\t\t\t * Inputs:   object:oSettings - dataTables settings object\n\t\t\t *           function:fnCallbackDraw - draw function to call on page change\n\t\t\t */\n                \"fnUpdate\": function(oSettings, fnCallbackDraw) {\n                    if (!oSettings.aanFeatures.p) {\n                        return;\n                    }\n\n                    var oClasses = oSettings.oClasses;\n                    var an = oSettings.aanFeatures.p;\n                    var nNode;\n\n                    /* Loop over each instance of the pager */\n                    for (var i = 0, iLen = an.length; i < iLen; i++) {\n                        nNode = an[i].firstChild;\n                        if (nNode) {\n                            /* Previous page */\n                            nNode.className = (oSettings._iDisplayStart === 0) ?\n                                oClasses.sPagePrevDisabled : oClasses.sPagePrevEnabled;\n\n                            /* Next page */\n                            nNode = nNode.nextSibling;\n                            nNode.className = (oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay()) ?\n                                oClasses.sPageNextDisabled : oClasses.sPageNextEnabled;\n                        }\n                    }\n                }\n            },\n\n\n            /*\n\t\t * Variable: iFullNumbersShowPages\n\t\t * Purpose:  Change the number of pages which can be seen\n\t\t * Scope:    jQuery.fn.dataTableExt.oPagination\n\t\t */\n            \"iFullNumbersShowPages\": 5,\n\n            /*\n\t\t * Variable: full_numbers\n\t\t * Purpose:  Full numbers pagination\n\t\t * Scope:    jQuery.fn.dataTableExt.oPagination\n\t\t */\n            \"full_numbers\": {\n                /*\n\t\t\t * Function: oPagination.full_numbers.fnInit\n\t\t\t * Purpose:  Initialise dom elements required for pagination with a list of the pages\n\t\t\t * Returns:  -\n\t\t\t * Inputs:   object:oSettings - dataTables settings object\n\t\t\t *           node:nPaging - the DIV which contains this pagination control\n\t\t\t *           function:fnCallbackDraw - draw function which must be called on update\n\t\t\t */\n                \"fnInit\": function(oSettings, nPaging, fnCallbackDraw) {\n                    var oLang = oSettings.oLanguage.oPaginate;\n                    var oClasses = oSettings.oClasses;\n                    var fnClickHandler = function(e) {\n                        if (oSettings.oApi._fnPageChange(oSettings, e.data.action)) {\n                            fnCallbackDraw(oSettings);\n                        }\n                    };\n\n                    $(nPaging).append(\n                        '<a  tabindex=\"' + oSettings.iTabIndex + '\" class=\"' + oClasses.sPageButton + \" \" + oClasses.sPageFirst + '\">' + oLang.sFirst + '</a>' +\n                        '<a  tabindex=\"' + oSettings.iTabIndex + '\" class=\"' + oClasses.sPageButton + \" \" + oClasses.sPagePrevious + '\">' + oLang.sPrevious + '</a>' +\n                        '<span></span>' +\n                        '<a tabindex=\"' + oSettings.iTabIndex + '\" class=\"' + oClasses.sPageButton + \" \" + oClasses.sPageNext + '\">' + oLang.sNext + '</a>' +\n                        '<a tabindex=\"' + oSettings.iTabIndex + '\" class=\"' + oClasses.sPageButton + \" \" + oClasses.sPageLast + '\">' + oLang.sLast + '</a>'\n                    );\n                    var els = $('a', nPaging);\n                    var nFirst = els[0],\n                        nPrev = els[1],\n                        nNext = els[2],\n                        nLast = els[3];\n\n                    oSettings.oApi._fnBindAction(nFirst, {action: \"first\"}, fnClickHandler);\n                    oSettings.oApi._fnBindAction(nPrev, {action: \"previous\"}, fnClickHandler);\n                    oSettings.oApi._fnBindAction(nNext, {action: \"next\"}, fnClickHandler);\n                    oSettings.oApi._fnBindAction(nLast, {action: \"last\"}, fnClickHandler);\n\n                    /* ID the first elements only */\n                    if (!oSettings.aanFeatures.p) {\n                        nPaging.id = oSettings.sTableId + '_paginate';\n                        nFirst.id = oSettings.sTableId + '_first';\n                        nPrev.id = oSettings.sTableId + '_previous';\n                        nNext.id = oSettings.sTableId + '_next';\n                        nLast.id = oSettings.sTableId + '_last';\n                    }\n                },\n\n                /*\n\t\t\t * Function: oPagination.full_numbers.fnUpdate\n\t\t\t * Purpose:  Update the list of page buttons shows\n\t\t\t * Returns:  -\n\t\t\t * Inputs:   object:oSettings - dataTables settings object\n\t\t\t *           function:fnCallbackDraw - draw function to call on page change\n\t\t\t */\n                \"fnUpdate\": function(oSettings, fnCallbackDraw) {\n                    if (!oSettings.aanFeatures.p) {\n                        return;\n                    }\n\n                    var iPageCount = DataTable.ext.oPagination.iFullNumbersShowPages;\n                    var iPageCountHalf = Math.floor(iPageCount / 2);\n                    var iPages = Math.ceil((oSettings.fnRecordsDisplay()) / oSettings._iDisplayLength);\n                    var iCurrentPage = Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength) + 1;\n                    var sList = \"\";\n                    var iStartButton, iEndButton, i, iLen;\n                    var oClasses = oSettings.oClasses;\n                    var anButtons, anStatic, nPaginateList, nNode;\n                    var an = oSettings.aanFeatures.p;\n                    var fnBind = function(j) {\n                        oSettings.oApi._fnBindAction(this, {\"page\": j + iStartButton - 1}, function(e) {\n                            /* Use the information in the element to jump to the required page */\n                            oSettings.oApi._fnPageChange(oSettings, e.data.page);\n                            fnCallbackDraw(oSettings);\n                            e.preventDefault();\n                        });\n                    };\n\n                    /* Pages calculation */\n                    if (oSettings._iDisplayLength === -1) {\n                        iStartButton = 1;\n                        iEndButton = 1;\n                        iCurrentPage = 1;\n                    } else if (iPages < iPageCount) {\n                        iStartButton = 1;\n                        iEndButton = iPages;\n                    } else if (iCurrentPage <= iPageCountHalf) {\n                        iStartButton = 1;\n                        iEndButton = iPageCount;\n                    } else if (iCurrentPage >= (iPages - iPageCountHalf)) {\n                        iStartButton = iPages - iPageCount + 1;\n                        iEndButton = iPages;\n                    } else {\n                        iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;\n                        iEndButton = iStartButton + iPageCount - 1;\n                    }\n\n\n                    /* Build the dynamic list */\n                    for (i = iStartButton; i <= iEndButton; i++) {\n                        sList += (iCurrentPage !== i) ?\n                            '<a tabindex=\"' + oSettings.iTabIndex + '\" class=\"' + oClasses.sPageButton + '\">' + oSettings.fnFormatNumber(i) + '</a>' :\n                            '<a tabindex=\"' + oSettings.iTabIndex + '\" class=\"' + oClasses.sPageButtonActive + '\">' + oSettings.fnFormatNumber(i) + '</a>';\n                    }\n\n                    /* Loop over each instance of the pager */\n                    for (i = 0, iLen = an.length; i < iLen; i++) {\n                        nNode = an[i];\n                        if (!nNode.hasChildNodes()) {\n                            continue;\n                        }\n\n                        /* Build up the dynamic list first - html and listeners */\n                        $('span:eq(0)', nNode)\n                            .html(sList)\n                            .children('a').each(fnBind);\n\n                        /* Update the permanent button's classes */\n                        anButtons = nNode.getElementsByTagName('a');\n                        anStatic = [\n                            anButtons[0], anButtons[1],\n                            anButtons[anButtons.length - 2], anButtons[anButtons.length - 1]\n                        ];\n\n                        $(anStatic).removeClass(oClasses.sPageButton + \" \" + oClasses.sPageButtonActive + \" \" + oClasses.sPageButtonStaticDisabled);\n                        $([anStatic[0], anStatic[1]]).addClass(\n                            (iCurrentPage == 1) ?\n                                oClasses.sPageButtonStaticDisabled :\n                                oClasses.sPageButton\n                        );\n                        $([anStatic[2], anStatic[3]]).addClass(\n                            (iPages === 0 || iCurrentPage === iPages || oSettings._iDisplayLength === -1) ?\n                                oClasses.sPageButtonStaticDisabled :\n                                oClasses.sPageButton\n                        );\n                    }\n                }\n            }\n        });\n\n        $.extend(DataTable.ext.oSort, {\n            /*\n\t\t * text sorting\n\t\t */\n            \"string-pre\": function(a) {\n                if (typeof a != 'string') {\n                    a = (a !== null && a.toString) ? a.toString() : '';\n                }\n                return a.toLowerCase();\n            },\n\n            \"string-asc\": function(x, y) {\n                return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n            },\n\n            \"string-desc\": function(x, y) {\n                return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n            },\n\n\n            /*\n\t\t * html sorting (ignore html tags)\n\t\t */\n            \"html-pre\": function(a) {\n                return a.replace(/<.*?>/g, \"\").toLowerCase();\n            },\n\n            \"html-asc\": function(x, y) {\n                return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n            },\n\n            \"html-desc\": function(x, y) {\n                return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n            },\n\n\n            /*\n\t\t * date sorting\n\t\t */\n            \"date-pre\": function(a) {\n                var x = Date.parse(a);\n\n                if (isNaN(x) || x === \"\") {\n                    x = Date.parse(\"01/01/1970 00:00:00\");\n                }\n                return x;\n            },\n\n            \"date-asc\": function(x, y) {\n                return x - y;\n            },\n\n            \"date-desc\": function(x, y) {\n                return y - x;\n            },\n\n\n            /*\n\t\t * numerical sorting\n\t\t */\n            \"numeric-pre\": function(a) {\n                return (a == \"-\" || a === \"\") ? 0 : a * 1;\n            },\n\n            \"numeric-asc\": function(x, y) {\n                return x - y;\n            },\n\n            \"numeric-desc\": function(x, y) {\n                return y - x;\n            }\n        });\n\n\n        $.extend(DataTable.ext.aTypes, [\n            /*\n\t\t * Function: -\n\t\t * Purpose:  Check to see if a string is numeric\n\t\t * Returns:  string:'numeric' or null\n\t\t * Inputs:   mixed:sText - string to check\n\t\t */\n            function(sData) {\n                /* Allow zero length strings as a number */\n                if (typeof sData === 'number') {\n                    return 'numeric';\n                } else if (typeof sData !== 'string') {\n                    return null;\n                }\n\n                var sValidFirstChars = \"0123456789-\";\n                var sValidChars = \"0123456789.\";\n                var Char;\n                var bDecimal = false;\n\n                /* Check for a valid first char (no period and allow negatives) */\n                Char = sData.charAt(0);\n                if (sValidFirstChars.indexOf(Char) == -1) {\n                    return null;\n                }\n\n                /* Check all the other characters are valid */\n                for (var i = 1; i < sData.length; i++) {\n                    Char = sData.charAt(i);\n                    if (sValidChars.indexOf(Char) == -1) {\n                        return null;\n                    }\n\n                    /* Only allowed one decimal place... */\n                    if (Char == \".\") {\n                        if (bDecimal) {\n                            return null;\n                        }\n                        bDecimal = true;\n                    }\n                }\n\n                return 'numeric';\n            },\n\n            /*\n\t\t * Function: -\n\t\t * Purpose:  Check to see if a string is actually a formatted date\n\t\t * Returns:  string:'date' or null\n\t\t * Inputs:   string:sText - string to check\n\t\t */\n            function(sData) {\n                var iParse = Date.parse(sData);\n                if ((iParse !== null && !isNaN(iParse)) || (typeof sData === 'string' && sData.length === 0)) {\n                    return 'date';\n                }\n                return null;\n            },\n\n            /*\n\t\t * Function: -\n\t\t * Purpose:  Check to see if a string should be treated as an HTML string\n\t\t * Returns:  string:'html' or null\n\t\t * Inputs:   string:sText - string to check\n\t\t */\n            function(sData) {\n                if (typeof sData === 'string' && sData.indexOf('<') != -1 && sData.indexOf('>') != -1) {\n                    return 'html';\n                }\n                return null;\n            }\n        ]);\n\n\n        // jQuery aliases\n        $.fn.DataTable = DataTable;\n        $.fn.dataTable = DataTable;\n        $.fn.dataTableSettings = DataTable.settings;\n        $.fn.dataTableExt = DataTable.ext;\n\n\n        // Information about events fired by DataTables - for documentation.\n        /**\n         * Draw event, fired whenever the table is redrawn on the page, at the same point as\n         * fnDrawCallback. This may be useful for binding events or performing calculations when\n         * the table is altered at all.\n         *  @name DataTable#draw\n         *  @event\n         *  @param {event} e jQuery event object\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n         */\n\n        /**\n         * Filter event, fired when the filtering applied to the table (using the build in global\n         * global filter, or column filters) is altered.\n         *  @name DataTable#filter\n         *  @event\n         *  @param {event} e jQuery event object\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n         */\n\n        /**\n         * Page change event, fired when the paging of the table is altered.\n         *  @name DataTable#page\n         *  @event\n         *  @param {event} e jQuery event object\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n         */\n\n        /**\n         * Sort event, fired when the sorting applied to the table is altered.\n         *  @name DataTable#sort\n         *  @event\n         *  @param {event} e jQuery event object\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n         */\n\n        /**\n         * DataTables initialisation complete event, fired when the table is fully drawn,\n         * including Ajax data loaded, if Ajax data is required.\n         *  @name DataTable#init\n         *  @event\n         *  @param {event} e jQuery event object\n         *  @param {object} oSettings DataTables settings object\n         *  @param {object} json The JSON object request from the server - only\n         *    present if client-side Ajax sourced data is used</li></ol>\n         */\n\n        /**\n         * State save event, fired when the table has changed state a new state save is required.\n         * This method allows modification of the state saving object prior to actually doing the\n         * save, including addition or other state properties (for plug-ins) or modification\n         * of a DataTables core property.\n         *  @name DataTable#stateSaveParams\n         *  @event\n         *  @param {event} e jQuery event object\n         *  @param {object} oSettings DataTables settings object\n         *  @param {object} json The state information to be saved\n         */\n\n        /**\n         * State load event, fired when the table is loading state from the stored data, but\n         * prior to the settings object being modified by the saved state - allowing modification\n         * of the saved state is required or loading of state for a plug-in.\n         *  @name DataTable#stateLoadParams\n         *  @event\n         *  @param {event} e jQuery event object\n         *  @param {object} oSettings DataTables settings object\n         *  @param {object} json The saved state information\n         */\n\n        /**\n         * State loaded event, fired when state has been loaded from stored data and the settings\n         * object has been modified by the loaded data.\n         *  @name DataTable#stateLoaded\n         *  @event\n         *  @param {event} e jQuery event object\n         *  @param {object} oSettings DataTables settings object\n         *  @param {object} json The saved state information\n         */\n\n        /**\n         * Processing event, fired when DataTables is doing some kind of processing (be it,\n         * sort, filter or anything else). Can be used to indicate to the end user that\n         * there is something happening, or that something has finished.\n         *  @name DataTable#processing\n         *  @event\n         *  @param {event} e jQuery event object\n         *  @param {object} oSettings DataTables settings object\n         *  @param {boolean} bShow Flag for if DataTables is doing processing or not\n         */\n\n        /**\n         * Ajax (XHR) event, fired whenever an Ajax request is completed from a request to\n         * made to the server for new data (note that this trigger is called in fnServerData,\n         * if you override fnServerData and which to use this event, you need to trigger it in\n         * you success function).\n         *  @name DataTable#xhr\n         *  @event\n         *  @param {event} e jQuery event object\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n         *  @param {object} json JSON returned from the server\n         */\n\n        /**\n         * Destroy event, fired when the DataTable is destroyed by calling fnDestroy or passing\n         * the bDestroy:true parameter in the initialisation object. This can be used to remove\n         * bound events, added DOM nodes, etc.\n         *  @name DataTable#destroy\n         *  @event\n         *  @param {event} e jQuery event object\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n         */\n    }));\n\n}(window, document));\n\n"],"names":["window","document","undefined","factory","$","DataTable","oInit","_fnAddColumn","oSettings","nTh","oDefaults","defaults","columns","iCol","aoColumns","length","oCol","extend","models","oColumn","oClasses","sSortable","sSortJUI","createElement","sTitle","innerHTML","aDataSort","mData","push","aoPreSearchCols","oSearch","oPre","bRegex","bSmart","bCaseInsensitive","_fnColumnOptions","oOptions","mDataProp","sType","_bAutoType","_fnMap","iDataSort","mRender","_fnGetObjectDataFn","fnGetData","oData","sSpecific","innerData","fnSetData","_fnSetObjectDataFn","oFeatures","bSort","bSortable","inArray","asSorting","sSortingClass","sSortableNone","sSortingClassJUI","sSortableAsc","sSortJUIAscAllowed","sSortableDesc","sSortJUIDescAllowed","_fnAdjustColumnSizing","bAutoWidth","_fnCalculateColumnWidths","i","iLen","style","width","sWidth","_fnVisibleToColumnIndex","iMatch","aiVis","_fnGetColumns","_fnColumnIndexToVisible","iPos","_fnVisbleColumns","sParam","a","map","val","_fnDetectType","sData","aTypes","ext","_fnReOrderIndex","sColumns","aColumns","split","aiReturn","j","sName","_fnColumnOrdering","sNames","slice","_fnApplyColumnDefs","aoColDefs","aoCols","fn","jLen","k","kLen","aTargets","isArray","_fnLog","hasClass","_fnAddData","aDataSupplied","sThisType","aDataIn","iRow","aoData","oRow","_aData","fnRender","bUseRendered","_fnSetCellData","_fnRender","_fnGetCellData","sVarType","aiDisplayMaster","bDeferRender","_fnCreateTr","_fnGatherData","jInner","nTds","nTrs","nTd","nTr","iThisIndex","iRows","iColumn","iColumns","sNodeName","bDeferLoading","sAjaxSource","nTBody","firstChild","nodeName","toUpperCase","_DT_RowIndex","trim","nextSibling","_fnGetTrNodes","nCell","sRendered","sValType","bAutoType","bRender","bClass","sClass","bVisible","className","_anHidden","parentNode","removeChild","fnCreatedCell","call","oInstance","aoRowCreatedCallback","_fnCallbackFire","_fnNodeToDataIndex","n","_fnNodeToColumnIndex","anCells","_fnGetTdNodes","_fnGetRowData","aiColumns","out","iDrawError","iDraw","sDefaultContent","__reArray","mSource","data","type","extra","indexOf","fetchData","src","arrayNotation","innerSrc","match","replace","splice","join","substring","setData","b","o","_fnGetDataMaster","aData","_fnClearTable","aiDisplay","_fnCalculateEnd","_fnDeleteIndex","iTarget","iTargetIndex","DT_RowId","id","DT_RowClass","sCellType","appendChild","_fnBuildHead","nTHead","setAttribute","iTabIndex","sTableId","addClass","html","_fnDetectHeader","aoHeader","children","attr","bJUI","nDiv","sSortJUIWrapper","contents","appendTo","nSpan","sSortIcon","_fnSortAttachListener","sFooterTH","nTFoot","_fnGetUniqueThs","aoFooter","nTf","_fnDrawHead","aoSource","bIncludeHidden","nLocalTr","iRowspan","iColspan","aoLocal","aApplied","cell","rowSpan","colSpan","_fnDraw","aPreDraw","anRows","iRowCount","iStripes","asStripeClasses","iOpenRows","aoOpenRows","bDrawing","iInitDisplayStart","bServerSide","_iDisplayStart","fnRecordsDisplay","bDestroying","_fnAjaxUpdate","iStart","iEnd","_iDisplayEnd","nRow","sStripe","_sRowStripe","removeClass","nParent","oLang","oLanguage","sZero","sZeroRecords","sEmptyTable","fnRecordsTotal","sLoadingRecords","sRowEmpty","_fnInfoMacros","fnDisplayEnd","nBodyPar","nAddFrag","createDocumentFragment","nRemoveFrag","oScroll","bInfinite","_bInitComplete","bSorted","bFiltered","_fnProcessingDisplay","_fnInitComplete","_fnReDraw","_fnSort","oPreviousSearch","bFilter","_fnFilterComplete","_fnAddOptionsHtml","nHolding","nTable","insertBefore","nTableWrapper","sWrapper","nTableReinsertBefore","nTmp","iPushFeature","cOption","nNewNode","cNext","sAttr","nInsertNode","aDom","sDom","sJUIHeader","sJUIFooter","aSplit","substr","charAt","bPaginate","bLengthChange","_fnFeatureHtmlLength","_fnFeatureHtmlFilter","bProcessing","_fnFeatureHtmlProcessing","_fnFeatureHtmlTable","bInfo","_fnFeatureHtmlInfo","_fnFeatureHtmlPaginate","aoFeatures","cFeature","fnInit","aanFeatures","replaceChild","aLayout","nThead","l","iColShifted","bUnique","fnShiftCol","getAttribute","nHeader","aReturn","unique","bSortCellsTop","bAjaxDataGet","_fnAjaxParameters","_fnServerParams","fnServerData","json","_fnAjaxUpdateDraw","aaSort","_iDisplayLength","sSearch","bSearchable","iCounter","aaSortingFixed","concat","aaSorting","sEcho","_iRecordsTotal","parseInt","iTotalRecords","_iRecordsDisplay","iTotalDisplayRecords","aiIndex","sOrdering","bReOrder","sAjaxDataProp","aDataSorted","sSearchStr","nFilter","sFilter","f","jqFilter","_DT_Input","bind","e","this","value","parents","keyCode","oInput","iForce","oPrevSearch","aoPrevSearch","fnSaveFilter","oFilter","_fnFilter","_fnFilterColumn","_fnFilterCustom","trigger","_fnBuildSearchArray","afnFilters","afnFiltering","aiFilterColumns","iCorrector","iDisIndex","sInput","rpSearch","_fnFilterCreateSearch","_fnDataToSearch","test","asDataSearch","iIndexCorrector","iMaster","_fnBuildSearchRow","text","sRegExpString","_fnEscapeRegex","RegExp","ofnSearch","sVal","reReplace","nInfo","sInfo","aoDrawCallback","_fnUpdateInfo","sOut","iMax","iTotal","sInfoEmpty","sInfoFiltered","sInfoPostFix","fnInfoCallback","str","sStart","fnFormatNumber","sEnd","sTotal","sMax","_fnInitialise","iAjaxStart","bInitialised","_fnStringToCss","setTimeout","_fnLanguageCompat","sStdMenu","aLengthMenu","nLength","sLength","sLengthMenu","iVal","nPaginate","sPaging","sPaginationType","oPagination","p","fnUpdate","_fnPageChange","mAction","iOldStart","iPages","nProcessing","r","sProcessing","bShow","an","visibility","sX","sY","nScroller","nScrollHead","nScrollHeadInner","nScrollBody","nScrollFoot","nScrollFootInner","nScrollHeadTable","cloneNode","nScrollFootTable","getElementsByTagName","nTfoot","sScrollWrapper","sScrollHead","sScrollHeadInner","sScrollBody","sScrollFoot","sScrollFootInner","bAutoCss","overflow","position","border","sXInner","removeAttribute","marginLeft","nCaption","_captionSide","scroll","scrollLeft","height","_fnScrollDraw","scrollTop","iLoadGap","anHeadToSize","anHeadSizers","anFootSizers","anFootToSize","oStyle","iVis","nTheadSize","nTfootSize","iSanityWidth","aAppliedFooter","ie67","oBrowser","bScrollOversize","zeroOut","nSizer","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","remove","clone","childNodes","nThs","_fnApplyToChildren","bCollapse","offsetHeight","outerWidth","css","iBarWidth","nToSize","iCorrection","scrollHeight","iExtra","offsetWidth","iOuterWidth","bScrolling","clientHeight","paddingRight","an1","an2","nNode1","nNode2","index","nodeType","_fnConvertToWidth","iWidth","body","iTmpWidth","iUserInputs","iVisibleColumns","iColums","oHeaders","widthAttr","nWrapper","sWidthOrig","nCalcTmp","nTheadClone","nBody","jqColSizing","_fnGetWidestNode","sContentPadding","_fnScrollingWidthAdjust","oNodes","cssWidth","iMaxIndex","_fnGetMaxLenString","s","c","charCodeAt","_fnScrollBarWidth","inner","padding","outer","top","left","w1","w2","clientWidth","bApplyClasses","sDataType","aiOrig","oSort","oAria","iVisColumn","sSortDataType","afnSortData","fnSortFormat","iSortLen","_aSortData","sort","lLen","iTest","_fnSortingClasses","nextSort","sSortAscending","sSortDescending","nNode","iDataIndex","fnCallback","_fnBindAction","fnInnerSorting","iNextSort","shiftKey","bFound","iFound","sSortAsc","sSortDesc","sSpanClass","jqSpan","sSortJUIAsc","sSortJUIDesc","sSortColumn","bSortClasses","iClass","iTargetCol","asClasses","sTmpClass","sCurrentClass","sNewClass","reClass","_fnSaveState","bStateSave","oState","Date","getTime","abVisCols","fnStateSave","_fnLoadState","fnStateLoad","abStateLoad","oLoadedState","iLength","saved_aaSorting","aoSearchCols","saved_aoColumns","_fnCreateCookie","sValue","iSecs","sBaseName","date","setTime","aParts","location","pathname","sNameFile","pop","toLowerCase","sFullCookie","parseJSON","eval","toGMTString","encodeURIComponent","aCookies","cookie","iNewCookieLen","aOldCookies","aSplitCookie","decodeURIComponent","iCreate","time","old","name","_fnReadCookie","sNameEQ","sCookieContents","_fnSettingsFromNode","settings","aNodes","iIndividualRow","anTds","anReturn","iLevel","sMesg","sAlert","console","log","sErrMode","Error","alert","oRet","oSrc","sMappedName","_fnExtend","oOut","oExtender","prop","hasOwnProperty","blur","which","_fnCallbackReg","sStore","sTrigger","aArgs","aoStore","aRet","apply","_fnJsonString","JSON","stringify","sProp","mValue","bArr","_fnBrowserDetect","_fnExternApiFunc","sFunc","iApiIndex","Array","prototype","arguments","oApi","sSelector","oOpts","tr","page","order","filter","jqA","jqTRs","jqDescendants","find","makeArray","_","aOut","aTrs","fnAddData","bRedraw","fnAdjustColumnSizing","fnDraw","fnClearTable","fnClose","nTrParent","fnDeleteRow","mTarget","fnCallBack","iAODataIndex","iDisplayIndex","fnDestroy","bRemove","nOrig","fnSetColumnVis","andSelf","unbind","parent","each","jqWrapper","kids","append","sDestroyWidth","asDestroyStripes","bComplete","fnFilter","bShowGlobal","activeElement","mRow","sNode","fnGetNodes","fnGetPosition","iColumnIndex","fnIsOpen","fnOpen","mHtml","nTableRows","nNewRow","nNewCell","insertAfter","fnPageChange","bAppend","iBefore","iInsert","fnSettings","fnSort","fnSortListener","bAction","sDisplay","isPlainObject","fnVersionCheck","_that","sId","bInitHandedOff","bUsePassedData","bRetrieve","bDestroy","_oExternConfig","iNextUnique","dataTable","fnDrawCallback","fnServerParams","fnStateSaveParams","fnStateLoadParams","fnStateLoaded","fnRowCallback","fnCreatedRow","fnHeaderCallback","fnFooterCallback","fnInitComplete","fnPreDrawCallback","bJQueryUI","oJUIClasses","oStdClasses","sTable","iDisplayStart","iDeferLoading","tmp","aaData","sUrl","getJSON","sStripeOdd","sStripeEven","bStripeRemove","aoColumnsInit","anThs","aoColumnDefs","oDef","captions","thead","tbody","tfoot","sVersion","fnZPad","Zpad","count","aThis","aThat","sThis","sThat","fnIsDataTable","fnTables","jQuery","is","version","iIn","sInfoThousands","jqXHR","ajax","sError","sServerMethod","xhr","error","thrown","sCookiePrefix","sInstance","iCookieDuration","fnCookieCallback","Math","min","nPaging","fnCallbackDraw","oPaginate","fnClickHandler","action","sAppend","sPagePrevDisabled","sPageJUIPrev","sPageNextDisabled","sPageJUINext","sPrevious","sNext","els","nPrevious","nNext","sPagePrevEnabled","sPageNextEnabled","sPageButton","sPageFirst","sFirst","sPagePrevious","sPageNext","sPageLast","sLast","nFirst","nPrev","nLast","iStartButton","iEndButton","anButtons","anStatic","iPageCount","iFullNumbersShowPages","iPageCountHalf","floor","ceil","iCurrentPage","sList","fnBind","preventDefault","sPageButtonActive","hasChildNodes","sPageButtonStaticDisabled","toString","x","y","parse","isNaN","Char","bDecimal","iParse","dataTableSettings","dataTableExt","define","amd"],"mappings":"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"}